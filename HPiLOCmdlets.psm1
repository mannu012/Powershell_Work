<# (C) Copyright 2013, 2014 Hewlett-Packard Development Company, L.P. All rights reserved. #>
try
{
$currModule = $MyInvocation.MyCommand.Definition
$currPath = Split-Path -Path $currModule

#$RM = [System.Resources.ResourceManager]::CreateFileBasedResourceManager("HPiLOCmdlets",$currPath + "\resource", $null)
$currentUICulture = [System.Threading.Thread]::CurrentThread.CurrentUICulture
[string]$satellitePath = $currPath +  "\" +$currentUICulture.Name + "\HPiLOCmdlets.resources.dll"
$assembly = [System.Reflection.Assembly]::LoadFrom($satellitePath)
$RM = New-Object System.Resources.ResourceManager("HPiLOCmdlets", $assembly)
}
catch
{}


Add-Type @'
public class AsyncPipeline
{
    public System.Management.Automation.PowerShell Pipeline ;
    public System.IAsyncResult AsyncResult ;
}
'@

Function Check-RibclEmpty
{
    Param
    (
        [Parameter(Mandatory=$true)][String]$SendMsg
    )
   if($SendMsg.Contains("/>")){
    return $false
   }
   else{
   Write-Error $(Get-Message("MSG_INVALID_CHECK_RIBCL"))
   return $true
   } 
}

Function Get-Message
{
    Param
    (
        [Parameter(Mandatory=$true)][String]$MsgID
    )
	$LocalizedStrings=@{
	"MSG_PROGRESS_ACTIVITY"="Receiving Results"
	"MSG_PROGRESS_STATUS"="Percent Complete"
	"MSG_SENDING_TO"="Sending to {0}"
	"MSG_USING_THREADS"="Using {0} threads."
	"MSG_FAIL_HOSTNAME"="DNS name translation not available for {0} - Host name left blank."
	"MSG_FAIL_IPADDRESS"="Invalid Hostname: IP Address translation not available for hostname {0}."
	"MSG_PARAMETER_MISSING"="Error : Invalid use of cmdlet. parameter `"{0}`" is missing"
	"MSG_PARAMETER_MISSING2"="Invalid use of cmdlet. Required parameter is missing"
	"MSG_PARAMETER_PIPE_MISSING_IP"="Error : Invalid use of cmdlet. Server or IP or Hostname is missing in pipeline input"
	"MSG_PARAMETER_PIPE_NOT_SUPPORTED"="Error: Invalid use of cmdlet. Object type from pipeline is not supported"
	"MSG_PARAMETER_IN_BOTH_COMMANDLINE_AND_PIPE"="Input for `"{0}`" are passed by parameter name and pipeline. Value passed by parameter name will be used."
	"MSG_PARAMETER_MISSING_FORCE"="Error : There are missing parameters. When the Force parameter is used, required parameters should be provided"
	"MSG_PARAMETER_MISSING_FORCE2"="Error : Parameter `"{0}`" is missing. When the Force parameter is used, required parameters should be provided"
	"MSG_PARAMETER_CHECK_VALIDATESET_FAIL"="Parameter `"{0}`" -- Invalid input and the acceptable values are {1}"
	"MSG_PARAMETER_CHECK_LENGTH_FAIL_MIN"="Parameter `"{0}`" -- Invalid input and the valid length is larger than {1}"
	"MSG_PARAMETER_CHECK_LENGTH_FAIL_MAX"="Parameter `"{0}`" -- Invalid input and the valid length is less than {1}"
	"MSG_PARAMETER_CHECK_RANGE_FAIL"="Parameter `"{0}`" -- Invalid input and the valid range for this parameter is {1} to {2}"	
	#fixme: the following 3 messages are not added into 1.2, will be added later
	"MSG_PARAMETER_CHECK_IPV6IPV4_FAIL"="Parameter `"{0}`" -- Invalid input and only IPv4/IPv6 address is accepted"
	"MSG_PARAMETER_CHECK_IPV6_FAIL"="Parameter `"{0}`" -- Invalid input and only IPv6 address is accepted"
	"MSG_PARAMETER_CHECK_IPV4_FAIL"="Parameter `"{0}`" -- Invalid input and only IPv4 address is accepted"
	"MSG_PARAMETER_INVALID_INPUT"="Error : Invalid input for for parameter `"{0}`"."
	"MSG_PARAMETER_INVALID_TYPE"="Error : `"{0}`" is not supported for parameter `"{1}`"."
	"MSG_PARAMETER_NOTMATCH"="Input parameters -Server and -{0} do not have the same number of items"
	"MSG_PARAMETER_NOTMATCH2"="Error : You have {0} iLO servers, but you provide {1} values only for {2} servers"
	"MSG_INVALID_USE"="Error : Invalid use of cmdlet. Please check your input again"
	"MSG_INVALID_FORMAT"="Invalid input for including both single-quotes and double-quotes: {0}"
	"MSG_SECURITYMESSAGE_REMOVECHARS"="All instances of the sequence ']]>' have been removed from the security message."
	"MSG_INVALID_RANGE"="Error : The Range value is invalid"
	"MSG_INVALID_PARAMETER"="`"{0}`" is invalid, it will be ignored."
	"MSG_INVALID_TIMEOUT"="Error : The Timeout value is invalid"
	"MSG_FIND_LONGTIME"="It might take a while to search for all the HP iLOs if the input is a very large range. Use Verbose for more information."
	"MSG_USING_THREADS_FIND"="Using {0} threads for search."
	"MSG_PING"="Pinging {0}"
	"MSG_PING_FAIL"="No system responds at {0}"
	"MSG_FIND_NO_ILO"="No iLO at {0}"
	"MSG_NOSET_THRESHOLD"="The Threshold and Duration values will not be set on iLO because the Type parameter is set to Disabled"
	"MSG_DEFAULT_MODULECONTENTURL"="Use the default ModuleContentURI: {0}."
	"MSG_ASK_ADDSERVERS"="Do you want to add details for another server?(Y/N)"
	"MSG_ASK_IP"="Please enter Server IP or Hostname"
	"MSG_ASK_IP_AGAIN"="IP or Hostname can not be blank or empty. Please enter Server IP or Hostname again"
	"MSG_ASK_CREDENTIAL_AGAIN"="Credential is invalid. Please enter Credential again"
	"MSG_ASK_SAME"="Use same {0} for these servers? (Y/N)"
	"MSG_ASK_PARAMETER"="Please enter {0}"
	"MSG_ASK_PARAMETER_WITH_TIP"="Please enter {0} {1}"
	"MSG_ASK_PARAMETER_AGAIN"="`"{0}`" can not be blank or empty. Please enter {0} again"
	"MSG_ASK_PARAMETER_AGAIN2"="`{0}`" is not valid. Please enter {1} again"
	"MSG_ASK_PARAMETER_FORINDEVIDUAL"="Enter {0} for {1}"
	"MSG_ASK_PARAMETER_FORINDEVIDUAL_WITH_TIP"="Enter {0} for {1} {2}"
	"MSG_NEW_VERSION_AVAILIABLE"="There is a newer version of HPiLOCmdlets available at http://www.hp.com/go/powershell. \nDo you want to go there to download the new version?(Y/N)"
	"MSG_RETRIEVING_INFO"="retrieving information from iLO"
	"MSG_ERROR_XML"="Error in XML output"
	"MSG_ERROR_FORMAT"="Error in format/values returned from iLO"
	"MSG_FAIL_GETVERSION"="Unable to obtain version information from HP."
	"MSG_ERROR_RETRIEVING_INFO"="Error retrieving information from iLO"
	"MSG_PARAMETER_NOT_PROVIDED"="{0} is not provided for the following iLO Server(s):\n{1}"
	"MSG_PARAMETER_ACCEPT_VALUES"="(Acceptable values are {0} )"
	"MSG_PARAMETER_ACCEPT_LENGTH"="(Acceptable value length is from {0} to {1} )"
	"MSG_PARAMETER_ACCEPT_RANGE"="(Acceptable value range is from {0} to {1})"
	"MSG_INVALID_USING_CREDENTIAL"="Error : Invalid input: Credential should not be used along with Username/Password."
	"MSG_MOST_CURRENT"="The currently installed version {0} is the most current."
	"MSG_IVALID_IPV6"="{0} is not a valid IPv6 Address"
	"MSG_INVALID_IPV6ADDRESS_PREFIX_Length"="Error : Invalid input: IPAddress{0} and IPAddress{0}PrefixLength should be provided at the same time with valid values."
	"MSG_INVALID_STATIC_ROUTE_DESTINATION_PREFIX_GATEWAY"="Error : Invalid input: StaticRoute{0}Destination, StaticRoute{0}PrefixLength, and StaticRoute{0}Gateway should be provided at the same time with valid values."
	"MSG_CONFLICTED_IPV6ADDRESS_PREFIX_LENGTH"="Error : Invalid input: IPAddress{0} and IPAddress{0}PrefixLength are in conflict."
	"MSG_INVALID_CHECK_RIBCL"="Error : The content of the RIBCL is empty. please use `"Get-Help`" and try again."
	}
    $Message = ""
    try
    {
        $Message = $RM.GetString($MsgID)
        if($Message -eq $null)
        {
            $Message = $LocalizedStrings[$MsgID]
        }
    }
    catch
    {
        #throw $_
		$Message = $LocalizedStrings[$MsgID]
    }

    if($Message -eq $null)
    {
		#or unknown
        $Message = "Fail to get the message"
    }
    return $Message
}

Function Create-ThreadPool
{
    [Cmdletbinding()]
    Param
    (
        [Parameter(Position=0,Mandatory=$true)][int]$PoolSize,
        [Parameter(Position=1,Mandatory=$False)][Switch]$MTA
    )
    
    $pool = [RunspaceFactory]::CreateRunspacePool(1, $PoolSize)	
    
    If(!$MTA) { $pool.ApartmentState = "STA" }
    
    $pool.Open()
    
    return $pool
}

Function Start-ThreadScriptBlock
{
    [Cmdletbinding()]
    Param
    (
        [Parameter(Position=0,Mandatory=$True)]$ThreadPool,
        [Parameter(Position=1,Mandatory=$True)][ScriptBlock]$ScriptBlock,
        [Parameter(Position=2,Mandatory=$False)][Object[]]$Parameters
    )
    
    $Pipeline = [System.Management.Automation.PowerShell]::Create() 

	$Pipeline.RunspacePool = $ThreadPool
	    
    $Pipeline.AddScript($ScriptBlock) | Out-Null
    
    Foreach($Arg in $Parameters)
    {
        $Pipeline.AddArgument($Arg) | Out-Null
    }
    
	$AsyncResult = $Pipeline.BeginInvoke() 
	
	$Output = New-Object AsyncPipeline 
	
	$Output.Pipeline = $Pipeline
	$Output.AsyncResult = $AsyncResult
	
	$Output
}
Function Get-ThreadPipelines
{
    [Cmdletbinding()]
    Param
    (
        [Parameter(Position=0,Mandatory=$True)][AsyncPipeline[]]$Pipelines,
		[Parameter(Position=1,Mandatory=$false)][Switch]$ShowProgress
    )
	
	# incrementing for Write-Progress
    $i = 1 
	
    foreach($Pipeline in $Pipelines)
    {
		
		try
		{
        	$Pipeline.Pipeline.EndInvoke($Pipeline.AsyncResult)
			
			If($Pipeline.Pipeline.Streams.Error)
			{
				Throw $Pipeline.Pipeline.Streams.Error
			}
        } catch {
			$_
		}
        $Pipeline.Pipeline.Dispose()
		
		If($ShowProgress)
		{
            Write-Progress -Activity $(Get-Message("MSG_PROGRESS_ACTIVITY")) -PercentComplete $(($i/$Pipelines.Length) * 100) `
                -Status $(Get-Message("MSG_PROGRESS_STATUS"))
		}
		$i++
    }
}

function Translate-ServerDNSIP{
    param (

        [parameter(Mandatory=$true)] $runobject
    )
    $ipv6_one_section="[0-9A-Fa-f]{1,4}"
	$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"
    $port_regex = ":([1-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])"
	
	#regex for single ip address without range (,-) 
	#could not be range
	$ipv4_regex_inipv6_single="${ipv4_one_section}(\.${ipv4_one_section}){3}"  
	$ipv6_regex_single="^\s*(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\s*$" 
    $ipv6_regex_single_with_bra="^\s*\[(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\]($port_regex)?\s*$" 
    $ipv4_regex_single="^\s*${ipv4_one_section}(\.${ipv4_one_section}){3}($port_regex)?\s*$"
    
    $retobject = $runobject
    $objServer = $runobject.runobject.Server
    $hostname = $null
    $ip = $null
    $ipToConnect = $null

    if(($objServer -match $ipv4_regex_single) -or ($objServer -match $ipv6_regex_single) -or ($objServer -match $ipv6_regex_single_with_bra))
    {
       $ipToConnect = $objServer
       if($objServer -match $ipv6_regex_single_with_bra) #[ipv6], [ipv6]:port
       {
          $ip = $objServer.Split("]")[0].Replace("[","").Trim()
       }
       elseif($objServer -match $ipv4_regex_single -and $objServer.contains(":")) #ipv4:port
       {
          $ip = $objServer.Split(":")[0].Trim()
       }
       else
       {
          $ip = $objServer
       }    
       try
       {
           $dns = [System.Net.Dns]::GetHostEntry($ip)
           $hostname = $dns.Hostname
       }
       catch
       {
           $global:error.RemoveAt($global:error.count-1)
           $retobject.warning = $retobject.warning + $([string]::Format($(Get-Message("MSG_FAIL_HOSTNAME")) ,$ip)) + "`n"
       } 
            
    }
    else  #suppose to be host name
    {
       $hostname = $objServer
       try
	   {
		   #if hostname is "1", it returns "0.0.0.1" and the uploadstring later will hang
		   $dns = [System.Net.Dns]::GetHostAddresses("$hostname")
		   $ip = [string]$dns.IPAddressToString
           $ipToConnect = $ip
	   }
	   catch
	   {
		   $global:error.RemoveAt($global:error.count-1)
           $retobject.err = $retobject.err + $([string]::Format($(Get-Message("MSG_FAIL_IPADDRESS")) ,$hostname)) + "`n" 
       }							             
    }
    
	if($ipToConnect -ne $null -and ($ipToConnect -match $ipv6_regex_single))
	{
       $ipToConnect = "["+"$ipToConnect"+"]"
	}
    if($retobject.runobject.GetType().Name -eq "PSCustomObject")
    {
       $retobject.runobject | Add-Member NoteProperty IP $ip
       $retobject.runobject | Add-Member NoteProperty HOSTNAME $hostname
       $retobject.runobject | Add-Member NoteProperty IPToConnect $ipToConnect
    }
    elseif($retobject.runobject.GetType().Name -eq "Hashtable")
    {
       $retobject.runobject.Add("IP", $ip) 
       $retobject.runobject.Add("HOSTNAME", $hostname)
       $retobject.runobject.Add("IPToConnect", $ipToConnect)
    }
    return $retobject
}

function Get-UserNameAndPW{
    param(
        [parameter(Mandatory=$true)] [ref] $currUsername,
        [parameter(Mandatory=$true)] [ref] $currPassword,
        [parameter(Mandatory=$true)] $obj
     )
    if($obj.Username -ne $null -or $obj.Password -ne $null)
    {
        $currUsername.Value = $obj.Username 
        $currPassword.Value = $obj.Password
    }
    elseif($obj.Credential -ne $null)
    {
        $c = [PSCredential]$obj.Credential
        $currUsername.Value= $c.UserName
        $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($c.Password)
        try
        {
            $currPassword.Value = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($bstr)
        }
        catch
        {
            $currUsername.Value = ""
            $currPassword.Value = ""
        }
    }
}

function Get-UserNameAndPWFromCredential{
    param(
        [parameter(Mandatory=$true)] [ref] $currUsername,
        [parameter(Mandatory=$true)] [ref] $currPassword,
        [parameter(Mandatory=$true)] $obj
     )
    if($obj -ne $null)
    {
        $c = [PSCredential]$obj
        $currUsername.Value= $c.UserName
        $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($c.Password)
        try
        {
            $currPassword.Value = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($bstr)
        }
        catch
        {
            $currUsername.Value = ""
            $currPassword.Value = ""
        }
    }
}

function Execute-RIBCL($runobjects) {
#execute RIBCL for single object.
	if($runobjects.Count -eq 1)
	{
		$runobject = $runobjects[0]
		$retobj = New-Object PSobject |
			Add-Member NoteProperty runobject $runobject -PassThru|
			Add-Member NoteProperty ret "" -PassThr|
			Add-Member NoteProperty err $null -PassThr|
            Add-Member NoteProperty warning $null -PassThr
        $retobj = Translate-ServerDNSIP -runobject $retobj
		try
		{
			$client  = New-TrustAllWebClient
			$ip = $retobj.runobject.IPToConnect
			$hostname = $retobj.runobject.Hostname
			if($ip -ne $null -and $hostname -ne $null){
                Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,"$ip - $hostname"))
			}
			if($ip -ne $null -and $hostname -eq $null){
                Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$ip))
			}
			if($ip -eq $null -and $hostname -ne $null){
                Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$hostname))
			}
			
	        try  #try https first
            {	
				#if the ip is 0.0.0.1			the uploadstring later will hang
			    if($ip -ne $null){
				   $retobj.ret = [string]$client.UploadString("https://$ip/ribcl", "POST", $runobject.RIBCLCommand)
			    }
			    else{
				   $retobj.ret = [string]$client.UploadString("https://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
			    }
            }
            catch
            {
                $errStr = $_.ToString()
                $global:error.RemoveAt($global:error.count-1)
                if($errStr -match "The operation has timed out"){

			       if($ip -ne $null){
				      $retobj.ret = [string]$client.UploadString("https://$ip/ribcl", "POST", $runobject.RIBCLCommand)
			       }
			       else{
				      $retobj.ret = [string]$client.UploadString("https://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
			       }
                }
                else # use http if https has exception
                {
			       if($ip -ne $null){
				      $retobj.ret = [string]$client.UploadString("http://$ip/ribcl", "POST", $runobject.RIBCLCommand)
			       }
			       else{
				      $retobj.ret = [string]$client.UploadString("http://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
			       }
                }
            }
		}
		catch
		{
			$retobj.err += "$_`n"		
		}
        if($retobj.warning -ne $null)
        {
           Write-Warning $retobj.warning
        }
		return @($retobj)
	}
	
#execute RIBCL for multi objects.
    $ThreadPipes = @()
    #how many threads in the pool?
    #max out a 256 based on testing and getting diminishing returns at 128
    #should provide one thread per computer up to 256
    $poolsize = (@($runobjects.Count, 256) | Measure-Object -Minimum).Minimum
	if($poolsize -eq 0)
	{
		$poolsize = 1
	}
    Write-Verbose -Message $([string]::Format($(Get-Message("MSG_USING_THREADS")) ,$poolsize))
    $thispool = Create-ThreadPool $poolsize
	#begin of $t scriptblock
    $t = {
        Param($runobject,$RM)
Function Get-Message
{
    Param
    (
        [Parameter(Mandatory=$true)][String]$MsgID
    )
    #only these strings are used in the two script blocks
    $LocalizedStrings=@{
	"MSG_SENDING_TO"="Sending to {0}"
	"MSG_FAIL_HOSTNAME"="DNS name translation not available for {0} - Host name left blank."
	"MSG_FAIL_IPADDRESS"="Invalid Hostname: IP Address translation not available for hostname {0}."
	"MSG_PING"="Pinging {0}"
	"MSG_PING_FAIL"="No system responds at {0}"
	"MSG_FIND_NO_ILO"="No iLO at {0}"
	}
    $Message = ""
    try
    {
        $Message = $RM.GetString($MsgID)
        if($Message -eq $null)
        {
            $Message = $LocalizedStrings[$MsgID]
        }
    }
    catch
    {
        #throw $_
		$Message = $LocalizedStrings[$MsgID]
    }

    if($Message -eq $null)
    {
		#or unknown
        $Message = "Fail to get the message"
    }
    return $Message
}
Function New-TrustAllWebClient {
    <# 
      Source for New-TrustAllWebClient is found at http://poshcode.org/624
      Use is governed by the Creative Commons "No Rights Reserved" license
      and is considered public domain see http://creativecommons.org/publicdomain/zero/1.0/legalcode 
      published by Stephen Campbell of Marchview Consultants Ltd. 
    #>

    <# Create a compilation environment #>
    $Provider=New-Object Microsoft.CSharp.CSharpCodeProvider
    $Compiler=$Provider.CreateCompiler()
    $Params=New-Object System.CodeDom.Compiler.CompilerParameters
    $Params.GenerateExecutable=$False
    $Params.GenerateInMemory=$True
    $Params.IncludeDebugInformation=$False
    $Params.ReferencedAssemblies.Add("System.DLL") > $null
    $TASource=@'
namespace Local.ToolkitExtensions.Net.CertificatePolicy {
    public class TrustAll : System.Net.ICertificatePolicy {
        public TrustAll() { 
        }
        public bool CheckValidationResult(System.Net.ServicePoint sp,
            System.Security.Cryptography.X509Certificates.X509Certificate cert, 
            System.Net.WebRequest req, int problem) {
            return true;
        }
    }
}
'@ 
    $TAResults=$Provider.CompileAssemblyFromSource($Params,$TASource)
    $TAAssembly=$TAResults.CompiledAssembly

    <# We now create an instance of the TrustAll and attach it to the ServicePointManager #>
    $TrustAll=$TAAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")
    [System.Net.ServicePointManager]::CertificatePolicy=$TrustAll

    <#
     The ESX Upload requires the Preauthenticate value to be true which is not the default
     for the System.Net.WebClient class which has very simple-to-use downloadFile and uploadfile
     methods.  We create an override class which simply sets that Preauthenticate value.
     After creating an instance of the Local.ToolkitExtensions.Net.WebClient class, we use it just
     like the standard WebClient class.
    #>
    $Params1=New-Object System.CodeDom.Compiler.CompilerParameters
    $Params1.GenerateExecutable=$False
    $Params1.GenerateInMemory=$True
    $Params1.IncludeDebugInformation=$False
    $Params1.ReferencedAssemblies.Add("System.DLL") > $null
    $WCSource=@'
namespace Local.ToolkitExtensions.Net { 
        class WebClient : System.Net.WebClient {
        protected override System.Net.WebRequest GetWebRequest(System.Uri uri) {
            System.Net.WebRequest webRequest = base.GetWebRequest(uri);
            webRequest.PreAuthenticate = true;
            webRequest.Timeout = 60000;
            return webRequest;
        }
    }
}
'@
    $WCResults=$Provider.CompileAssemblyFromSource($Params1,$WCSource)
    $WCAssembly=$WCResults.CompiledAssembly

    <# Now return the custom WebClient. It behaves almost like a normal WebClient. #>
    $WebClient=$WCAssembly.CreateInstance("Local.ToolkitExtensions.Net.WebClient")
    return $WebClient
}
function Translate-ServerDNSIP{
    param (

        [parameter(Mandatory=$true)] $runobject
    )
    $ipv6_one_section="[0-9A-Fa-f]{1,4}"
	$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"
    $port_regex = ":([1-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])"
	
	#regex for single ip address without range (,-) 
	#could not be range
	$ipv4_regex_inipv6_single="${ipv4_one_section}(\.${ipv4_one_section}){3}"  
	$ipv6_regex_single="^\s*(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\s*$" 
    $ipv6_regex_single_with_bra="^\s*\[(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\]($port_regex)?\s*$" 
    $ipv4_regex_single="^\s*${ipv4_one_section}(\.${ipv4_one_section}){3}($port_regex)?\s*$"
    
    $retobject = $runobject
    $objServer = $runobject.runobject.Server
    $hostname = $null
    $ip = $null
    $ipToConnect = $null

    if(($objServer -match $ipv4_regex_single) -or ($objServer -match $ipv6_regex_single) -or ($objServer -match $ipv6_regex_single_with_bra))
    {
       $ipToConnect = $objServer
       if($objServer -match $ipv6_regex_single_with_bra) #[ipv6], [ipv6]:port
       {
          $ip = $objServer.Split("]")[0].Replace("[","").Trim()
       }
       elseif($objServer -match $ipv4_regex_single -and $objServer.contains(":")) #ipv4:port
       {
          $ip = $objServer.Split(":")[0].Trim()
       }
       else
       {
          $ip = $objServer
       }    
       try
       {
           $dns = [System.Net.Dns]::GetHostEntry($ip)
           $hostname = $dns.Hostname
       }
       catch
       {
           $global:error.RemoveAt($global:error.count-1)
           $retobject.warning = $retobject.warning + $([string]::Format($(Get-Message("MSG_FAIL_HOSTNAME")) ,$ip)) + "`n"
       } 
            
    }
    else  #suppose to be host name
    {
       $hostname = $objServer
       try
	   {
		   #if hostname is "1", it returns "0.0.0.1" and the uploadstring later will hang
		   $dns = [System.Net.Dns]::GetHostAddresses("$hostname")
		   $ip = [string]$dns.IPAddressToString
           $ipToConnect = $ip
	   }
	   catch
	   {
		   $global:error.RemoveAt($global:error.count-1)
           $retobject.err = $retobject.err + $([string]::Format($(Get-Message("MSG_FAIL_IPADDRESS")) ,$hostname)) + "`n" 
       }							             
    }
    
	if($ipToConnect -ne $null -and ($ipToConnect -match $ipv6_regex_single))
	{
       $ipToConnect = "["+"$ipToConnect"+"]"
	}
    if($retobject.runobject.GetType().Name -eq "PSCustomObject")
    {
       $retobject.runobject | Add-Member NoteProperty IP $ip
       $retobject.runobject | Add-Member NoteProperty HOSTNAME $hostname
       $retobject.runobject | Add-Member NoteProperty IPToConnect $ipToConnect
    }
    elseif($retobject.runobject.GetType().Name -eq "Hashtable")
    {
       $retobject.runobject.Add("IP", $ip) 
       $retobject.runobject.Add("HOSTNAME", $hostname)
       $retobject.runobject.Add("IPToConnect", $ipToConnect)
    }
    return $retobject
}

    $retobj = New-Object PSobject |
        Add-Member NoteProperty runobject $runobject -PassThru|
        Add-Member NoteProperty ret "" -PassThr|
        Add-Member NoteProperty err $null -PassThr|
        Add-Member NoteProperty warning $null -PassThr
    $retobj = Translate-ServerDNSIP -runobject $retobj
	try
    {
		$client  = New-TrustAllWebClient
		$ip = $retobj.runobject.IPToConnect
		$hostname = $retobj.runobject.Hostname
        try #try https first
        {
		   if($ip -ne $null){
			  $retobj.ret = [string]$client.UploadString("https://$ip/ribcl", "POST", $runobject.RIBCLCommand)
		   }
		   else{
			  $retobj.ret = [string]$client.UploadString("https://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
		   }
        }
        catch 
        {
           $errStr = $_.ToString()
           $global:error.RemoveAt($global:error.count-1)
           if($errStr -match "The operation has timed out"){

			  if($ip -ne $null){
				 $retobj.ret = [string]$client.UploadString("https://$ip/ribcl", "POST", $runobject.RIBCLCommand)
			  }
			  else{
				 $retobj.ret = [string]$client.UploadString("https://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
			  }
           }
           else # use http if https has exception
           {
			  if($ip -ne $null){
				 $retobj.ret = [string]$client.UploadString("http://$ip/ribcl", "POST", $runobject.RIBCLCommand)
			  }
			  else{
				 $retobj.ret = [string]$client.UploadString("http://$hostname/ribcl", "POST", $runobject.RIBCLCommand)
			  }
           }
        }
	}
	catch
	{
		$retobj.err += "$_`n"		
	}
	return $retobj
}
#end of $t scriptblock

    #now start each thread through the scriptblock
    foreach ($runobject in $runobjects) {
		if($runobject.IP -ne $null -and $runobject.Hostname -ne $null){
            Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,"$($runobject.IP) - $($runobject.Hostname)"))
		}
		if($runobject.IP -ne $null -and $runobject.Hostname -eq $null){
			Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$runobject.IP))
		}
		if($runobject.IP -eq $null -and $runobject.Hostname -ne $null){
			Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$runobject.Hostname))
		}
        $ThreadPipes += Start-ThreadScriptBlock -ThreadPool $thispool -ScriptBlock $t -Parameters $runobject, $RM
    }
	#this waits for and collects the output of all of the scriptblock pipelines - using showprogress for verbose
	$b = @()
	if ($VerbosePreference -eq "Continue") {
		$b = Get-ThreadPipelines -Pipelines $ThreadPipes -ShowProgress
	}
	else {
		$b = Get-ThreadPipelines -Pipelines $ThreadPipes
	}

	$thispool.Close()
	$thispool.Dispose()
    
    foreach($obj in $b)
    {
        if($obj.warning -ne $null)
        {
           Write-Warning $obj.warning
        }
    }
	return $b
}

function New-TrustAllWebClient {
     <#
       Source for New-TrustAllWebClient is found at http://poshcode.org/624
       Use is governed by the Creative Commons "No Rights Reserved" license 
       and is considered public domain see http://creativecommons.org/publicdomain/zero/1.0/legalcode 
       published by Stephen Campbell of Marchview Consultants Ltd. 
     #>

     <# Create a compilation environment #>    
    $Provider=New-Object Microsoft.CSharp.CSharpCodeProvider
    $Compiler=$Provider.CreateCompiler()
    $Params=New-Object System.CodeDom.Compiler.CompilerParameters
    $Params.GenerateExecutable=$False
    $Params.GenerateInMemory=$True
    $Params.IncludeDebugInformation=$False
    $Params.ReferencedAssemblies.Add("System.DLL") > $null
    $TASource=@'
namespace Local.ToolkitExtensions.Net.CertificatePolicy {
    public class TrustAll : System.Net.ICertificatePolicy {
        public TrustAll() { 
        }
        public bool CheckValidationResult(System.Net.ServicePoint sp,
            System.Security.Cryptography.X509Certificates.X509Certificate cert, 
            System.Net.WebRequest req, int problem) {
            return true;
        }
    }
}
'@ 
    $TAResults=$Provider.CompileAssemblyFromSource($Params,$TASource)
    $TAAssembly=$TAResults.CompiledAssembly

    <# We now create an instance of the TrustAll and attach it to the ServicePointManager #>
    $TrustAll=$TAAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")
    [System.Net.ServicePointManager]::CertificatePolicy=$TrustAll

    <# The ESX Upload requires the Preauthenticate value to be true which is not the default
       for the System.Net.WebClient class which has very simple-to-use downloadFile and uploadfile
       methods.  We create an override class which simply sets that Preauthenticate value.
       After creating an instance of the Local.ToolkitExtensions.Net.WebClient class, we use it just
       like the standard WebClient class.
    #>
    $WCSource=@'
namespace Local.ToolkitExtensions.Net { 
        class WebClient : System.Net.WebClient {
        protected override System.Net.WebRequest GetWebRequest(System.Uri uri) {
            System.Net.WebRequest webRequest = base.GetWebRequest(uri);
            webRequest.PreAuthenticate = true;
            webRequest.Timeout = 10000;
            return webRequest;
        }
    }
}
'@
    $WCResults=$Provider.CompileAssemblyFromSource($Params,$WCSource)
    $WCAssembly=$WCResults.CompiledAssembly

    <# Now return the custom WebClient. It behaves almost like a normal WebClient. #>
    $WebClient=$WCAssembly.CreateInstance("Local.ToolkitExtensions.Net.WebClient")
    return $WebClient
}

function Get-IPArrayFromIPSection {
      param (
      [parameter(Mandatory=$true)][String] $stringIPSection,
      [parameter(Mandatory=$false)] [ValidateSet("IPv4","IPv6")] [String]$IPType = "IPv4"
   )

    $returnarray=@()   
    try
    {
        $errMsg = "Failed to get $IPType array from IP section $stringIPSection"
        $by_commas = $stringIPSection.split(",")

        if($IPType -eq "IPV4")
        {
        foreach($by_comma in $by_commas)
        {
            $by_comma_dashs = $by_comma.split("-")
            $by_comma_dash_ele=[int]($by_comma_dashs[0])
            $by_comma_dash_ele_end = [int]($by_comma_dashs[$by_comma_dashs.Length-1])
            if($by_comma_dash_ele -gt $by_comma_dash_ele_end)
            {
                $by_comma_dash_ele = $by_comma_dash_ele_end
                $by_comma_dash_ele_end = [int]($by_comma_dashs[0])                   
            }

            for(; $by_comma_dash_ele -le $by_comma_dash_ele_end;$by_comma_dash_ele++)
            {
                $returnarray+=[String]($by_comma_dash_ele)
                
            }
         }
        }

        if($IPType -eq "IPv6")
        {
        foreach($by_comma in $by_commas)
        {
            $by_comma_dashs = $by_comma.split("-")
            $by_comma_dash_ele=[Convert]::ToInt32($by_comma_dashs[0], 16)
            $by_comma_dash_ele_end = ([Convert]::ToInt32($by_comma_dashs[$by_comma_dashs.Length-1], 16))
            if($by_comma_dash_ele -gt $by_comma_dash_ele_end)
            {
                $by_comma_dash_ele = $by_comma_dash_ele_end
                $by_comma_dash_ele_end = [Convert]::ToInt32($by_comma_dashs[0], 16)                   
            }

            for(; $by_comma_dash_ele -le $by_comma_dash_ele_end;$by_comma_dash_ele++)
            {
                $returnarray+=[Convert]::ToString($by_comma_dash_ele,16);
                
            }
         }
    }
   }
   catch
   {
         Write-Host "Error - $errmsg" -ForegroundColor red
   }
   return ,$returnarray
   }

#A common function for both IPv4/IPv6 used by all the Cmdlets(including Find-HPiLO, which will firstly make sure all the sections of IPv4/IPv6 is complete before calling this function)   
#input is a IPv4 address(separeated by ".") or IPv6 address(separeated by ":") and in each section, there might be "," and "-", like "1,2,3-4"
#return the array of all the possible IP adreesses parsed from the input string
function Get-IPArrayFromString {
      param (
      [parameter(Mandatory=$true)][String] $stringIP,
      [parameter(Mandatory=$false)] [ValidateSet("IPv4","IPv6")] [String]$IPType = "IPv4",
      [parameter(Mandatory=$false)] [String]$PreFix = "",
      [parameter(Mandatory=$false)] [String]$PostFix = ""
   )

    #$returnarray=@()
    try
    {
    $errMsg = "Invalid format of IP string $stringIP to get $IPType array"
    $IPSectionArray = New-Object System.Collections.ArrayList
    $returnarray = New-Object 'System.Collections.ObjectModel.Collection`1[System.String]'

    $IPdelimiter="."
    if($IPType -eq "IPv6")
    {
        $IPdelimiter=":"
    }
    
    $sections_bycolondot = $stringIP.Split($IPdelimiter)
    for($x=0; ($x -lt $sections_bycolondot.Length -and ($sections_bycolondot[$x] -ne $null -and $sections_bycolondot[$x] -ne "")) ; $x++)
    {
        $section=@()		
        $section= Get-IPArrayFromIPSection -stringIPSection $sections_bycolondot[$x] -IPType $IPType
        $x=$IPSectionArray.Add($section)        
    }
    
    if($IPSectionArray.Count -eq 1)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$PostFix)
        }
    }
    if($IPSectionArray.Count -eq 2)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$PostFix)
            }
        }
    }
    if($IPSectionArray.Count -eq 3)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$PostFix)
                }
            }
        }
    }
    if($IPSectionArray.Count -eq 4)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {  
                        $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$PostFix)
                    }
                }
            }
        }
    }

    if($IPSectionArray.Count -eq 5)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {
                        for($b=0; $b -lt $IPSectionArray[4].Count; $b++)
                        {
                            $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$IPdelimiter+$IPSectionArray[4][$b]+$PostFix)
                        }
                    }
                }
            }
        }
    }

    if($IPSectionArray.Count -eq 6)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {
                        for($b=0; $b -lt $IPSectionArray[4].Count; $b++)
                        {
                            for($c=0; $c -lt $IPSectionArray[5].Count; $c++)
                            {
                                $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$IPdelimiter+$IPSectionArray[4][$b]+$IPdelimiter+$IPSectionArray[5][$c]+$PostFix)
                            }
                        }
                    }
                }
            }
        }
    }
    if($IPSectionArray.Count -eq 7)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {
                        for($b=0; $b -lt $IPSectionArray[4].Count; $b++)
                        {
                            for($c=0; $c -lt $IPSectionArray[5].Count; $c++)
                            {
                                for($d=0; $d -lt $IPSectionArray[6].Count; $c++)
                                {
                                    $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$IPdelimiter+$IPSectionArray[4][$b]+$IPdelimiter+$IPSectionArray[5][$c]+$IPdelimiter+$IPSectionArray[6][$d]+$PostFix)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if($IPSectionArray.Count -eq 8)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {
                        for($b=0; $b -lt $IPSectionArray[4].Count; $b++)
                        {
                            for($c=0; $c -lt $IPSectionArray[5].Count; $c++)
                            {
                                for($d=0; $d -lt $IPSectionArray[6].Count; $d++)
                                {
                                    for($e=0; $e -lt $IPSectionArray[7].Count; $e++)
                                    {
                                        $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$IPdelimiter+$IPSectionArray[4][$b]+$IPdelimiter+$IPSectionArray[5][$c]+$IPdelimiter+$IPSectionArray[6][$d]+$IPdelimiter+$IPSectionArray[7][$e]+$PostFix)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if($IPSectionArray.Count -eq 9)
    {
        for($x=0; $x -lt $IPSectionArray[0].Count; $x++)
        {
            for($y=0; $y -lt $IPSectionArray[1].Count; $y++)
            {
                for($z=0; $z -lt $IPSectionArray[2].Count; $z++)
                {
                    for($a=0; $a -lt $IPSectionArray[3].Count; $a++)
                    {
                        for($b=0; $b -lt $IPSectionArray[4].Count; $b++)
                        {
                            for($c=0; $c -lt $IPSectionArray[5].Count; $c++)
                            {
                                for($d=0; $d -lt $IPSectionArray[6].Count; $c++)
                                {
                                    for($e=0; $e -lt $IPSectionArray[7].Count; $e++)
                                    {
                                        for($f=0; $f -lt $IPSectionArray[8].Count; $f++)
                                        {
                                            $returnarray.Add($PreFix+$IPSectionArray[0][$x]+$IPdelimiter+$IPSectionArray[1][$y]+$IPdelimiter+$IPSectionArray[2][$z]+$IPdelimiter+$IPSectionArray[3][$a]+$IPdelimiter+$IPSectionArray[4][$b]+$IPdelimiter+$IPSectionArray[5][$c]+$IPdelimiter+$IPSectionArray[6][$d]+$IPdelimiter+$IPSectionArray[7][$e]+$IPdelimiter+$IPSectionArray[8][$f]+$PostFix)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    }
    catch
    {
         Write-Host "Error - $errmsg" -ForegroundColor red
    }

   return ,$returnarray
   }

#for ipv6 support in cmdlets other than Find-HPiLO
function Get-IPv6FromString {
      param (
      [parameter(Mandatory=$true)][String] $stringIP,
	  [parameter(Mandatory=$false)] [switch] $AddSquare
	  
   )
            $percentpart=""
            $ipv4array=@()
            #$ipv6array=@()
            #$returnstring=@()
            $returnstring = New-Object 'System.Collections.ObjectModel.Collection`1[System.String]'
            $ipv6array = New-Object 'System.Collections.ObjectModel.Collection`1[System.String]'
			$preFix=""
			$postFix=""
			if($AddSquare)
			{
				$preFix="["
				$postFix="]"
			}
            try
            {
            $errMsg = "Invalid format of IP string $stringIP to get IPv6 address"
            #it could have ::, :,., % inside it, have % in it            
            if($stringIP.LastIndexOf("%") -ne -1)  
            {
                $sections = $stringIP.Split("%")
                $percentpart="%"+$sections[1]
                $stringIP=$sections[0]                
            }

            #it could have ::, :,.inside it, have ipv4 in it
            if($stringIP.IndexOf(".") -ne -1) 
            {
                [int]$nseperate = $stringIP.LastIndexOf(":")
				#to get the ipv4 part
                $mappedIpv4 = $stringIP.SubString($nseperate + 1) 
				$ipv4array=Get-IPArrayFromString -stringIP $mappedIpv4 -IPType "IPV4" 

                #to get the first 6 sections, including :: or :
				$stringIP = $stringIP.Substring(0, $nseperate + 1) 
            }

				#it could have ::,: inside it             
                $stringIP = $stringIP -replace "::", "|" 
                $sectionsby_2colon=@()
				#suppose to get a 2 element array
                $sectionsby_2colon = $stringIP.Split("|") 
				#no :: in it
                if($sectionsby_2colon.Length -eq 1) 
                {
                    $ipv6array=Get-IPArrayFromString -stringIP $sectionsby_2colon[0] -IPType "IPv6" 
                }
                elseif($sectionsby_2colon.Length -gt 1)
                {
					#starting with ::
                    if(($sectionsby_2colon[0] -eq "")) 
                    {
                        if(($sectionsby_2colon[1] -eq ""))
                        {
                            $ipv6array=@("::")
                        }
                        else
                        {
                            $ipv6array=Get-IPArrayFromString -stringIP $sectionsby_2colon[1] -IPType "IPv6" -PreFix "::"
                        }
                    }
					#not starting with ::, may in the middle or in the ending
                    else 
                    {
                        if(($sectionsby_2colon[1] -eq ""))
                        {
                            $ipv6array=Get-IPArrayFromString -stringIP $sectionsby_2colon[0] -IPType "IPv6" -PostFix "::"
                        }
                        else
                        {
                            $ipv6array1=Get-IPArrayFromString -stringIP $sectionsby_2colon[0] -IPType "IPv6"  -PostFix "::"                            
                            $ipv6array2=Get-IPArrayFromString -stringIP $sectionsby_2colon[1] -IPType "IPv6" 
                            foreach($x1 in $ipv6array1)
                            {
                                foreach($x2 in $ipv6array2)
                                {
                                    $ipv6array.Add($x1 + $x2)
                                }
                            }
                        }                        
                    }
                }        

        foreach($ip1 in $ipv6array)
        {
            if($ipv4array.Count -ge 1)
            {
                foreach($ip2 in $ipv4array)
                {
                    if($ip1.SubString($ip1.Length-1) -eq ":")
                    {
                        $returnstring.Add($preFix+$ip1+$ip2+$percentpart+$postFix)
                    }
                    else
                    {
                        $returnstring.Add($preFix+$ip1+":"+$ip2+$percentpart+$postFix)
                    }
                }
            }
            else
            {
                $returnstring.Add($preFix+$ip1+$percentpart+$postFix)
            }            
        }
        }
        catch
        {
            Write-Host "Error - $errmsg" -ForegroundColor red
        }
    return $returnstring    
}

function Get-Status{
    [CmdletBinding()]
    param(
        [parameter(Mandatory=$true)] [xml]$xml,
        [parameter(Mandatory=$true)] [PSObject] $Obj
    )
    [string]$statusValue = ""
    $statusType = ""

    for($i = 0; $i -lt $xml.RIBCL.RESPONSE.length; $i++){
        if($xml.RIBCL.RESPONSE[$i].STATUS -ne "0x0000"){
            $obj.STATUS_TYPE =  "ERROR"
            #QXCR1001374246: Change statusmessage from object to string type (when error happens, the STATUS_MESSAGE property will always be array)
            if($statusValue -eq ""){
                $statusValue = $xml.RIBCL.RESPONSE[$i].MESSAGE
            }
            else{
                $statusValue += "`n" + $xml.RIBCL.RESPONSE[$i].MESSAGE
            }                
            $obj.STATUS_MESSAGE = $statusValue
        } 
        elseif(($xml.RIBCL.RESPONSE[$i].STATUS -eq "0x0000") -and ($xml.RIBCL.RESPONSE[$i].MESSAGE -ne "No error")){
            $statusType = "WARNING"
            $obj.STATUS_TYPE = $statusType
            if($statusValue -eq ""){
                $statusValue = $xml.RIBCL.RESPONSE[$i].MESSAGE
            }
            else{
                $statusValue += "`n" + $xml.RIBCL.RESPONSE[$i].MESSAGE
            }
            $obj.STATUS_MESSAGE = $statusValue
        }
    }
}

function Add-LevelWithValueAndOther{
    param (
        [parameter(Mandatory=$true)]
        [String] $Element,

        [parameter(Mandatory=$true)]
        [String] $tagname
    )

    $onlyValue = "yes"
    $xml = New-Object System.Xml.XmlDocument
    $xml.PreserveWhitespace = $true
    $xml.LoadXml($Element)

    $custObj = New-Object PSObject
    $properties = @();
    $properties += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"} )
    #$properties
    
    $containerObjectList = @()
    $containerObjectList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {($_.Definition -Match "System.Object") -and ($_.name -ne "RESPONSE")})
    #$containerObjectList

    $containerXmlElementList = @()
    $containerXmlElementList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"})
    #$containerXmlElementList
   
   
    $tmp = @()
    if ( $properties[0] -ne $null )
    {
        $unit = ""
        $unitFlag = 0
        foreach ($prop in $properties)
        {
            if($prop.Name -eq "UNIT"){
                $unit = $xml.$tagname.UNIT
                $unitFlag = 1
            }
        }
        foreach ($prop in $properties)
        {   
            if($prop.Name -ne "Version"){
                if($prop.Name -eq "Value"){
                    $name = $prop.Name
                    if($unitFlag -eq 1){
                        $val = $xml.$tagname.VALUE.trim() + " " + $unit
                        $custObj | Add-Member NoteProperty $tagname $val
                    }
                    else{
                        $custObj | Add-Member NoteProperty $tagname $xml.$tagname.VALUE.trim()
                    }
                }
                else{
                    $name = $prop.Name
                    $custObj | Add-Member NoteProperty $name $xml.$tagname.$name.trim()
                }
            }
            elseif(($prop.name -eq "VERSION") -and ($tagname -ne "RIBCL")){
                $name = $prop.Name
                $tName = $tagname + "_VERSION"
                $custObj | Add-Member NoteProperty $tName $xml.$tagname.VERSION.trim()
            }
        }
    }

    
    # handling Object/Collection in input XML
    if ( $containerObjectList[0] -ne $null )
    {
        foreach ($cont in $containerObjectList)
        {
            $ObjList = @()
            $name = $cont.Name
            if($name -ne "RESPONSE"){
                $arrayObjectPropsList = @();
                for($i=0; $i -lt $xml.$tagname.$name.length ; $i++)
                {
                    $temp = New-Object PSObject
                    $ObjTags = (($xml.$tagname.$name)[$i] | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"}).Name
                    foreach ($tag in $ObjTags){
                        if($tag -eq "INITIAL_UPDATE" -or $tag -eq "LAST_UPDATE"){
                            $propValue = $xml.$tagname.$name[$i].$tag #change to match system date format 
                        }
                        else{
                            $propValue = $xml.$tagname.$name[$i].$tag
                        }
                        $temp | Add-Member NoteProperty $tag $propValue
                    }
                    $ObjTags = (($xml.$tagname.$name)[$i] | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"}).Name
                    foreach ($tag in $ObjTags){
                        $a = [string]((($xml.$tagname.$name)[$i]).$tag).outerxml
                        $propValues = Add-LevelWithValueAndOther $a $tag
                        $temp | Add-Member NoteProperty $tag $propValues.$tag
                    }
                    $ObjList += $temp
                }
            }
            $custObj | Add-Member NoteProperty $name $ObjList
        }
    }

    # handling XmlElement in XML
    if ( $containerXmlElementList[0] -ne $null )
    {
        foreach ($cont in $containerXmlElementList)
        {
            $ObjList = @()
            $name = $cont.Name
            $memberList = $xml.$tagname.$name | Get-Member -MemberType Property
            if(($name -match "^ILO" -and $tagname -match "NIC" ) -or ($name -match "POWER_SUPPLY_SUMMARY" -and $tagname -match "POWER_SUPPLIES" ) -or ($name -match "PROCESSOR" -and $tagname -match "PROCESSOR" ) -or ($name -match "ADVANCED_MEMORY_PROTECTION" -and $tagname -match "MEMORY" ) -or ($name -match "MEMORY_DETAILS_SUMMARY" -and $tagname -match "MEMORY" )){
                $temp = New-Object PSObject
                foreach ($member in $memberList){
                    $a = [string]($xml.$tagname.$name.($member.Name)).outerxml
                    $propValues = Add-LevelWithValueAndOther $a $member.Name
                    $temp | Add-Member NoteProperty $member.Name $propValues.($member.Name)
                } 
                $ObjList += $temp
                $custObj | Add-Member NoteProperty $name $ObjList
            }
            else{
                foreach ($member in $memberList){
                    if($member.Name -eq "UNIT")
                    {
                        $unit =" "
                        $unit +=  $xml.$tagname.$name.UNIT
                        break;
                    }
                }
                foreach ($member in $memberList){
                    if($member.Name -ne "UNIT")
                    {
                        if($member.Name -eq "VALUE"){
                            $valueWithUnit = $xml.$tagname.$name.VALUE + $unit
                            $custObj | Add-Member NoteProperty $name $valueWithUnit
                        }
                        elseif(($xml.$tagname.$name.($member.Name) | Get-Member -MemberType Property).Name -eq "VALUE"){
                            $custObj | Add-Member NoteProperty ($member.name) ($xml.$tagname.$name.($member.Name).VALUE)
                        }
                        else{
                            if($member.Definition -match "System.Object" ){
                                $tmpList =@()
                                foreach ($tag in $xml.$tagname.$name.($member.Name)){
                                    $a = [string]($tag).Outerxml
                                    $ob = Add-LevelWithValueAndOther $a $member.Name
                                    $tmpList += $ob
                                }
                                $custObj | Add-Member NoteProperty ($member.name) $tmpList
                            }
                            else{
                                $custObj | Add-Member NoteProperty ($name +"_"+ $member.name) ($xml.$tagname.$name.($member.Name))
                            }#$hashTable.Add(($member.name), ($xml.$tagname.$name.($member.Name)))
                        }
                    }
                }
            }
        }
    }
    return $custObj
}

function Add-LevelProfileApplyGetResults{
    param (
        [parameter(Mandatory=$true)]
        [String] $Element,

        [parameter(Mandatory=$true)]
        [String] $tagname
    )

    $onlyValue = "yes"
    $xml = New-Object System.Xml.XmlDocument
    $xml.PreserveWhitespace = $true
    $xml.LoadXml($Element)

    if($xml.haschildnodes -eq $true)
    {
        $xml = $xml.$tagname.ChildNodes
    }

    $custObjList = @()
    foreach($child in $xml)
    {
        $custObj = New-Object PSObject
            
        $properties = @();
        $properties += ($child | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"} )
        #$properties
    
        $containerXmlElementList = @()
        $containerXmlElementList += ($child | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"})
        #$containerXmlElementList

        $tmp = @()
        if ( $properties[0] -ne $null )
        {
            foreach ($prop in $properties)
            {   
                $name = $prop.Name
                $custObj | Add-Member NoteProperty $name $child.$name.trim()
            }
        }

    
        # handling XmlElement in XML
        if ( $containerXmlElementList[0] -ne $null )
        {
            foreach ($cont in $containerXmlElementList)
            {
                $ObjList = @()
                $name = $cont.Name
                foreach ($tag in $child.$name){
                    $a = [string]($tag).Outerxml
                    #$ob = Add-LevelProfileApplyGetResults $a $Name
                    $custObj | Add-Member NoteProperty $name ($child.$name)."#cdata-section" #.$name
                }
            }
        }
        $custObjList+=$custObj
    }

    $retObject = New-Object PSObject
    $retObject | Add-Member -MemberType NoteProperty "Results" $custObjList

    return $retObject
}

function Add-LevelWithValueAndOther2{
    param (
        [parameter(Mandatory=$true)]
        [String] $Element,

        [parameter(Mandatory=$true)]
        [String] $tagname
    )

    $onlyValue = "yes"
    $xml = New-Object System.Xml.XmlDocument
    $xml.PreserveWhitespace = $true
    $xml.LoadXml($Element)

    $custObj = New-Object PSObject
        
    $properties = @();
    $properties += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"} )
    #$properties
    
    $containerObjectList = @()
    $containerObjectList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {($_.Definition -Match "System.Object") -and ($_.name -ne "RESPONSE")})
    #$containerObjectList

    $containerXmlElementList = @()
    $containerXmlElementList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"})
    #$containerXmlElementList

    $tmp = @()
    if ( $properties[0] -ne $null )
    {
        $unit = ""
        $unitFlag = 0
        foreach ($prop in $properties)
        {
            if($prop.Name -eq "UNIT"){
                $unit = $xml.$tagname.UNIT
                $unitFlag = 1
            }
        }
        foreach ($prop in $properties)
        {   
            if($prop.Name -ne "Version"){
                if($prop.Name -eq "Value"){
                    $name = $prop.Name
                    if($unitFlag -eq 1){
                        $val = $xml.$tagname.VALUE.trim() + " " + $unit
                        $custObj | Add-Member NoteProperty $tagname $val
                    }
                    else{
                        $custObj | Add-Member NoteProperty $tagname $xml.$tagname.VALUE.trim()
                    }
                }
                else{
                    $name = $prop.Name
                    $custObj | Add-Member NoteProperty $name $xml.$tagname.$name.trim()
                }
            }
            elseif(($prop.name -eq "VERSION") -and ($tagname -ne "RIBCL")){
                $name = $prop.Name
                $tName = $tagname + "_VERSION"
                $custObj | Add-Member NoteProperty $tName $xml.$tagname.VERSION.trim()
            }
        }
    }

    
    # handling Object/Collection in input XML
    if ( $containerObjectList[0] -ne $null )
    {
        foreach ($cont in $containerObjectList)
        {
            $objList = @()
            $name = $cont.Name
            if($name -ne "RESPONSE"){
                $arrayObjectPropsList = @();
                for($i=0; $i -lt $xml.$tagname.$name.length ; $i++)
                {
                    $a = [string](($xml.$tagname.$name)[$i]).outerxml
                    $prop = Add-LevelWithValueAndOther2 $a $Name
                    $objList += $prop
                }
                $custObj | Add-Member NoteProperty $name $objList
            }
        }
    }

    # handling XmlElement in XML
    if ( $containerXmlElementList[0] -ne $null )
    {
        foreach ($cont in $containerXmlElementList)
        {
            $ObjList = @()
            $name = $cont.Name
            if($Name -eq "VALUE"){
                $valueWithUnit = $xml.$tagname.$name.VALUE
                $custObj | Add-Member NoteProperty $name $valueWithUnit
            }
            elseif(($xml.$tagname.$name | Get-Member -MemberType Property).Name -eq "VALUE"){
                $custObj | Add-Member NoteProperty $name $xml.$tagname.$name.VALUE
            }
            else{
                foreach ($tag in $xml.$tagname.$name){
                    $a = [string]($tag).Outerxml
                    $ob = Add-LevelWithValueAndOther2 $a $Name
                    $custObj | Add-Member NoteProperty $name $ob #.$name
                }
            }
        }
    }
    return $custObj
}

function Add-LevelNoConcat{
    param (
        [parameter(Mandatory=$true)]
        [String] $Element,

        [parameter(Mandatory=$true)]
        [String] $tagname
    )

    $onlyValue = "yes"
    $xml = New-Object System.Xml.XmlDocument
    $xml.PreserveWhitespace = $true
    $xml.LoadXml($Element)

    $custObj = New-Object PSObject
    $properties = @();
    $properties += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"} )
    #$properties
    
    $containerObjectList = @()
    $containerObjectList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {(($_.Definition -Match "System.Object") -and ($_.name -ne "RESPONSE")) -or ($_.Definition -Match "System.Xml.XmlElement")})
    #$containerObjectList

#    $containerXmlElementList = @()
#    $containerXmlElementList += ($xml.$tagname | Get-Member -MemberType Property | Where-Object {($_.Definition -Match "System.Xml.XmlElement") -or ($_.Definition -Match "System.Xml.XmlElement")})
#    #$containerXmlElementList
    
    $tmp = @()
    if ( $properties[0] -ne $null )
    {
        $unit = ""
        $unitFlag = 0
        foreach ($prop in $properties)
        {
            if($prop.Name -eq "UNIT"){
                $unit = $xml.$tagname.UNIT
                $unitFlag = 1
            }
        }
        foreach ($prop in $properties)
        {   
            if($prop.Name -ne "Version"){
                if($prop.Name -eq "Value"){
                    $name = $prop.Name
                    if($unitFlag -eq 1){
                        $val = $xml.$tagname.VALUE.trim() + " " + $unit
                        $custObj | Add-Member NoteProperty $tagname $val
                    }
                    else{
                        $custObj | Add-Member NoteProperty $tagname $xml.$tagname.VALUE.trim()
                    }
                }
                else{
                    $name = $prop.Name
                    $custObj | Add-Member NoteProperty $name $xml.$tagname.$name.trim()
                }
            }
            elseif(($prop.name -eq "VERSION") -and ($tagname -ne "RIBCL")){
                $name = $prop.Name
                $tName = $tagname + "_VERSION"
                $custObj | Add-Member NoteProperty $tName $xml.$tagname.VERSION.trim()
            }
        }
    }

    
    # handling Object/Collection in input XML
    if ( $containerObjectList[0] -ne $null )
    {
        foreach ($cont in $containerObjectList){
            $ObjList = @()
            $added = 0
            $name = $cont.Name
            if($name -ne "RESPONSE"){
                if($xml.$tagname.$name.GetType().BaseType -match "XmlLinkedNode"){
                    $temp = New-Object PSObject
                    $ObjTags = ($xml.$tagname.$name | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"}).Name
                    foreach ($tag in $ObjTags){
                        $propValue = $xml.$tagname.$name.$tag.trim()
                        if($tag -eq "VALUE"){
                            $custObj | Add-Member NoteProperty $name $propValue
                            $added = 1
                        }
                        else{
                            #QXCR1001374293: change text property (and other properties) to upper case:( inner text of xml is for property #text)
                            $temp | Add-Member NoteProperty $tag.Replace("#","").ToUpper() $propValue
                        }
                        
                    }
                    $ObjTags = ($xml.$tagname.$name | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"}).Name
                    foreach ($tag in $ObjTags){
                        $a = [string]($xml.$tagname.$name.$tag).outerxml
                        $propValues = Add-LevelNoConcat $a $tag
                        $temp | Add-Member NoteProperty $tag.Replace("#","").ToUpper() $propValues.$tag
                    }
                    if($added -eq 0){
                        $custObj | Add-Member NoteProperty $name $temp
                    }
                }
                elseif($xml.$tagname.$name.GetType().BaseType -match "Array"){
                    for($i=0; $i -lt $xml.$tagname.$name.length ; $i++)
                    {
                        $temp = New-Object PSObject
                        $ObjTags = (($xml.$tagname.$name)[$i] | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "String"}).Name
                        foreach ($tag in $ObjTags){
                            $propValue = $xml.$tagname.$name[$i].$tag
                            $temp | Add-Member NoteProperty $tag.Replace("#","").ToUpper() $propValue
                        }
                        $ObjTags = (($xml.$tagname.$name)[$i] | Get-Member -MemberType Property | Where-Object {$_.Definition -Match "System.Xml.XmlElement"}).Name
                        foreach ($tag in $ObjTags){
                            $a = [string]((($xml.$tagname.$name)[$i]).$tag).outerxml
                            $propValues = Add-LevelNoConcat $a $tag
                            $temp | Add-Member NoteProperty $tag.Replace("#","").ToUpper() $propValues.$tag
                        }
                        $ObjList += $temp
                    }
                    $custObj | Add-Member NoteProperty $name $ObjList
                }
            }        
        }
    }

    return $custObj
}

function Remove-SpecialChars{
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] $strRet
    )

    $onevalueperline = @()
    $twovalueperline = @()
    $onep5valueperline = @()
    $partvalueperline = @()
    $notcomplete_1p5 = $false

    $a = $strRet -split "`n", 0 , "multiline" 
    foreach ($b in $a){
        if ($notcomplete_1p5) {
            $onep5valueperline += $b
            if ($b -match '^.*".*$') {$notcomplete_1p5 = $false}
                continue
            }
        
            #this matches single line values that need a replacement (and others)
            $test1 = ($b -match '(^.*=.*".*)[\x01-\x08\x0b-\x0c\x0e-\x1f<"&\ud800-\udfff\ufffe]+(.*".*$)')
            #this avoids double value lines
            $test2 = ($b -notmatch '(^.*=.*".*")(.*=.*".*".*$)' )
            #this avoids double value lines that start but don't finish until a later line
            $test3 = ($b -notmatch '(^.*=.*".*")(.*=.*"[^"]*$)' )
            #this combination is one value per line needing translation
            if ( $test1 -and $test2 -and $test3)  {
                $onevalueperline += $b
            }
            if ( -not $test2 )  {
                $twovalueperline += $b
            }
            if ( $test2 -and -not $test3 )  {
                $onep5valueperline += $b
                $notcomplete_1p5 = $true
            }
        }

        $indx=0
        $lines = @()
        $onevalueperlinechanged = @()
        foreach($line in $onevalueperline){
            if ($line -match '(^.*".*)[\x01-\x08\x0b-\x0c\x0e-\x1f<"&\ud800-\udfff\ufffe]+(.*".*$)' ) {
                #$lines array collects indexes of lines found (not needed in the final application)
                $lines += $indx
                $c = @()
                #split $a line into $c as one char per element
                $c = $onevalueperline[$indx] -split ""
                #find first " and last "
                $startq = 0
                while ($c[$startq] -ne '"') {$startq++}
                $stopq = $c.Count - 1
                while ($c[$stopq] -ne '"') {$stopq--}
                #go through $c and translate 
                for ($i = $startq+1; $i -lt $stopq; $i++) {
                    switch -regex ($c[$i]) {
                        ('&') {$c[$i] = '&amp;' ; break}
                        ('<') {$c[$i] = '&lt;' ; break}
                        ('"') {$c[$i] = '&quot;' ; break}
                        ('[\x01-\x08\x0b-\x0c\x0e-\x1f]+') {$c[$i] = "&#x{0:X};" -f [int] [char] $c[$i] ; break}
                        ('[\ud800-\udfff\ufffe]+') {$c[$i] = "&#x{0:X};" -f [int] [char] $c[$i] }
                    }
                }
                #reassemble $a line with the translations
                $onevalueperlinechanged += $c -join ""
            }
            $indx++
        }

    for($i=0; $i -lt $a.Length; $i++){
        for($j=0; $j -lt $onevalueperline.length; $j++ ){
            if($a[$i] -eq $onevalueperline[$j]){
                $a[$i] = $onevalueperlinechanged[$j]
            }
        }
    }
    $ribcl = $a -join "`n"
    return $ribcl
}

function Remove-CDATAChars{
	param(
		[parameter(Mandatory=$true)] [String] $orgString
	)
	$newString = ""
	$newString = $orgString.Replace("]]>","")
	if($newString.Contains("]]>"))
	{
		return $(Remove-CDATAChars -orgString $newString)
	}
	else
	{
		return $newString
	}
}

Function Add-Quotes{
    [CmdletBinding(PositionalBinding=$false)]
    param(
	    [parameter(Mandatory=$false)] $InString
    )
    if($InString -eq $null)
    {
	    return "`"`""
    }
    if($InString.GetType().Name -eq "String")
    {
	    if($InString.Contains("`""))
	    {
		    return "'" + $InString + "'"
	    }
        else
        {
            return "`"$InString`""
        }
    }
    return "`"$InString`""  
}


function Upload-FWFile{
param (
      [parameter(Mandatory=$true)] $runobjects
	)
	$b = @()
    $ThreadPipes = @()
    #how many threads in the pool?
    #max out a 256 based on testing and getting diminishing returns at 128
    #should provide one thread per computer up to 256
    $poolsize = (@($runobjects.Count, 256) | Measure-Object -Minimum).Minimum
	if($poolsize -eq 0)
	{
		$poolsize = 1
	}
    Write-Verbose $([string]::Format($(Get-Message("MSG_USING_THREADS")) ,$poolsize))
    $thispool = Create-ThreadPool $poolsize
	
	#begin of $t scriptblock
    $t = {
		param (
		  [parameter(Mandatory=$true)] $obj,
		  [parameter(Mandatory=$true)] $RM
		)
		function Add-Quotes{
            [CmdletBinding(PositionalBinding=$false)]
            param(
	            [parameter(Mandatory=$false)] $InString
            )
            if($InString -eq $null)
            {
	            return "`"`""
            }
            if($InString.GetType().Name -eq "String")
            {
	            if($InString.Contains("`""))
	            {
		            return "'" + $InString + "'"
	            }
                else
                {
                    return "`"$InString`""
                }
            }
            return "`"$InString`""  
        }

function Translate-ServerDNSIP{
    param (

        [parameter(Mandatory=$true)] $runobject
    )
    $ipv6_one_section="[0-9A-Fa-f]{1,4}"
	$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"
    $port_regex = ":([1-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])"
	
	#regex for single ip address without range (,-) 
	#could not be range
	$ipv4_regex_inipv6_single="${ipv4_one_section}(\.${ipv4_one_section}){3}"  
	$ipv6_regex_single="^\s*(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\s*$" 
    $ipv6_regex_single_with_bra="^\s*\[(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\]($port_regex)?\s*$" 
    $ipv4_regex_single="^\s*${ipv4_one_section}(\.${ipv4_one_section}){3}($port_regex)?\s*$"
    
    $retobject = $runobject
    $objServer = $runobject.runobject.Server
    $hostname = $null
    $ip = $null
    $ipToConnect = $null

    if(($objServer -match $ipv4_regex_single) -or ($objServer -match $ipv6_regex_single) -or ($objServer -match $ipv6_regex_single_with_bra))
    {
       $ipToConnect = $objServer
       if($objServer -match $ipv6_regex_single_with_bra) #[ipv6], [ipv6]:port
       {
          $ip = $objServer.Split("]")[0].Replace("[","").Trim()
       }
       elseif($objServer -match $ipv4_regex_single -and $objServer.contains(":")) #ipv4:port
       {
          $ip = $objServer.Split(":")[0].Trim()
       }
       else
       {
          $ip = $objServer
       }    
       try
       {
           $dns = [System.Net.Dns]::GetHostEntry($ip)
           $hostname = $dns.Hostname
       }
       catch
       {
           $global:error.RemoveAt($global:error.count-1)
           $retobject.warning = $retobject.warning + $([string]::Format($(Get-Message("MSG_FAIL_HOSTNAME")) ,$ip)) + "`n"
       } 
            
    }
    else  #suppose to be host name
    {
       $hostname = $objServer
       try
	   {
		   #if hostname is "1", it returns "0.0.0.1" and the uploadstring later will hang
		   $dns = [System.Net.Dns]::GetHostAddresses("$hostname")
		   $ip = [string]$dns.IPAddressToString
           $ipToConnect = $ip
	   }
	   catch
	   {
		   $global:error.RemoveAt($global:error.count-1)
           $retobject.err = $retobject.err + $([string]::Format($(Get-Message("MSG_FAIL_IPADDRESS")) ,$hostname)) + "`n" 
       }							             
    }
    
	if($ipToConnect -ne $null -and ($ipToConnect -match $ipv6_regex_single))
	{
       $ipToConnect = "["+"$ipToConnect"+"]"
	}
    if($retobject.runobject.GetType().Name -eq "PSCustomObject")
    {
       $retobject.runobject | Add-Member NoteProperty IP $ip
       $retobject.runobject | Add-Member NoteProperty HOSTNAME $hostname
       $retobject.runobject | Add-Member NoteProperty IPToConnect $ipToConnect
    }
    elseif($retobject.runobject.GetType().Name -eq "Hashtable")
    {
       $retobject.runobject.Add("IP", $ip) 
       $retobject.runobject.Add("HOSTNAME", $hostname)
       $retobject.runobject.Add("IPToConnect", $ipToConnect)
    }
    return $retobject
}
		function Get-UserNameAndPW{
            param(
                [parameter(Mandatory=$true)] [ref] $currUsername,
                [parameter(Mandatory=$true)] [ref] $currPassword,
                [parameter(Mandatory=$true)] $obj
             )
            if($obj.Username -ne $null -or $obj.Password -ne $null)
            {
                $currUsername.Value = $obj.Username 
                $currPassword.Value = $obj.Password
            }
            elseif($obj.Credential -ne $null)
            {
                $c = [PSCredential]$obj.Credential
                $currUsername.Value= $c.UserName
                $bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($c.Password)
                try
                {
                    $currPassword.Value = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($bstr)
                }
                catch
                {
                    $currUsername.Value = ""
                    $currPassword.Value = ""
                }
            }
        }
		$currUsername = ""
		$currPassword = ""
		Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
		if($obj.TPMEnabled -ne $null ){
			$currTPMEnabled = $obj.TPMEnabled
		}
		$ImageLocation = $obj.Location
	

		# Create a compilation environment
		$Provider=New-Object Microsoft.CSharp.CSharpCodeProvider
		$Compiler=$Provider.CreateCompiler()
		$Params=New-Object System.CodeDom.Compiler.CompilerParameters
		$Params.GenerateExecutable=$False
		$Params.GenerateInMemory=$True
		$Params.IncludeDebugInformation=$False
		$Params.ReferencedAssemblies.Add("System.DLL") > $null
		$TASource=@'
namespace Local.ToolkitExtensions.Net.CertificatePolicy {
    public class TrustAll : System.Net.ICertificatePolicy {
        public TrustAll() { 
        }
        public bool CheckValidationResult(System.Net.ServicePoint sp,
            System.Security.Cryptography.X509Certificates.X509Certificate cert, 
            System.Net.WebRequest req, int problem) {
            return true;
        }
    }
}
'@  
		$TAResults = $Provider.CompileAssemblyFromSource($Params,$TASource)
		$TAAssembly = $TAResults.CompiledAssembly

		## We now create an instance of the TrustAll and attach it to the ServicePointManager
		$TrustAll = $TAAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")
		[System.Net.ServicePointManager]::CertificatePolicy = $TrustAll
		$returnobj = New-Object PSObject
		$returnobj | Add-Member NoteProperty "runobject" $obj
		$returnobj | Add-Member NoteProperty "err" $null
		$returnobj | Add-Member NoteProperty "data" $null
        $returnobj | Add-Member NoteProperty "warning" $null
        $returnobj = Translate-ServerDNSIP -runobject $returnobj

        if($returnobj.runobject.IPToConnect -ne $null)
		{
			$ilOHost = $returnobj.runobject.IPToConnect
		}
		else
		{
			$ilOHost = $returnobj.runobject.HOSTNAME
		}
		try
		{
			if( -not (Test-Path $ImageLocation -PathType Leaf))
			{
				throw "Invalid Image Location."
			}elseif($(dir $ImageLocation).Extension -ne ".BIN")
			{
				throw "Firmware image is not a `".bin`" file."
			}

			#Step1: Web request for upload binary file.
			$url = "https://$ilOHost/cgi-bin/uploadRibclFiles"
			$webrequest = [System.Net.HttpWebRequest] ([System.Net.WebRequest]::Create($url))
			$boundary = "----WebKitFormBoundaryB" + [System.DateTime]::Now.Ticks.ToString("x")
			$webrequest.ContentType = "multipart/form-data; boundary=" + $boundary
			$webrequest.Method = "POST"
			$webrequest.Host = $ilOHost
			$webrequest.KeepAlive = $false
			$webrequest.Timeout = 900000
			$webrequest.Headers.Add([System.Net.HttpRequestHeader]::Te,"chunked")

			$body1 = "--" + $boundary + "`r`n" + "Content-Disposition: form-data; name=`"fileType`"`r`n`r`n"
			$body2 = "`r`n--" + $boundary + "`r`n"`
					+ "Content-Disposition: form-data; name=`"fwimgfile`"; filename=`"$ImageLocation`"`r`n"`
					+ "Content-Type: application/octet-stream`r`n`r`n"
			$body1Bytes = [System.Text.Encoding]::ASCII.GetBytes($body1)
			$body2Bytes = [System.Text.Encoding]::ASCII.GetBytes($body2)
			$boundaryBytes = [System.Text.Encoding]::ASCII.GetBytes("`r`n--" + $boundary + "--`r`n")
			# "read file"
			$fileStream = New-Object System.IO.FileStream $ImageLocation, Open, Read
			[long]$length = $body1Bytes.Length + $body2Bytes.Length + $fileStream.Length +$boundaryBytes.Length
			$webrequest.ContentLength = $length
			$requestStream =$null
			$count=0
			$requestStream = $webrequest.GetRequestStream()
			# Write out body1
			$requestStream.Write($body1Bytes, 0, $body1Bytes.Length)
			# Write out body2
			$requestStream.Write($body2Bytes, 0, $body2Bytes.Length)
			
			$buffer = New-Object Byte[] 4096
			[int] $bytesRead = 0
			[long] $sentlength = 0
			# Write out file
			$count =0
			$fwfile = Dir $ImageLocation
			$fwsize = $fwfile.Length
			while (($bytesRead = $fileStream.Read($buffer, 0, $buffer.Length)) -ne 0)
			{
				$count=$Count+1
				$requestStream.Write($buffer, 0, $bytesRead);
				$sentlength += $bytesRead
			}
			$fileStream.Close()
			$fileStream.Dispose()
			# Write out the last boundary
			$requestStream.Write($boundaryBytes, 0, $boundaryBytes.Length)
			$requestStream.Flush();

			$r = $webrequest.GetResponse()
			$responce = [System.Net.HttpWebResponse]($r)
			sleep -Seconds 5
			$s = $responce.GetResponseStream();
			$sr = New-Object System.IO.StreamReader($s)
			$ret = $sr.ReadToEnd()
			$cookie = $responce.Headers.Get("Set-Cookie")
			$cookie = $($cookie.Split(";"))[0]+";"

			$sr.Close()
			$sr.Dispose()
			$s.Close()
			$s.Dispose()
			$responce.Close()
			$responce.Dispose()

			#Step2: send the ribcl command
			$url2= "https://$ilOHost/ribcl"
			$webrequest2 = [System.Net.HttpWebRequest] ([System.Net.WebRequest]::Create($url2))
			$webrequest2.Method = "POST"
			$webrequest2.Host = $ilOHost
			$webrequest2.KeepAlive = $False
			$webrequest2.Timeout = 900000
			$webrequest2.Headers.Add([System.Net.HttpRequestHeader]::Cookie,$cookie)
			$webrequest2.AuthenticationLevel = [System.Net.Security.AuthenticationLevel]::None

			$fwfile = Dir $ImageLocation
			$fwsize = $fwfile.Length

			$send = @"
<RIBCL VERSION="2.30">
	<LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
		<RIB_INFO MODE="write">
"@
			if($currTPMEnabled -ne $null -and $currTPMEnabled -eq "True"){
				$send = $send + @"
`n			<TPM_ENABLED VALUE="Yes"/>
"@
			}
			$send = $send + @"
`n			<UPDATE_RIB_FIRMWARE IMAGE_LOCATION="$ImageLocation" IMAGE_LENGTH="$fwsize"/>
		</RIB_INFO>
	</LOGIN>
</RIBCL>
"@
		$xmlBytes = [System.Text.Encoding]::ASCII.GetBytes($send)
			$webrequest2.ContentLength = $xmlBytes.Length
			$requestStream2 = $webrequest2.GetRequestStream()
			$requestStream2.Write($xmlBytes, 0, $xmlBytes.Length)
			$requestStream2.Flush()
			$r=$webrequest2.GetResponse()
			$responce2 = [System.Net.HttpWebResponse]($r)
			$s2 = $responce2.GetResponseStream();
			$sr2 = New-Object System.IO.StreamReader($s2)
			$ret=$sr2.ReadToEnd()
			$sr2.Close()
			$sr2.Dispose()
			$s2.Close()
			$s2.Dispose()
			$responce2.Close()
			$responce2.Dispose()
			$returnobj.data = $ret
			return $returnobj
		}
		catch
		{
			if($fileStream -ne $null)
			{
				$fileStream.Close()
				$fileStream.Dispose()
				#$e = New-Object System.Exception "Firmware flash failed. Fail to upload firmware image."
				$returnobj.err += "Firmware flash failed. Fail to upload firmware image.`n"
			}
			else
			{
				$returnobj.err = "$_`n"
			}
			return $returnobj
		}
	}
	#end of $t scriptblock
	
	#now start each thread through the scriptblock
    foreach ($obj in $runobjects) {
		if($obj.IP -ne $null -and $obj.Hostname -ne $null){
            Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,"$($obj.IP) - $($obj.Hostname)"))
		}
		if($obj.IP -ne $null -and $obj.Hostname -eq $null){
            Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$obj.IP))
		}
		if($obj.IP -eq $null -and $obj.Hostname -ne $null){
            Write-Verbose $([string]::Format($(Get-Message("MSG_SENDING_TO")) ,$obj.Hostname))
		}
        $ThreadPipes += Start-ThreadScriptBlock -ThreadPool $thispool -ScriptBlock $t -Parameters $obj,$RM
    }
	#this waits for and collects the output of all of the scriptblock pipelines - using showprogress for verbose
	if ($VerbosePreference -eq "Continue") {
		$b = Get-ThreadPipelines -Pipelines $ThreadPipes -ShowProgress
	}
	else {
		$b = Get-ThreadPipelines -Pipelines $ThreadPipes
	}

	$thispool.Close()
    $thispool.Dispose()
    foreach($obj in $b)
    {
        if($obj.warning -ne $null)
        {
           Write-Warning $obj.warning
        }
    }
	return $b
}

#called from Find-HPiLO, complete all the sections for one IPv4 address, 
#$arrayforip returns an array with 4 items, which map to the 4 sections of IPv4 address. 
#for example, if input $strIP="x", the $arrayforip will be @("x","0-255","0-255","0-255")
function Complete-IPv4{
    param (
        [parameter(Mandatory=$true)] [String] $strIP
        #[parameter(Mandatory=$true)] [ref] $arrayforip
    )
    $arrayfor = @()
    $arrayfor += "0-255"
    $arrayfor += "0-255"
    $arrayfor += "0-255"
    $arrayfor += "0-255"

             #with the new format, 1..., or .1, at most 5 items in $sections, but might have empty values  
             $sections = $strIP.Split(".")
			 
			 #no "." in it
             if($sections.length -eq 1)
             {              
                $arrayfor[0]=$sections[0]					
			 }
			#might have empty item when input is "x." or ".x"
			elseif($sections.length -eq 2)
			{
                if($sections[0] -ne '')
                {
                    $arrayfor[0]=$sections[0]
                    if($sections[1] -ne '')
                    {
                        $arrayfor[1]=$sections[1]   
                    }
                }
                else
                {
                    if($sections[1] -ne '')
                    {
                        $arrayfor[3]=$sections[1]
                    }
                }				
			}
            elseif($sections.length -eq 3) 
			{
				#"1..", "1.1.","1.1.1" "1..1"
                if($sections[0] -ne '')
                {
                    $arrayfor[0]=$sections[0]
                    if($sections[1] -ne '')
                    {
                        $arrayfor[1]=$sections[1]
                        if($sections[2] -ne '')
                        {
                            $arrayfor[2]=$sections[2]
                        }
                    }
                    else
                    {
                        if($sections[2] -ne '')
                        {
                            $arrayfor[3]=$sections[2]
                        }
                    }

                }                                
                else
                { 
					#.1.1
                    if($sections[2] -ne '') 
                    {
                        $arrayfor[3]=$sections[2]
                        if($sections[1] -ne '')
                        {
                            $arrayfor[2]=$sections[1]
                        }                                      
                    }
                    else
                    {
						#the 1 and 3 items are empty ".1."
                        if($sections[1] -ne '')
                        {
                            $arrayfor[1]=$sections[1]
                        }
                    }
                }							
			}
			#1.1.1., 1..., ...1, 1...1, .x.x.x, x..x.x, x.x..x,..x. 
            elseif($sections.length -eq 4)
			{
				#1st is not empty
                if($sections[0] -ne '')
                {
                    $arrayfor[0]=$sections[0]
					#2nd is not empty
                    if($sections[1] -ne '')
                    {
                        $arrayfor[1]=$sections[1]
						#3rd is not empty
                        if($sections[2] -ne '')
                        {
                            $arrayfor[2]=$sections[2]
							#4th is not empty
                            if($sections[3] -ne '')
                            {
                                $arrayfor[3]=$sections[3]
                            }
                        }
						#3rd is empty 1.1..1
                        else 
                        {
							#4th is not empty
                            if($sections[3] -ne '')
                            {
                                $arrayfor[3]=$sections[3]
                            }                            
                        }

                    }
					#2nd is empty, 1..1., 1...
                    else 
                    {
						#4th is not empty
                        if($sections[3] -ne '')
                        {
                            $arrayfor[3]=$sections[3]
							#3rd is not empty
                            if($sections[2] -ne '')
                            {
                                $arrayfor[2]=$sections[2]
                            }  
                        }  
						#4th is empty
                        else 
                        {
							#3rd is not empty
                            if($sections[2] -ne '')
                            {
                                $arrayfor[2]=$sections[2]
                            } 
                        }                        
                    }
                }
				#1st is empty
                else 
                {
					#4th is not empty
                    if($sections[3] -ne '')
                    {
                        $arrayfor[3]=$sections[3]
						#3rd is not empty
                        if($sections[2] -ne '')
                        {
                            $arrayfor[2]=$sections[2]
							#2rd is not empty
                            if($sections[1] -ne '')
                            {
                                $arrayfor[1]=$sections[1]
                            }                            
                        }
                        else
                        {
							#2rd is not empty
                            if($sections[1] -ne '')
                            {
                                $arrayfor[1]=$sections[1]
                            }  
                        }
                    }
					#4th is empty .1.1., ..1., .1..
                    else 
                    {
						#3rd is not empty
                        if($sections[2] -ne '')
                        {
                            $arrayfor[2]=$sections[2]                                                      
                        }
						
						#2nd is not empty
                        if($sections[1] -ne '')
                        {
                            $arrayfor[1]=$sections[1]                                                      
                        }
                    }                    
                }			
			}
			#x.x.x.., ..x.x.x, x.x.x.x
            elseif($sections.length -eq 5) 
			{
				#1st is not empty
				if($sections[0] -ne '')
                {
                    $arrayfor[0]=$sections[0]
                    if($sections[1] -ne '') 
                    {
                        $arrayfor[1]=$sections[1]
                    }
                    if($sections[2] -ne '') 
                    {
                        $arrayfor[2]=$sections[2]
                    }
                    if($sections[3] -ne '') 
                    {
                        $arrayfor[3]=$sections[3]
                    }
                                                    
                }
				#1st is empty
                else 
                {                    
                    if($sections[4] -ne '')
                    {
                        $arrayfor[3]=$sections[4]
                    }
                    if($sections[3] -ne '') 
                    {
                        $arrayfor[2]=$sections[3]
                    }
                    if($sections[2] -ne'')
                    {
                        $arrayfor[1]=$sections[2]
                    }
                    if($sections[1] -ne '') 
                    {
                        $arrayfor[0]=$sections[1]
                    }
                }		
			}

            #$arrayforip.Value = $arrayfor;
            return $arrayfor[0]+"."+$arrayfor[1]+"."+$arrayfor[2]+"."+$arrayfor[3]
}

#called from Find-HPiLO, a helper function to check whether input IPv4 is valid or not
#returns the total number of "." in an IPv4 address
#for example: if input $strIP is "1...1", the return value is 3
function Get-IPv4-Dot-Num{
    param (
        [parameter(Mandatory=$true)] [String] $strIP
    )
    [int]$dotnum = 0
    for($i=0;$i -lt $strIP.Length; $i++)
    {
        if($strIP[$i] -eq '.')
        {
            $dotnum++
        }
    }
    
    return $dotnum
}

#called from Find-HPiLO, complete the all sections for one IPv6 address
#$arrayforip returns an array with 8 or more items, which map to the sections of IPv6 address. 
#for example, if input $strIP="x:x:x", the $arrayforip will be @("x","x","x","0-FFFF","0-FFFF","0-FFFF","0-FFFF","0-FFFF")
function Complete-IPv6{
    param (
        [parameter(Mandatory=$true)] [String] $strIP,
        #[parameter(Mandatory=$true)] [ref] $arrayforip,
        [parameter(Mandatory=$false)] [Int] $MaxSecNum=8
    )
            $arrayfor = @()
            $arrayfor+=@("0-FFFF")
            $arrayfor+=@("0-FFFF")
            $arrayfor+=@("0-FFFF")
            $arrayfor+=@("0-FFFF")
            $arrayfor+=@("0-FFFF")
            $arrayfor+=@("0-FFFF")
			
			#used for ipv4-mapped,also used for ipv6 if not in ipv4 mapped format
            $arrayfor+=@("0-FFFF") 
			
			#used for ipv4-mapped,also used for ipv6 if not in ipv4 mapped format
            $arrayfor+=@("0-FFFF") 
			
			#used for ipv4-mapped
            $arrayfor+=@("") 
			
			#used for ipv4-mapped
            $arrayfor+=@("")  
			
			#used for %
            $arrayfor+=@("") 
			
            #$strIP = $strIP -replace "::", "|" 
            $returnstring=""
			
			#have % in it 
            if($strIP.LastIndexOf("%") -ne -1)  
            {
                $sections = $strIP.Split("%")
                $arrayfor[10]="%"+$sections[1]
                $strIP=$sections[0]                
            }
            #it could have ::, :, %, . inside it, have ipv4 in it
            if($strIP.IndexOf(".") -ne -1) 
            {
            
                [int]$nseperate = $strIP.LastIndexOf(":")	
				#to get the ipv4 part				
                $mappedIpv4 = $strIP.SubString($nseperate + 1) 
				$secarray=@()
                $ipv4part = Complete-IPv4 -strIP $mappedIpv4                				
				
				#to get the first 6 sections
                $strIP = $strIP.Substring(0, $nseperate + 1)  
                $ipv6part = Complete-IPv6 -strIP $strIP -MaxSecNum 6 
                $returnstring += $ipv6part+":"+$ipv4part
            }
			#no ipv4 part in it, to get the 8 sections
            else 
            {
                $strIP = $strIP -replace "::", "|" 
                $parsedipv6sections=@()
				#suppose to get a 2 element array
                $bigsections = $strIP.Split("|") 
				#no :: in it
                if($bigsections.Length -eq 1) 
                {
                    $parsedipv6sections = $bigsections[0].Split(":")
                    for($x=0; ($x -lt $parsedipv6sections.Length) -and ($x -lt $MaxSecNum); $x++)
                    {
                        $arrayfor[$x] = $parsedipv6sections[$x]
                    }
                }
                elseif($bigsections.Length -gt 1)
                {
					#starting with ::
                    if(($bigsections[0] -eq "")) 
                    {
                        $parsedipv6sections = $bigsections[1].Split(":")
                        $Y=$MaxSecNum-1
                        for($x=$parsedipv6sections.Length; ($parsedipv6sections[$x-1] -ne "") -and ($x -gt 0) -and ($y -gt -1); $x--, $y--)
                        {
                            $arrayfor[$y] = $parsedipv6sections[$x-1]
                        }
                        for(; $y -gt -1; $y--)
                        {
                            $arrayfor[$y]="0"
                        }
                        
                    }
					#not starting with ::, may in the middle or in the ending
                    else 
                    {
                        $parsedipv6sections = $bigsections[0].Split(":")
                        $x=0
                        for(; ($x -lt $parsedipv6sections.Length) -and ($x -lt $MaxSecNum); $x++)
                        {
                            $arrayfor[$x] = $parsedipv6sections[$x]
                        }
                        
                        $y=$MaxSecNum-1
                        if($bigsections[1] -ne "")
                        {
                            $parsedipv6sections2 = $bigsections[1].Split(":")                            
                            for($z=$parsedipv6sections2.Length;  ($parsedipv6sections2[$z-1] -ne "")-and ($z -gt 0) -and ($y -gt ($x-1)); $y--,$z--)
                            {
                                $arrayfor[$y] = $parsedipv6sections2[$z-1]
                            }
                        }
                        for(;$x -lt ($y+1); $x++)
                        {
                              $arrayfor[$x]="0" 
                        }
                    }
                }
            if($MaxSecNum -eq 6)
            {
                $returnstring = $returnstring = $arrayfor[0]+":"+$arrayfor[1]+":"+$arrayfor[2]+":"+$arrayfor[3]+":"+$arrayfor[4]+":"+$arrayfor[5]
            }
            if($MaxSecNum -eq 8)
            {
                $appendingstring=""
                if($arrayfor[8] -ne "")
                {
                    $appendingstring=":"+$arrayfor[8]
                }
                if($arrayfor[9] -ne "")
                {
                    if($appendingstring -ne "")
                    {
                        $appendingstring = $appendingstring + ":"+$arrayfor[9]
                    }
                    else
                    {
                        $appendingstring=":"+$arrayfor[9]
                    }
                }
                if($arrayfor[10] -ne "")
                {
                    if($appendingstring -ne "")
                    {
                        $appendingstring = $appendingstring + $arrayfor[10]
                    }
                    else
                    {
                        $appendingstring=$arrayfor[10]
                    }
                }
                
                $returnstring = $arrayfor[0]+":"+$arrayfor[1]+":"+$arrayfor[2]+":"+$arrayfor[3]+":"+$arrayfor[4]+":"+$arrayfor[5]+":"+$arrayfor[6]+":"+$arrayfor[7]+$appendingstring
            }
            }
    #$arrayforip.Value= $arrayfor
    return $returnstring
}

# $itemForProcess is mandatory parameter required by each cmdlet
# $runObjects is an array of objects, each object have parameter name, input values, others if necessary
function Start-InteractiveProcess{
	param (
		[parameter(Mandatory=$true)] $itemForProcess,
		[parameter(Mandatory=$true)] [ref]$runObjects
	)

	$parameterName = $itemForProcess.parameterName
	$inputServers = ""
	foreach($runObject in $runObjects.Value){
		$inputServers += $runObject.Server + "`n"
	}

    [string]$validValueTips=""
    if ($itemForProcess.parameterAcceptValidValues -ne $null)
    {
        $validValueTips = $([string]::Format($(Get-Message("MSG_PARAMETER_ACCEPT_VALUES")),  $itemForProcess.parameterAcceptValidValues))
    }
    elseif (($itemForProcess.parameterMinRange -ne $null) -and ($itemForProcess.parameterMaxRange -ne $null) )
    {
        $validValueTips = $([string]::Format($(Get-Message("MSG_PARAMETER_ACCEPT_RANGE")),  $itemForProcess.parameterMinRange, $itemForProcess.parameterMaxRange)) 
    }
    elseif (($itemForProcess.parameterMinLength -ne $null) -or ($itemForProcess.parameterMaxLength -ne $null))
    {
        $validValueTips = $([string]::Format($(Get-Message("MSG_PARAMETER_ACCEPT_LENGTH")),  $itemForProcess.parameterMinLength, $itemForProcess.parameterMaxLength)) 
    }


	Write-Host
    Write-Host $([string]::Format($(Get-Message("MSG_PARAMETER_NOT_PROVIDED")), $parameterName, $inputServers))
	$askSameForAll = "Y"    
	if($runObjects.Value.count -ne 1)
	{							
		do{
			$askSameForAll = Read-Host $([string]::Format($(Get-Message("MSG_ASK_SAME")) ,$parameterName))
		}while(($askSameForAll -ne "Y") -and ($askSameForAll -ne "N"))
	}
	if($askSameForAll -eq "Y")
	{
		$currInputValue=""
        $tValue = $currInputValue
		if($itemForProcess.parameterIsPassword -ne $null -and $itemForProcess.parameterIsPassword)
		{										
			$temppassword = Read-Host -AsSecureString $([string]::Format($(Get-Message("MSG_ASK_PARAMETER")) ,$parameterName))
			$currInputValue = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($temppassword))
		}
		else
		{
            [bool]$isvalid = $true
            do
            {
                if($validValueTips -eq "")
                {
			        $currInputValue = Read-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER")) ,$parameterName))
                }
                else
                {
                    $currInputValue = Read-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_WITH_TIP")), $parameterName, $validValueTips))
                }

                if($currInputValue.Trim() -eq '')
                {
                    $isvalid = $false
                    Write-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_AGAIN")) ,$parameterName))                    
                }
                else
                {                
                    try
                    {
                        $tValue=$currInputValue
                        $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $tValue -returnValue ([ref]$currInputValue)
                    }
                    catch
                    {
                        $isvalid = $false
                    }
                    if(!$isvalid)
                    {
                        Write-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_AGAIN2")), $currInputValue ,$parameterName))                    
                    }
                }
            }
			while (!$isvalid)
		}

		For($i = 0; $i -lt $runObjects.Value.Length; $i++)
		{								
		   ($runObjects.Value)[$i].Add($parameterName, $currInputValue)
		}					
	}
	else
	{
		For($i = 0; $i -lt $runObjects.Value.Length; $i++)
		{
			$thisiLOServer = ($runObjects.Value)[$i].Server                        
			if($thisiLOServer -ne $null -and $thisiLOServer -ne "")
			{
				$currInputValue=""
				if($itemForProcess.parameterIsPassword -ne $null -and $itemForProcess.parameterIsPassword)
				{										
					$temppassword = Read-Host -AsSecureString $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_FORINDEVIDUAL")) ,$parameterName, $thisiLOServer))
					$currInputValue = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($temppassword))
				}
				else
				{
                    [bool]$isvalid = $true
                    do
                    {
                        if($validValueTips -eq "")
                        {
			                $currInputValue = Read-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_FORINDEVIDUAL")), $parameterName, $thisiLOServer))
                        }
                        else
                        {
                            $currInputValue = Read-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_FORINDEVIDUAL_WITH_TIP")), $parameterName, $thisiLOServer, $validValueTips))
                        }
                        if($currInputValue.Trim() -eq '')
                        {
                            $isvalid = $false
                            Write-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_AGAIN")) ,$parameterName))                    
                        }
                        else
                        {                
                            try
                            {
                                $tValue=$currInputValue
                                $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $tValue -returnValue ([ref]$currInputValue)
                            }
                            catch
                            {
                                $isvalid = $false
                            }
                            if(!$isvalid)
                            {
                                Write-Host $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_AGAIN2")), $currInputValue, $parameterName))                    
                            }
                        }
                    }
					while (!$isvalid)
                }
				($runObjects.Value)[$i].Add($parameterName, $currInputValue)
            }			  
		}
	}
}

# $runObjects is an array of objects, each object have parameter name, input values, others if necessary
function Start-InteractiveProcessForCredential{
	param (
		[parameter(Mandatory=$true)] [ref]$runObjects
	)

	$inputServers = ""
	foreach($runObject in $runObjects.Value){
		$inputServers += $runObject.Server + "`n"
	}
	Write-Host
    Write-Host $([string]::Format($(Get-Message("MSG_PARAMETER_NOT_PROVIDED")), "Credential", $inputServers))
	$askSameForAll = "Y"    
	if($runObjects.Value.count -ne 1)
	{							
		do
		{
			$askSameForAll = Read-Host $([string]::Format($(Get-Message("MSG_ASK_SAME")) ,"Credential"))
		}while(($askSameForAll -ne "Y") -and ($askSameForAll -ne "N"))
	}
	if($askSameForAll -eq "Y")
	{
		$currInputValue = $null
		$currInputValue = Get-Credential -Message $([string]::Format($(Get-Message("MSG_ASK_PARAMETER")) ,"Credential"))
		while ($currInputValue -eq $null){
			$currInputValue = Get-Credential -Message $(Get-Message("MSG_ASK_CREDENTIAL_AGAIN"))
		}
		For($i = 0; $i -lt $runObjects.Value.Length; $i++)
		{								
		   ($runObjects.Value)[$i].Add("Credential", $currInputValue)
		}					
	}
	else
	{
		For($i = 0; $i -lt $runObjects.Value.Length; $i++)
		{
			$thisiLOServer = ($runObjects.Value)[$i].Server                        
			if($thisiLOServer -ne $null -and $thisiLOServer -ne "")
			{
				$currInputValue = $null
				$currInputValue = Get-Credential -Message $([string]::Format($(Get-Message("MSG_ASK_PARAMETER_FORINDEVIDUAL")) ,"Credential", $thisiLOServer))
				while ($currInputValue -eq $null)
				{
					$currInputValue = Get-Credential -Message $(Get-Message("MSG_ASK_CREDENTIAL_AGAIN"))
				}                 								
				($runObjects.Value)[$i].Add("Credential", $currInputValue)
			}  
		}
	}
}

#pair the username/password-credential pairs, change credential to username/password if they are in pairs
#change username/password to NeedInput = $true
function setNeedInput{
	param (
		[parameter(Mandatory=$true)] [ref]$arrayForProcess
	)
    $tempArrayForProcess = $arrayForProcess.Value
    #get the value type of Credential and Username/Password
    [int]$username_index=0
    [int]$password_index=0
    [int]$credential_index=0
    $typeCredential = $null
    $typeUsername = $null
    $typePassword = $null
    for($i=0; $i -lt $tempArrayForProcess.Count; $i++)
    { 
        if($tempArrayForProcess[$i].parameterName -eq "Username")
        {
            $username_index = $i
            try{
                $typeUsername = $tempArrayForProcess[$i].parameterValue.GetType().Name
            }
            catch
            {
                $typeUsername = $null
                $global:error.RemoveAt($global:error.count-1)
            }
        }
        elseif($tempArrayForProcess[$i].parameterName -eq "Password")
        {
            $password_index = $i
            try{
                $typePassword = $tempArrayForProcess[$i].parameterValue.GetType().Name
            }
            catch
            {
                $typePassword = $null
                $global:error.RemoveAt($global:error.count-1)
            }
        }
        elseif($tempArrayForProcess[$i].parameterName -eq "Credential")
        {
            $credential_index = $i
            try{
                $typeCredential = $tempArrayForProcess[$i].parameterValue.GetType().Name
            }
            catch
            {
                $typeCredential = $null
                $global:error.RemoveAt($global:error.count-1)
            }
        }        
    }
    if($typeCredential -ne $null)
    {
      if($typeUsername -eq $null -and $typePassword -eq $null)
      {
         $tempArrayForProcess[$credential_index].parameterNeedInput = $true
      }
      else #change credential to username/password if username or password has values
      {
       if($typeCredential -eq "object[]")
       {
          if(($typeUsername -ne $null -and $typeUsername -ne "object[]") -or ($typePassword -ne $null -and $typePassword -ne "object[]"))
          {
		     Write-Error $(Get-Message("MSG_INVALID_USING_CREDENTIAL"))
		     return $false
          }
          for([int]$i = 0; $i -lt $tempArrayForProcess[$credential_index].parameterValue.Count; $i++)
          {
              if($tempArrayForProcess[$credential_index].parameterValue[$i] -ne $null)
              {
                 $subType = $tempArrayForProcess[$credential_index].parameterValue[$i].GetType().Name
                 if($subType -ne "PSCredential" -and $subType -ne "PSCustomObject")
                 {
                    Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $subType, "Credential"))
                    return $false
                 }
                 $currUsername = ""
        		 $currPassword = ""
                 $currCredential = $tempArrayForProcess[$credential_index].parameterValue[$i]
                 if($subType -eq "PSCustomObject")
                 {
                    $currCredential = $tempArrayForProcess[$credential_index].parameterValue[$i].Credential
                 }
                 Get-UserNameAndPWFromCredential -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $currCredential
                 if($typeUsername -eq $null) #no username value
                 {
                    $valueList = New-Object System.Collections.Generic.List[System.Object]
                    for([int]$j = 0; $j -lt $i; $j++)
                    {
                        $valueList.Add($null)
                    }
                    $valueList.Add($currUsername)
                    $tempArrayForProcess[$username_index].parameterValue = $valueList.ToArray()
                    $typeUsername = "object[]"
                 }
                 elseif($i -lt $tempArrayForProcess[$username_index].parameterValue.Count) #credential items equal or less than username items
                 {
                    if($tempArrayForProcess[$username_index].parameterValue[$i] -ne $null)
                    {
		               Write-Error $(Get-Message("MSG_INVALID_USING_CREDENTIAL"))
		               return $false
                    }
                    else
                    {
                       $tempArrayForProcess[$username_index].parameterValue[$i] = $currUsername
                    }
                 }
                 else #credential items more than username items
                 {
                    $valueList = New-Object System.Collections.Generic.List[System.Object]
                    foreach($value in $tempArrayForProcess[$username_index].parameterValue)
                    {
                       $valueList.Add($value)
                    }
                    for([int]$j = $tempArrayForProcess[$username_index].parameterValue.Count; $j -lt $i; $j++)
                    {
                       $valueList.Add($null)
                    }
                    $valueList.Add($currUsername)
                    $tempArrayForProcess[$username_index].parameterValue = $valueList.ToArray()
                 }

                 if($typePassword -eq $null) #no password value
                 {
                    $valueList = New-Object System.Collections.Generic.List[System.Object]
                    for([int]$j = 0; $j -lt $i; $j++)
                    {
                        $valueList.Add($null)
                    }
                    $valueList.Add($currPassword)
                    $tempArrayForProcess[$password_index].parameterValue = $valueList.ToArray()
                    $typePassword = "object[]"
                 }
                 elseif($i -lt $tempArrayForProcess[$password_index].parameterValue.Count) #credential items equal or less than password items
                 {
                    if($tempArrayForProcess[$password_index].parameterValue[$i] -ne $null)
                    {
		               Write-Error $(Get-Message("MSG_INVALID_USING_CREDENTIAL"))
		               return $false
                    }
                    else
                    {
                       $tempArrayForProcess[$password_index].parameterValue[$i] = $currPassword
                    }
                 }
                 else #credential items more than password items
                 {
                    $valueList = New-Object System.Collections.Generic.List[System.Object]
                    foreach($value in $tempArrayForProcess[$password_index].parameterValue)
                    {
                       $valueList.Add($value)
                    }
                    for([int]$j = $tempArrayForProcess[$password_index].parameterValue.Count; $j -lt $i; $j++)
                    {
                       $valueList.Add($null)
                    }
                    $valueList.Add($currPassword)
                    $tempArrayForProcess[$password_index].parameterValue = $valueList.ToArray()
                 }
              }
          }

       }
       elseif($typeCredential -eq "PSCredential" -or $typeCredential -eq "PSCustomObject") #$typeUsername -ne $null -or $typePassword -ne $null
       { 
          Write-Error $(Get-Message("MSG_INVALID_USING_CREDENTIAL"))
		  return $false
       }
       else
       {
          Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $typeCredential, "Credential"))
          return $false
       }
       $tempArrayForProcess[$credential_index].parameterValue = $null
	   $tempArrayForProcess[$username_index].parameterNeedInput = $true
       $tempArrayForProcess[$password_index].parameterNeedInput = $true
      }
    }
    else #Credential has no value
    {
	   $tempArrayForProcess[$username_index].parameterNeedInput = $true
       $tempArrayForProcess[$password_index].parameterNeedInput = $true
    }

    $arrayForProcess.Value = $tempArrayForProcess
	return $true
}

#check the validity of input parameters from command line input/pipe line input/interactive input
#and get the matching value if validatesets is not null
#when input is invalid, exception is thrown, so the return flag does not mean much 
#when input is valid, no exception, and the return value is true
function Check-ParameterValidity{
    param (
        [parameter(Mandatory=$true)] $paraData,
        [parameter(Mandatory=$true)] $paraValue,
        [parameter(Mandatory=$true)] [ref]$returnValue
    )
    try
    {
        $paraValue = [string]$paraValue
        [bool]$flag= $true

        #check mix input with single-quote and double-quote
        if($paraValue.Contains("`"") -and $paraValue.Contains("'"))
        {
            throw $([string]::Format($(Get-Message("MSG_INVALID_FORMAT")), $paraValue))
        }

        #if the parameterMinLength/parameterMaxLength is not set, default value is 0;
        if ($paraData.parameterMinLength -ne $null)
        {
            if ($paraValue.Length -lt $paraData.parameterMinLength)
            {
                throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_LENGTH_FAIL_MIN")), $paraData.parameterName, $($paraData.parameterMinLength)))
            }
        }

        if ($paraData.parameterMaxLength -ne $null)
        {
            if ($paraValue.Length -gt $paraData.parameterMaxLength)
            {
                throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_LENGTH_FAIL_MAX")), $paraData.parameterName, $($paraData.parameterMaxLength)))
            }
        }

        if (($paraData.parameterMinRange -ne $null) -and ($paraData.parameterMaxRange -ne $null) )
        {
            try
            {
                $val = [int]($paraValue)
                if (($val -gt $paraData.parameterMaxRange) -or ($val -lt $paraData.parameterMinRange))
                {
                    throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_RANGE_FAIL")), $paraData.parameterName,   $($paraData.parameterMinRange), $($paraData.parameterMaxRange)))
                }
            }
            catch
            {
                throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_RANGE_FAIL")), $paraData.parameterName,   $($paraData.parameterMinRange), $($paraData.parameterMaxRange)))
            }
        }

                    
        if ($paraData.parameterValidateValues -ne $null)
        {
            if (!$paraData.parameterValidateValues.ContainsKey($paraValue))
            {       
                throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_VALIDATESET_FAIL")), $paraData.parameterName,  $itemForProcess.parameterAcceptValidValues)) 
            }
            else
            {
                $returnValue.Value = $paraData.parameterValidateValues[$paraValue];                    
            }
        }
		
		if (($paraData.parameterSupportIPv4Only -ne $null) -or ($paraData.parameterSupportIPv6Only -ne $null)  -or ($paraData.parameterSupportIPv4AndIPv6Only -ne $null))
        {
			$ipv6_one_section="[0-9A-Fa-f]{1,4}"
			$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"

			#regex for single ip address without range (,-), could not be range
			$ipv4_regex_inipv6_single="${ipv4_one_section}(\.${ipv4_one_section}){3}"  
			$ipv6_regex_single="^\s*(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\s*$" 
			$ipv4_regex_single="^\s*${ipv4_one_section}(\.${ipv4_one_section}){3}\s*$"
            if (($paraData.parameterSupportIPv4AndIPv6Only -ne $null) -and $paraData.parameterSupportIPv4AndIPv6Only )
            {   if(($paraValue -notmatch $ipv4_regex_single) -and ($paraValue -notmatch $ipv6_regex_single))
				{
					throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_IPV6IPV4_FAIL")), $paraData.parameterName)) 
				}
            }            
			elseif(($paraData.parameterSupportIPv4Only -ne $null) -and $paraData.parameterSupportIPv4Only )
			{	
				if(($paraValue -notmatch $ipv4_regex_single))
				{
					throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_IPV4_FAIL")), $paraData.parameterName)) 
				}			
			}
			elseif(($paraData.parameterSupportIPv6Only -ne $null) -and $paraData.parameterSupportIPv6Only )
            {
                if(($paraValue -notmatch $ipv6_regex_single))
				{
					throw $([string]::Format($(Get-Message("MSG_PARAMETER_CHECK_IPV6_FAIL")), $paraData.parameterName)) 
				}	                  
            }
        }
    }
    catch
    {
        $global:error.RemoveAt($global:error.count-1)
        Write-Error $_
        $flag = $false
    }
    return $flag
}


#$arrayForProcess is an array of objects, each object have parameter name, input values, others if necessary
#$arrayAfterProcess is also an array of objects, each object is ready for use in cmdlets
#each parameter have the following definitions:
#parameterName 
#parameterAlias         : for Alias()
#parameterValue
#parameterDefaultValue
#parameterNeedInput
#parameterIsPassword    :
#parameterSupportInt    : also support int besides string
#parameterSupportIPv4Only: only IPv4 is supported
#parameterSupportIPv6Only: only IPv6 is supported
#parameterSupportIPv4AndIPv6Only: only IP is supported
#parameterValidateValues: for ValidateSet()
#parameterAcceptValidValues: for Keys in ValidateSet
#parameterMinLength/parameterMaxLength        : for validateLength()
#parameterMinRange/parameterMaxRange         : for ValidateRange()
#input from both commandline and pipeline are validated
function Process-Input{
	param (
		[parameter(Mandatory=$false)] $PipeInput,
		[parameter(Mandatory=$false)] $arrayForProcess,
		[parameter(Mandatory=$false)] $Force,
		[parameter(Mandatory=$true)] [ref] $arrayAfterProcess
	)
	$ipv6_one_section="[0-9A-Fa-f]{1,4}"
	$ipv6_one_section_phen="$ipv6_one_section(-$ipv6_one_section)?"
	$ipv6_one_section_phen_comma="$ipv6_one_section_phen(,$ipv6_one_section_phen)*"

	$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"
	$ipv4_one_section_phen="$ipv4_one_section(-$ipv4_one_section)?"
	$ipv4_one_section_phen_comma="$ipv4_one_section_phen(,$ipv4_one_section_phen)*"

	#could be range
	$ipv4_regex_inipv6="${ipv4_one_section_phen_comma}(\.${ipv4_one_section_phen_comma}){3}"  	
	
	#regex for $server of other cmdlets, valid input includes: "16.173.1.20,21", "16.173.1,20-21".  Invalid input includes: "16.173.."
    $port_regex = ":([1-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])"
	$ipv6_regex_other="^\s*(((${ipv6_one_section_phen_comma}:){7}(${ipv6_one_section_phen_comma}|:))|((${ipv6_one_section_phen_comma}:){6}(:${ipv6_one_section_phen_comma}|(${ipv4_one_section_phen_comma}(\.${ipv4_one_section_phen_comma}){3})|:))|((${ipv6_one_section_phen_comma}:){5}(((:${ipv6_one_section_phen_comma}){1,2})|:${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){4}(((:${ipv6_one_section_phen_comma}){1,3})|((:${ipv6_one_section_phen_comma})?:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){3}(((:${ipv6_one_section_phen_comma}){1,4})|((:${ipv6_one_section_phen_comma}){0,2}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){2}(((:${ipv6_one_section_phen_comma}){1,5})|((:${ipv6_one_section_phen_comma}){0,3}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1}(((:${ipv6_one_section_phen_comma}){1,6})|((:${ipv6_one_section_phen_comma}){0,4}:${ipv4_regex_inipv6})|:))|(:(((:${ipv6_one_section_phen_comma}){1,7})|((:${ipv6_one_section_phen_comma}){0,5}:${ipv4_regex_inipv6})|:)))(%.+)?\s*$" 
	$ipv6_regex_other_with_bra="^\s*\[(((${ipv6_one_section_phen_comma}:){7}(${ipv6_one_section_phen_comma}|:))|((${ipv6_one_section_phen_comma}:){6}(:${ipv6_one_section_phen_comma}|(${ipv4_one_section_phen_comma}(\.${ipv4_one_section_phen_comma}){3})|:))|((${ipv6_one_section_phen_comma}:){5}(((:${ipv6_one_section_phen_comma}){1,2})|:${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){4}(((:${ipv6_one_section_phen_comma}){1,3})|((:${ipv6_one_section_phen_comma})?:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){3}(((:${ipv6_one_section_phen_comma}){1,4})|((:${ipv6_one_section_phen_comma}){0,2}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){2}(((:${ipv6_one_section_phen_comma}){1,5})|((:${ipv6_one_section_phen_comma}){0,3}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1}(((:${ipv6_one_section_phen_comma}){1,6})|((:${ipv6_one_section_phen_comma}){0,4}:${ipv4_regex_inipv6})|:))|(:(((:${ipv6_one_section_phen_comma}){1,7})|((:${ipv6_one_section_phen_comma}){0,5}:${ipv4_regex_inipv6})|:)))(%.+)?\]($port_regex)?\s*$" 	
    $ipv4_regex_other="^\s*${ipv4_one_section_phen_comma}(\.${ipv4_one_section_phen_comma}){3}($port_regex)?\s*$"
	
	#input array after processing IP ranges  
	$runObjects = @()     
	$validateInputFlag=$true

    #process pipeline input first      
    if(($PipeInput -ne "") -and ($PipeInput -ne $null))
    {
        #used to keep pipeline objects, if each pipe object becomes one item in it
        $pipeValues=@()  
      
        foreach($pinput in $PipeInput)
        {
            #used to keep one pipe object 
            $onePipeObject=@{}
            #flag to process other properites
            $processProerties=$true
            $serv = $null
 
            #pipeline object's property have server info
		    if($pinput.IP -ne $null -or $pinput.Hostname -ne $null -or $pinput.Server -ne $null)
            {
			    if($pinput.Server -ne $null)
			    {
				    $serv = $pinput.Server                    
			    }
			    elseif($pinput.IP -ne $null)
			    {
				    $serv = $pinput.IP
			    }
			    elseif($pinput.Hostname -ne $null)
			    {
				    $serv = $pinput.Hostname
			    }                           
            }
            #pipeline object does not have server info, take whole object as server info
            elseif( ($pinput -ne $null) -and ($pinput.GetType().Name -eq "String") -and ($pinput -ne ""))
            {
                $processProerties=$false
                $serv = $pinput                
            }
		    #else
            #{
                #pipeline does not have server info
			    #Write-Host $(Get-Message("MSG_PARAMETER_PIPE_NOT_SUPPORTED")) -ForegroundColor Red
                #return $false
	        #}

            #process the properties 
            if($serv -ne $null)
            {
            #server could be null
            $onePipeObject.Add("Server", $serv)
            }
            #get pipeline input for other parameters
            if($processProerties)
            {
                foreach($itemForProcess in $arrayForProcess)
			    {
			        $parameterName = $itemForProcess.parameterName
                    $valueArray = @()
				    #parameterName are always supposed to be string
				    if($parameterName -eq "Server" ) 
                    { 
                        continue
                    }
                    else
                    {
                        #add null for place holder
                        $onePipeObject.Add($parameterName, $null)    
                        if($pinput.$parameterName -ne $null ) 
                        {   
                            $onePipeObject[$parameterName] = $pinput.$parameterName
                        }
                        #process alias if any
                        elseif($itemForProcess.parameterAlias -ne $null)
                        {
                            foreach($alias in $itemForProcess.parameterAlias)
                            {
                                if($pinput.$alias -ne $null ) 
                                {
                                    $onePipeObject[$parameterName] = $pinput.$alias
                                    break
                                }
                             }
                        }
                    }
                }
            }

            if($onePipeObject.Count -ne 0)
            {
                $pipeValues += $onePipeObject
            }
        }

        

        #process the pipeline input objects
        #process the following case
        #different structure in pipeline objects: with/without server
        $mergedPipeValue=@{}
        if($pipeValues.Count -eq 1)
        {
            $mergedPipeValue = $pipeValues[0]
        }
        elseif($pipeValues.Count -gt 1)
        {
            #$mergedPipeValue = $pipeValues[0]
            #check each parameter
            foreach($itemForProcess in $arrayForProcess)
            {
                $parameterName = $itemForProcess.parameterName
                if($parameterName -eq "OutputType" -or $parameterName -eq "Force" )
                {
                    continue
                }
                $values=@()
                for($i=0; $i -lt $pipeValues.Count; $i++ )
                {
                    $values += $pipeValues[$i].$parameterName                                    
                }                

                [bool]$AllNull = $true
                foreach($v in $values)
                {
                    if($v -ne $null)
                    {
                        $AllNull = $false
                        break                    
                    }
                }
                if(!$AllNull)
                {
                     $mergedPipeValue.Add($parameterName, $values)                      
                }
            }
        }
    
        #if has pipeinput and pipe data=0 report error
        if($mergedPipeValue.Count -eq 0)
        {
            #Write-Host "no valid pipe data" -ForegroundColor Red
        }
        else
        {
            foreach($paramdata in $arrayForProcess)
            {
               if($paramdata.parameterValue -ne $null)
               {
                    #debug not in merged hash
                    $pinputdata = $mergedPipeValue[$paramdata.parameterName]
                    if($pinputdata -ne $null)
                    {
                        if($paramdata.parameterFromCmd)
                        {
                            Write-Warning $([string]::Format($(Get-Message("MSG_PARAMETER_IN_BOTH_COMMANDLINE_AND_PIPE")), $paramdata.parameterName))
                        }
                        else
                        {
                            $paramdata.parameterValue = $mergedPipeValue[$paramdata.parameterName] 
                        }                              
                    }                        
                }
                else
                {
                    $paramdata.parameterValue = $mergedPipeValue[$paramdata.parameterName]  
                }                     
            } 
        }        
    } 

	if(!$(setNeedInput( [ref] $arrayForProcess)))
	{
		return $false
	}

	if($Force -eq $True)
	{
		foreach($itemForProcess in $arrayForProcess)
		{
			if($itemForProcess.parameterValue -eq $null -and $itemForProcess.parameterNeedInput)
			{					
				#Write-Host $(Get-Message("MSG_PARAMETER_MISSING_FORCE")) -ForegroundColor Red
                Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_MISSING_FORCE2")), $itemForProcess.parameterName))
				return $false
			}
		}            
	}

	#input array before processing IP ranges 
	$inputList = @()  
	#process Server parameter first
	foreach($itemForProcess in $arrayForProcess)
	{
		if($itemForProcess.parameterName -eq "Server" )
		{
			$Server = $itemForProcess.parameterValue
			$inputServers=@()
            [bool]$AskForServer=$false
			if($Server -ne $null) 
			{					
				if(($Server.GetType().Name -eq "String" ))
				{
					$inputServers += $Server                    
				}                
				elseif($Server.GetType().Name -eq "Object[]")
				{
					$inputServers = $Server
				}
                elseif($Server.GetType().Name -match "PSCustomObject")
                {                    
				    if($Server.Server -ne "" -and $Server.Server -ne $null)
					{									
					    $inputServers += $Server.Server                            
					}
					elseif($Server.IP -ne "" -and $Server.IP -ne $null)
					{									
					    $inputServers += $Server.IP                          
					}
					elseif($Server.HOSTNAME -ne "" -and $Server.HOSTNAME -ne $null)
					{
						$inputServers += $Server.HOSTNAME
					}
                    else
                    {
                        if($itemForProcess.parameterFromCmd)
                        {
                            Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_INPUT")), $itemForProcess.parameterName))	
                            return $false
                        }
                        else
                        {
                            #need to ask input
                            $AskForServer = $true
                        }
                    }                    
                }
				else
				{
					Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $Server.GetType().Name, $itemForProcess.parameterName))
					return $false
				}
			}
			else
			{
                $AskForServer = $true
            }

            if($AskForServer)
            {
                if($Force)
                {
                    Write-Error $(Get-Message("MSG_PARAMETER_MISSING_FORCE"))
                    return $false
                }
				$serversFromUser = @()
				$more = "N"
					do{
					if(($more -ne "Y") -and ($more -ne "N")){
						$more = Read-Host $(Get-Message("MSG_ASK_ADDSERVERS"))
					}
					else{
						$serverObj = New-Object PSObject
						$ipHost = Read-Host $(Get-Message("MSG_ASK_IP"))
						while ($ipHost.Trim() -eq ''){
								$ipHost = Read-Host $(Get-Message("MSG_ASK_IP_AGAIN"))
							}
						$serversFromUser += $ipHost
						$more = Read-Host $(Get-Message("MSG_ASK_ADDSERVERS"))
					}
							
				}
				while($more -ne "N")
				$inputServers = $serversFromUser
			}

			if($inputServers.GetType().Name -eq "object[]")
			{
				For($i=0; $i -lt $inputServers.Count; $i++)
				{
					$obj = $inputServers[$i]
					if(($obj -ne $null) -and ($obj.GetType().Name -eq "String") -and ($obj -ne ""))
					{
						$temp = @{}
						$temp.Add("Server", $obj)								
						$inputList += $temp
					}
					elseif(($obj -ne $null) -and ($obj.GetType().Name -match "PSCustomObject"))
					{
						#$temp = New-Object PSObject 
						$temp = @{}								
						if($Obj.Server -ne "" -and $Obj.Server -ne $null)
						{									
							$temp.Add("Server", $Obj.Server)                            
						}
						elseif($Obj.IP -ne "" -and $Obj.IP -ne $null)
						{									
							$temp.Add("Server", $Obj.IP)                            
						}
						elseif($Obj.HOSTNAME -ne "" -and $Obj.HOSTNAME -ne $null)
						{
							$temp.Add("Server", $Obj.HOSTNAME)                            
						}
                        else
                        {
                            Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_INPUT")), $itemForProcess.parameterName))	
                            return $false
                        }
                        $inputList += $temp
					}
                    elseif($obj -eq $null -or $obj -eq "")
                    {
                        Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_MISSING")), $itemForProcess.parameterName))	
                        return $false
                    }
					else
					{
						Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")) ,$obj, $itemForProcess.parameterName))	
                        return $false
					}
				}
						
				#parse each item in $inputList to get each single IP address, and add it to $runObjects
				For($i = 0; $i -lt $inputList.Length; $i++)
				{				
					$objServer = $inputList[$i].Server
					if(($objServer -match $ipv4_regex_other) -or ($objServer -match $ipv6_regex_other) -or ($objServer -match $ipv6_regex_other_with_bra))
					{
						$ipList = New-Object System.Collections.Generic.List[System.Object]
						$retarray = @()

						if(($objServer -match $ipv4_regex_other))
						{
                            if($objServer.contains(":")) #ipv4:port
                            {
                               $retarray = Get-IPArrayFromString -stringIP $objServer.Split(":")[0].Trim() -IPType "IPv4"
						       foreach($oneip in $retarray)
						       {
							      $x = $ipList.Add($oneip + ":" + $objServer.Split(":")[1].Trim())
						       } 
                            }
                            else
                            {
                               $retarray = Get-IPArrayFromString -stringIP $objServer -IPType "IPv4"
						       foreach($oneip in $retarray)
						       {
							      $x = $ipList.Add($oneip)
						       } 
                            }
						}
						elseif(($objServer -match $ipv6_regex_other)) #ipv6 without bracket nor port
						{
							$retarray = Get-IPv6FromString -stringIP $objServer 
						    foreach($oneip in $retarray)
						    {
							   $x = $ipList.Add("[" + $oneip + "]")
						    } 
						}
                        elseif($objServer -match $ipv6_regex_other_with_bra) #[ipv6] and [ipv6]:port
                        {
                            if($objServer.Split("]")[0].Replace("[","").Trim() -match $ipv4_regex_other) #exclude [ipv4] and [ipv4]:port
                            {
                               Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_INPUT")), "Server: $objServer"))
                            }
                            else
                            {
                               $retarray = Get-IPv6FromString -stringIP $objServer.Split("]")[0].Replace("[","").Trim() 
                               foreach($oneip in $retarray)
						       {
							      $x = $ipList.Add("[" + $oneip + "]" + $objServer.Split("]")[1].Trim())
						       } 
                            }
                        }
				        if($retarray.count -gt 0)
                        {
                           $temp = @{}	 
					       $temp.Add("Server", $retarray) #Server has no port value in ip, for interactive process
                           $temp.Add("InputServer", $ipList.ToArray())  #InputServer has port value in ip
						   $runObjects += $temp  
                        }                                  
					}
					#suppose to be host name
					else 
					{
						$temp = @{}	 									
						$temp.Add("Server", $objServer)
                        $temp.Add("InputServer", $objServer)
						$runObjects += $temp 					
					}
				}
			}
			else
			{
				#$validateInputFlag = $false						
				Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $inputServers.GetType().Name, $itemForProcess.parameterName))
				return $false
			}
			break
		}							
	}
	#done with Server parameter processing
			
	if($runObjects.Length -gt 0)
	{
		#process other properties
		foreach($itemForProcess in $arrayForProcess)
		{
			$parameterName = $itemForProcess.parameterName				
			if($parameterName -eq "Server")
			{
				continue
			}					
			$parameterValue = $itemForProcess.parameterValue                		

			if($parameterName -eq "Credential") 
			{
				if($parameterValue -ne $null)
				{
					if($parameterValue.GetType().Name -eq "PSCredential")
					{
						For($i = 0; $i -lt $runObjects.Length; $i++)
						{
							$runObjects[$i].Add($parameterName, $parameterValue)								
						}
					}
					elseif($parameterValue.GetType().Name -eq "PSCustomObject")
					{                    
						For($i = 0; $i -lt $runObjects.Length; $i++)
						{
							$runObjects[$i].Add($parameterName, $parameterValue.$parameterName)
						}
					}
					elseif($parameterValue.GetType().Name -eq "object[]")
					{
                        $tempValue = @()
                        foreach($pvalue in $parameterValue){
                            if($pvalue -ne $null){
                               $tempValue += $pvalue
                            }
                        }
						if($runObjects.Length -ne $tempValue.Length)
						{
							Write-Verbose $([string]::Format($(Get-Message("MSG_PARAMETER_NOTMATCH")) ,$parameterName))
						}

                        $runObjectsForInteractive = @() #collects the runobject servers which need parameter interactive process
						[int]$i = 0
                        [int]$indexForInteractive = 0
						For(; ($i -lt $parameterValue.Length) -and ($i -lt $runObjects.Length) ; $i++)
						{
                          if($parameterValue[$i] -eq $null)
                          {
                             if($itemForProcess.parameterNeedInput)
                             {
                             $runObjects[$i].Add("indexForInteractive", $indexForInteractive)
                             $runObjectsForInteractive += $runObjects[$i]
                             $indexForInteractive = $indexForInteractive + 1
                          }
                          }
                          else
                          {
							if(($parameterValue[$i].GetType().Name -eq "PSCredential") )
							{					
								$runObjects[$i].Add($parameterName, $parameterValue[$i])									
							}
							elseif($parameterValue[$i].GetType().Name -eq "PSCustomObject" )
							{ 					
								$runObjects[$i].Add($parameterName, $parameterValue[$i].$parameterName	)
							}
							else 
							{
								Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")),  $parameterValue[$i].GetType().Name, $parameterName))
                                return $false							
							}
                          }
						}
									
						#some servers do not have para values
						if($i -lt $runObjects.Length -and $itemForProcess.parameterNeedInput)
						{
                           for(; $i -lt $runObjects.Length; $i++)
                           {
                               $runObjects[$i].Add("indexForInteractive", $indexForInteractive)
                               $runObjectsForInteractive += $runObjects[$i]
                               $indexForInteractive = $indexForInteractive + 1
                           }
						}
                        if($runObjectsForInteractive.Length -gt 0 -and $itemForProcess.parameterNeedInput)
                        {
                           if($Force -eq $True)
                           {
                              $serverCount = $runObjects.Length
                              $paraCount = $runObjects.Length - $runObjectsForInteractive.Length
							  Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_NOTMATCH")) ,$parameterName))
							  return $false
                           }
                           else
                           {

                              $tempRunObjects = @()  #pass to Start-InteractiveProcessForCredential, each element contains only one single server ip
                              foreach($runObject in $runObjectsForInteractive)
                              {
                                 foreach($ip in $runObject.Server)
                                 {
                                       $temp = @{}
                                       $temp.Add("indexForInteractive", $runObject.indexForInteractive)
                                       $temp.Add("Server",$ip)
                                       $tempRunObjects += $temp
                                 }
                              }
                        
							  Start-InteractiveProcessForCredential -runObjects ([ref]$tempRunObjects)
                              foreach($runObject in $runObjects)
                              {
                                  if($runObject.ContainsKey("indexForInteractive"))
                                  {
                                     $valueArray = @()
                                     foreach($temp in $tempRunObjects)
                                     {
                                        if($temp.indexForInteractive -eq $runObject.indexForInteractive)
                                        {
                                           $valueArray += $temp.$parameterName
                                        }
                                     }
                                     if($runObject.ContainsKey($parameterName))
                                     {
                                        if($valueArray.Length -gt 1)
                                        {
                                           $runObject.$parameterName = $valueArray
                                        }
                                        elseif($valueArray.Length -eq 1)
                                        {
                                           $runObject.$parameterName = $valueArray[0]
                                        }
                                     }
                                     else
                                     {
                                        if($valueArray.Length -gt 1)
                                        {
                                           $runObject.Add($parameterName, $valueArray)
                                        }
                                        elseif($valueArray.Length -eq 1)
                                        {
                                           $runObject.Add($parameterName, $valueArray[0])
                                        }
                                     }
                                     $runObject.Remove("indexForInteractive")
                                  }
                              }
                           }
                        }
					}
					else 
					{
						Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $parameterValue.GetType().Name, $parameterName))
						return $false							
					}
				}
				elseif($itemForProcess.parameterNeedInput)
				{   
                    $tempRunObjects = @()  #pass to Start-InteractiveProcessForCredential, each element contains only one single server ip
                    $indexForInteractive = 0
                    foreach($runObject in $runObjects)
                    {
                       $runObject.Add("indexForInteractive", $indexForInteractive)
                       foreach($ip in $runObject.Server)
                       {
                          $temp = @{}
                          $temp.Add("indexForInteractive", $indexForInteractive)
                          $temp.Add("Server", $ip)
                          $tempRunObjects += $temp
                       }
                       $indexForInteractive++
                    }
					Start-InteractiveProcessForCredential -runObjects -runObjects ([ref]$tempRunObjects)
                    foreach($runObject in $runObjects)
                    {
                       $valueArray = @()
                       foreach($temp in $tempRunObjects)
                       {
                          if($temp.indexForInteractive -eq $runObject.indexForInteractive)
                          {
                             $valueArray += $temp.$parameterName
                          }
                       }
                       if($runObject.ContainsKey($parameterName))
                       {
                          if($valueArray.Length -gt 1)
                          {
                             $runObject.$parameterName = $valueArray
                          }
                          elseif($valueArray.Length -eq 1)
                          {
                             $runObject.$parameterName = $valueArray[0]
                          }
                       }
                       else
                       {
                          if($valueArray.Length -gt 1)
                          {
                             $runObject.Add($parameterName, $valueArray)
                          }
                          elseif($valueArray.Length -eq 1)
                          {
                             $runObject.Add($parameterName, $valueArray[0])
                          }
                       }
                       $runObject.Remove("indexForInteractive")
                    }
				}
			}				
			else
			{
				if($parameterValue -ne $null) 
				{
					$isInt = ($itemForProcess.parameterSupportInt -ne $null) -and  ($itemForProcess.parameterSupportInt) -and  ($parameterValue.GetType().Name -match "Int")
					if($parameterValue.GetType().Name -eq "String" -or $isInt)
					{
                        $tValue = $parameterValue
                        $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $parameterValue -returnValue ([ref]$tValue)
                        if(!$isvalid)
                        {
                            return $false
                        }	
						For($i = 0; $i -lt $runObjects.Length; $i++)
						{	
							$runObjects[$i].Add($parameterName, $tValue)								
						}
					}
					elseif($parameterValue.GetType().Name -eq "PSCustomObject")
					{                    
						For($i = 0; $i -lt $runObjects.Length; $i++)
						{
							$tempvalue = $parameterValue.$parameterName	 
                            $tValue = $tempvalue
                            $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $tempvalue -returnValue ([ref]$tValue)
                            if(!$isvalid)
                            {
                                return $false
                            }
                            $runObjects[$i].Add($parameterName, $tValue)
						}
					}
					elseif($parameterValue.GetType().Name -eq "object[]")
					{
                        $tempValue = @()
                        foreach($pvalue in $parameterValue){
                            if($pvalue -ne $null){
                               $tempValue += $pvalue
                            }
                        }
						if($runObjects.Length -ne $tempValue.Length)
						{
							Write-Verbose $([string]::Format($(Get-Message("MSG_PARAMETER_NOTMATCH")) ,$parameterName))
						}
                   
                        $runObjectsForInteractive = @() #collects the runobject servers which need parameter interactive process
						[int]$i = 0
                        [int]$indexForInteractive = 0
						For(; ($i -lt $parameterValue.Length) -and ($i -lt $runObjects.Length) ; $i++)
						{
                          if($parameterValue[$i] -eq $null)
                          {
                             if($itemForProcess.parameterDefaultValue -ne $null)
                             {
                                if($runObjects[$i].ContainsKey($parameterName))
                                {
                                   $runObjects[$i].$parameterName = $itemForProcess.parameterDefaultValue
                                }
                                else
                                {
                                   $runObjects[$i].Add($parameterName, $itemForProcess.parameterDefaultValue)
                                }
                             }
                             elseif($itemForProcess.parameterNeedInput)
                             {
                                   $runObjects[$i].Add("indexForInteractive", $indexForInteractive)
                                   $runObjectsForInteractive += $runObjects[$i]
                                   $indexForInteractive = $indexForInteractive + 1
                             }
                          }
                          else
                          {
                            $isInt = ($itemForProcess.parameterSupportInt -ne $null) -and  ($itemForProcess.parameterSupportInt) -and  ($parameterValue[$i].GetType().Name -match "Int")
							if(($parameterValue[$i].GetType().Name -eq "String"  -or $isInt) )
							{
								$tempvalue = $parameterValue[$i]
                                $tValue = $tempvalue
                                $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $tempvalue -returnValue ([ref]$tValue)
                                if(!$isvalid)
                                {
                                    return $false
                                }
								$runObjects[$i].Add($parameterName, $tValue)									
							}
							elseif($parameterValue[$i].GetType().Name -eq "PSCustomObject" )
							{ 
								$tempvalue = $parameterValue[$i].$parameterName		
                                $tValue = $tempvalue
                                $isvalid = Check-ParameterValidity -paraData $itemForProcess -paraValue $tempvalue -returnValue ([ref]$tValue)
                                if(!$isvalid)
                                {
                                    return $false
                                }
								$runObjects[$i].Add($parameterName, $tValue)
							}
							#the type for this parameter is not String/PSCustomObject/Array/Int/ValueType
							else 
							{
								Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $parameterValue[$i].GetType().Name, $parameterName))
                                return $false							
							}
                          }
						}
									
						#some servers do not have para values
                        if($i -lt $runObjects.Length)
						{
							if($itemForProcess.parameterDefaultValue -ne $null)
							{
								For(; $i -lt $runObjects.Length; $i++)
								{									
									$runObjects[$i].Add($parameterName, $itemForProcess.parameterDefaultValue)
								}
							}
							elseif($itemForProcess.parameterNeedInput)
							{
								For(; $i -lt $runObjects.Length; $i++)
								{									
                                    $runObjects[$i].Add("indexForInteractive", $indexForInteractive)
                                    $runObjectsForInteractive += $runObjects[$i]
                                    $indexForInteractive = $indexForInteractive + 1
								}
							}
						}
                        if($runObjectsForInteractive.Length -gt 0 -and $itemForProcess.parameterNeedInput)
                        {
                           if($Force -eq $True)
                           {
                              $serverCount = $runObjects.Length
                              $paraCount = $runObjects.Length - $runObjectsForInteractive.Length
							  Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_NOTMATCH")) ,$parameterName))
							  return $false
                           }
                           else
                           {
                              $tempRunObjects = @()  #pass to Start-InteractiveProcess, each element contains only one single server ip
                              foreach($runObject in $runObjectsForInteractive)
                              {
                                 foreach($ip in $runObject.Server)
                                 {
                                    $temp = @{}
                                    $temp.Add("indexForInteractive", $runObject.indexForInteractive)
                                    $temp.Add("Server",$ip)
                                    $tempRunObjects += $temp
                                 }
                              }

							  Start-InteractiveProcess -itemForProcess $itemForProcess -runObjects ([ref]$tempRunObjects)

                              foreach($runObject in $runObjects)
                              {
                                  if($runObject.ContainsKey("indexForInteractive"))
                                  {
                                     $valueArray = @()
                                     foreach($temp in $tempRunObjects)
                                     {
                                        if($temp.indexForInteractive -eq $runObject.indexForInteractive)
                                        {
                                           $valueArray += $temp.$parameterName
                                        }
                                     }
                                     if($runObject.ContainsKey($parameterName))
                                     {
                                        if($valueArray.Length -gt 1)
                                        {
                                           $runObject.$parameterName = $valueArray
                                        }
                                        elseif($valueArray.Length -eq 1)
                                        {
                                           $runObject.$parameterName = $valueArray[0]
                                        }
                                     }
                                     else
                                     {
                                        if($valueArray.Length -gt 1)
                                        {
                                           $runObject.Add($parameterName, $valueArray)
                                        }
                                        elseif($valueArray.Length -eq 1)
                                        {
                                           $runObject.Add($parameterName, $valueArray[0])
                                        }
                                     }
                                     $runObject.Remove("indexForInteractive")
                                  }
                              }
                           }
                        }
					}
					#the type for this parameter is not String/PSCustomObject/Array/Int/ValueType
					else 
					{
						#$validateInputFlag = $false
						Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $parameterValue.GetType().Name, $parameterName))
						return $false							
					}
				}
					
				elseif($itemForProcess.parameterDefaultValue -ne $null)
				{
					for($i = 0; $i -lt $runObjects.Length; $i++)
					{
						$runObjects[$i].Add($parameterName, $itemForProcess.parameterDefaultValue)
					}
				}
				elseif($itemForProcess.parameterNeedInput)
				{   
                    $tempRunObjects = @()  #pass to Start-InteractiveProcess, each element contains only one single server ip
                    $indexForInteractive = 0
                    foreach($runObject in $runObjects)
                    {
                       $runObject.Add("indexForInteractive", $indexForInteractive)
                       foreach($ip in $runObject.Server)
                       {
                          $temp = @{}
                          $temp.Add("indexForInteractive", $indexForInteractive)
                          $temp.Add("Server", $ip)
                          $tempRunObjects += $temp
                       }
                       $indexForInteractive++
                    }
					Start-InteractiveProcess -itemForProcess $itemForProcess -runObjects ([ref]$tempRunObjects)
                    foreach($runObject in $runObjects)
                    {
                       $valueArray = @()
                       foreach($temp in $tempRunObjects)
                       {
                          if($temp.indexForInteractive -eq $runObject.indexForInteractive)
                          {
                             $valueArray += $temp.$parameterName
                          }
                       }
                       if($runObject.ContainsKey($parameterName))
                       {
                          if($valueArray.Length -gt 1)
                          {
                             $runObject.$parameterName = $valueArray
                          }
                          elseif($valueArray.Length -eq 1)
                          {
                             $runObject.$parameterName = $valueArray[0]
                          }
                       }
                       else
                       {
                          if($valueArray.Length -gt 1)
                          {
                             $runObject.Add($parameterName, $valueArray)
                          }
                          elseif($valueArray.Length -eq 1)
                          {
                             $runObject.Add($parameterName, $valueArray[0])
                          }
                       }
                       $runObject.Remove("indexForInteractive")
                    }
				}
			}
		}
	}	    
	
    $tempRunObjects = @() #contains all the server para from RunObjects, and each element has only one single server ip
    foreach($runObject in $runObjects)
    {
       for([int]$i = 0; $i -lt $runObject.Server.Count; $i++)
       {
           $temp = @{}
           foreach($key in $runObject.Keys)
           {
              if($key -eq "InputServer")
              {
                 if($runObject[$key].GetType().Name -eq "object[]")
                 {
                    $temp.Add("Server", $runObject[$key][$i])
                 }
                 else
                 {
                    $temp.Add("Server", $runObject[$key])
                 }
              }
              elseif($key -ne "Server")  #discard server ips not consistant with input servers
              {
                 if($runObject[$key].GetType().Name -eq "object[]")
                 {
                    $temp.Add($key, $runObject[$key][$i])
                 }
                 else
                 {
                    $temp.Add($key, $runObject[$key])
                 }
              }
           }
           $tempRunObjects += $temp
       }
    }
    $runObjects = $tempRunObjects

	$arrayAfterProcess.Value = $runObjects
	if($validateInputFlag -and ($runObjects.Length -eq 0))
	{
		Write-Error $(Get-Message("MSG_INVALID_USE"))
		return $false		
	}
	return $validateInputFlag
}

<#--------------------------- cmdlets starts ---------------------------#>

function Add-HPiLOSSORecord{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("NETWORK", "IMPORT_FROM_NETWORK", "IMPORT_CERTIFICATE")] $SSOInputType,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SSOInputValue
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "SSOInputType", "SSOInputValue")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }   
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SSOInputType"; parameterValue = $SSOInputType; parameterNeedInput = $true;
        parameterValidateValues = @{"NETWORK" = "NETWORK"; "IMPORT_FROM_NETWORK" = "IMPORT_FROM_NETWORK"; "IMPORT_CERTIFICATE" = "IMPORT_CERTIFICATE"};
        parameterAcceptValidValues = "NETWORK, IMPORT_FROM_NETWORK, IMPORT_CERTIFICATE"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SSOInputValue" ;parameterValue = $SSOInputValue;parameterNeedInput = $true }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
            $currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currSSOInputType = $obj.SSOInputType
            $currSSOInputValue = $obj.SSOInputValue
			if($currSSOInputType -eq "NETWORK"){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SSO_INFO MODE="write">
            <SSO_SERVER NAME=$(Add-Quotes -InString $currSSOInputValue) />
        </SSO_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			elseif($currSSOInputType -eq "IMPORT_FROM_NETWORK"){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SSO_INFO MODE="write">
            <SSO_SERVER IMPORT_FROM=$(Add-Quotes -InString $currSSOInputValue) />
        </SSO_INFO>
    </LOGIN>
</RIBCL>
"@      
			}
			elseif($currSSOInputType -eq "IMPORT_CERTIFICATE"){
                if(-not $currSSOInputValue.Contains("-BEGIN CERTIFICATE-")){
                    $currSSOInputValue = "-----BEGIN CERTIFICATE-----`n" + $currSSOInputValue
                }
                if(-not $currSSOInputValue.Contains("-END CERTIFICATE-")){
                    $currSSOInputValue = $currSSOInputValue + "`n-----END CERTIFICATE-----" 
                }
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SSO_INFO MODE="write">
            <IMPORT_CERTIFICATE>
$currSSOInputValue
            </IMPORT_CERTIFICATE>
        </SSO_INFO>
    </LOGIN>
</RIBCL>
"@      	}
			$obj | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Add-HPiLOSSORecord`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}	
}

function Add-HPiLOUser{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewUsername,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewUserLogin,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewPassword,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [validateSEt("Yes","Y","No","N")] $AdminPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [validateSEt("Yes","Y","No","N")] $RemoteConsPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [validateSEt("Yes","Y","No","N")] $ResetServerPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [validateSEt("Yes","Y","No","N")] $VirtualMediaPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [validateSEt("Yes","Y","No","N")] $ConfigILOPriv

    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "NewUsername", "NewUserLogin", "NewPassword", "AdminPriv", "RemoteConsPriv", "ResetServerPriv", "VirtualMediaPriv", "ConfigILOPriv")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }  
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }   
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewUsername" ;parameterValue = $NewUsername;parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewUserLogin" ;parameterValue = $NewUserLogin;parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewPassword" ;parameterValue = $NewPassword;parameterNeedInput = $true ;parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdminPriv" ;parameterValue = $AdminPriv; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"}; 
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj	
	$tmpObj = @{parameterName = "RemoteConsPriv" ;parameterValue = $RemoteConsPriv; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"}; 
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ResetServerPriv" ;parameterValue = $ResetServerPriv; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"}; 
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VirtualMediaPriv" ;parameterValue = $VirtualMediaPriv; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"}; 
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ConfigILOPriv" ;parameterValue = $ConfigILOPriv; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"}; 
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currNewUsername = $obj.NewUsername 
            $currNewUserLogin = $obj.NewUserLogin
            $currNewPassword = $obj.NewPassword
            if($obj.AdminPriv -ne $null ){
                $currAdminPriv = $obj.AdminPriv
            }
            if($obj.RemoteConsPriv -ne $null ){
                $currRemoteConsPriv = $obj.RemoteConsPriv
            }
            if($obj.ResetServerPriv -ne $null ){
                $currResetServerPriv = $obj.ResetServerPriv
            }
            if($obj.VirtualMediaPriv -ne $null ){
                $currVirtualMediaPriv = $obj.VirtualMediaPriv
            }
            if($obj.ConfigILOPriv -ne $null ){
                $currConfigILOPriv = $obj.ConfigILOPriv
            }
            
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <USER_INFO MODE="write">
            <ADD_USER USER_NAME=$(Add-Quotes -InString $currNewUsername) USER_LOGIN=$(Add-Quotes -InString $currNewUserLogin) PASSWORD=$(Add-Quotes -InString $currNewPassword)>`n
"@
			if($currAdminPriv -eq "Yes"){
				$send = $send + @"
                <ADMIN_PRIV value ="Yes"/>`n
"@
			}
			if($currRemoteConsPriv -eq "Yes"){
				$send = $send + @"
                <REMOTE_CONS_PRIV value ="Yes"/>`n
"@
			}
			if($currResetServerPriv -eq "Yes"){
				$send = $send + @"
                <RESET_SERVER_PRIV value ="Yes"/>`n
"@
			}
			if($currVirtualMediaPriv -eq "Yes"){
				$send = $send + @"
                <VIRTUAL_MEDIA_PRIV value ="Yes"/>`n
"@
			}
			if($currConfigILOPriv -eq "Yes"){
				$send = $send + @"
                <CONFIG_ILO_PRIV value ="Yes"/>`n
"@
			}
			$send = $send + @"
            </ADD_USER>
        </USER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}      
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Add-HPiLOUser`n" + $send
            Write-Output $send
        }
        else
        {      
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
			$errorWarningIncremented = 0
            try
            {
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Clear-HPiLOAHSData{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }	
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
    <RIB_INFO MODE="write">
        <AHS_CLEAR_DATA/>
    </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Clear-HPiLOAHSData`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
			$errorWarningIncremented = 0
            try
            {
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
<RIBCL Version="2.22">
' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Clear-HPiLOEventLog{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }    
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }   
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <CLEAR_EVENTLOG/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Clear-HPiLOEventLog`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
			$errorWarningIncremented = 0
            try
            {
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret = $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Clear-HPiLOIML{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }	
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="write">
            <CLEAR_IML/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Clear-HPiLOIML`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            $errorWarningIncremented = 0
			try
            {
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Clear-HPiLOPowerOntime{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <CLEAR_SERVER_POWER_ON_TIME />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Clear-HPiLOPowerOntime`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
<RIBCL Version="2.22">
' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Convert-OLiPHRIBCLToPSObject{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false, ValueFromPipeline=$true)] $Command
    )
    $outputList = @()
    $pipedinput = $input
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    if(($pipedinput.get(0) -eq "") -or ($pipedinput.get(0) -eq $null))
    {
        $Final = $Command
    }
    else
    {
        $Final = $pipedinput
    }
    foreach($ret in $Final)
    {
        $index = $ret.IndexOf("<?xml")
        $first = $ret.Remove($index) #addon params (command/method/tag/bay/host/ip)
        $ret=$ret.Remove(0, $index) #ret is RIBCL
        $first = $first.trimend("`n")
        $lines = $first.split("`n")
        $bay = $lines[0]
        $ip = $lines[1].trim()
        $hostname = $lines[2].trim()
        $command = $lines[3].trim()
		if($lines.length -lt 6)
		{
		  if($lines.length -eq 4)
		  {
		    $method = ""
            $tag = ""
		  }
		  else
		  {
		    $method = $lines[4].trim()
		    $tag = ""
		  }
		}
        else
        {
          $method = $lines[4].trim()
          $tag = $lines[5].trim()
        }
        $verb = $command.split("-")[0]
        $noun = $command.split("-")[1]
        try{
            $ret = $ret.Replace('<?xml version="1.0"?>', "")
            $ret = $ret.Replace('</RIBCL>', "")
            $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
            $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
            if($command -ieq "Get-HPiLOSecurityMessage" -and $ret.contains("]]>"))
            {
               $endstring = $ret.Substring($ret.LastIndexOf("]]>"))
               $startstring = $ret.Substring(0, $ret.LastIndexOf("]]>"))
               $newstring = Remove-CDATAChars -orgString $startstring
               if($newstring -ne $startstring)
               {
                  Write-Warning $(Get-Message("MSG_SECURITYMESSAGE_REMOVECHARS"))
               }
               $ret = $newstring + $endstring
            }
            $ret = Remove-SpecialChars -strRet $ret
            $xml = [xml] $ret
            $tmpObj = New-Object PSObject 
            $tmpObj | Add-Member NoteProperty "BAY" $bay       
            $tmpObj | Add-Member NoteProperty "IP" $ip
            $tmpObj | Add-Member NoteProperty "HOSTNAME" $hostname
            $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
            $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
          
            Get-Status $xml $tmpObj
            if($tmpObj.STATUS_TYPE -ne "ERROR")
            {
                try
                {
                    if($verb -eq "Get")
                    {
                        if($noun -eq "HPiLOFan" -or $noun -eq "HPiLOFirmwareInfo" -or $noun -eq "HPiLOMemoryInfo" -or $noun -eq "HPiLOPowerSupply" -or $noun -eq "HPiLOProcessor" -or $noun -eq "HPiLODriveInfo" -or $noun -eq "HPiLOStorageController" -or $noun -eq "HPiLOTemperature" -or $noun -eq "HPiLOVRM")
                        {
                                $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.$tag).OuterXml)
                            }
                        elseif($noun -eq "HPiLOHostPowerMicroVersion")
                        {
                                $a = [string](($xml.RIBCL.GET_HOST_PWR_MICRO_VER.$tag).OuterXml)
                            }
                        elseif($noun -eq "HPiLOProfileApplyResults")
                        {
                                $a = [string](($xml.RIBCL.PROFILE_APPLY_GET_RESULTS.$tag).OuterXml)
                            }
                        elseif($noun -eq "HPiLONICInfo")
                        {
                                if($lines.Length -gt 6)
                                {
                                    $type = $lines[6]
                                }
                                else
                                {
                                    $type = $null
                                }
                                if ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFORMATION -ne $null)
                                {
                                    $Nic_Information = "NIC_INFORMATION"
                                }
                                elseif ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null)
                                {
                                    $Nic_Information = "NIC_INFOMATION"
                                }
                                $nicObj = New-Object PSObject
                                $nicTypes = ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.$Nic_Information | Get-Member -MemberType Property).NAME
                                foreach($typeVar in $nicTypes)
                                {
                                    $nicObj | Add-Member NoteProperty $typeVar ""
                                }
                                $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.$Nic_Information).OuterXml)
                                $requiredValues = Add-LevelWithValueAndOther2 $a "$Nic_Information"
                            }
                        elseif($noun -eq "HPiLOServerName")
                        {       
                                if($lines.Length -gt 6 -and ($noun -ne "HPiLONICInfo" -and $noun -ne "HPiLOServerInfo"))
                                {
                                    for($i=6; $i -lt $lines.Length; $i++)
                                    {
                                       $tmpObj | Add-Member NoteProperty $lines[$i] ""
                                    }
                                }
                                if($xml.RIBCL.SERVER_NAME -ne $null)
                                {
                                    $a = [string](($xml.RIBCL.SERVER_NAME).OuterXml)
                                    $objForValues = New-Object PSObject
                                    $requiredValues = Add-LevelWithValueAndOther $a "SERVER_NAME"
                                    $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                    foreach($item in $member){
                                        $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                    }
                                }
                                if($xml.RIBCL.SERVER_OSNAME -ne $null)
                                {
                                    $a = [string](($xml.RIBCL.SERVER_OSNAME).OuterXml)
                                    $objForValues = New-Object PSObject
                                    $requiredValues = Add-LevelWithValueAndOther $a "SERVER_OSNAME"
                                    $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                    foreach($item in $member){
                                        $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                    }
                                }
                                if($xml.RIBCL.SERVER_OSVERSION -ne $null)
                                {
                                    $a = [string](($xml.RIBCL.SERVER_OSVERSION).OuterXml)
                                    $objForValues = New-Object PSObject
                                    $requiredValues = Add-LevelWithValueAndOther $a "SERVER_OSVERSION"
                                    $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                    foreach($item in $member){
                                        $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                    }
                                }
                            }
                        elseif($noun -eq "HPiLOCertificateSigningRequest")
                        {
                            $a = [string](($xml.RIBCL).OuterXml)
                        }
                        elseif($noun -eq "HPiLOServerInfo")
                        {
                            if($lines.Length -gt 6)
                            {
                                $currCategory = $lines[6]
                            }
                            else
                            {
                                $currcategory = "ALL"
                            }

                            if($currCategory -eq "FANS"){
                                $method = "Add-LevelNoConcat"
                                $tag = "FANS"
                                $fieldName = "FAN"
                            }
                            if($currCategory -eq "TEMPERATURES"){
                                $method = "Add-LevelNoConcat"
                                $tag = "TEMPERATURE"
                                $fieldName = "TEMP"
                            }
                            if($currCategory -eq "POWER_SUPPLIES"){
                                $method = "Add-LevelWithValueAndOther2"
                                $tag = "POWER_SUPPLIES"
                                $fieldName = "-"
                            }
                            if($currCategory -eq "VRM"){
                                $method = "Add-LevelNoConcat"
                                $tag = "VRM"
                                $fieldName = "VRM"
                            }
                            if($currCategory -eq "PROCESSORS"){
                                $method = "Add-LevelWithValueAndOther"
                                $tag = "PROCESSORS"
                                $fieldName = "PROCESSOR"
                            }
                            if($currCategory -eq "MEMORY"){
                                $method = "Add-LevelWithValueAndOther2"
                                $tag = "MEMORY"
                                $fieldName = "MEMORY"
                            }
                            if($currCategory -eq "NIC_INFORMATION"){
                                $method = "Add-LevelWithValueAndOther2"
                                $tag = "NIC_INFORMATION"
                                $fieldName = "NICS"
                            }
                            if($currCategory -eq "STORAGE"){
                                $method = "Add-LevelWithValueAndOther2"
                                $tag = "STORAGE"
                                $fieldName = "STORAGE"
                            }
                            if($currCategory -eq "DRIVE"){
                                $method = "Add-LevelWithValueAndOther2"
                                $tag = "DRIVES"
                                $fieldName = "DRIVE"
                            }
                            if($currCategory -eq "HEALTH_AT_A_GLANCE"){
                                $method = "Add-LevelWithValueAndOther"
                                $tag = "HEALTH_AT_A_GLANCE"
                                $fieldName = "HEALTH_STATUS"
                            }
                            if($currCategory -eq "FIRMWARE_VERSIONS"){
                                $method = "Add-LevelNoConcat"
                                $tag = "FIRMWARE_INFORMATION"
                                $fieldName = "FIRMWARE_VERSIONS"
                            }


                            if($currCategory -ne "ALL")
                                {
                                    # converting to string for passing as parameter to function Add-Level
                                    if($tag -eq "NIC_INFORMATION" -and $xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null) #ilo RIBCL bug
                                    {
                                        $a = [string]$xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION.OuterXml
                                        $tag = "NIC_INFOMATION"
                                        $fieldName = "NIC_INFOMATION"
                                    }
                                    else
                                    {
                                        $a = [string]$xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.($tag).OuterXml
                                    }
                                    $requiredValues = &($method) $a $tag
                                    if($tag -eq "FANS" -or $tag -eq "TEMPERATURE" -or $tag -eq "PROCESSORS" -or $tag -eq "VRM" -or $tag -eq "DRIVES")
                                    {
                                        $tmpObj | Add-Member NoteProperty $fieldName ""
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        foreach($item in $member){
                                            $tmpObj.$fieldName = $requiredValues.($item.Name)
                                        }
                                    }
                                    elseif($tag -eq "FIRMWARE_INFORMATION")
                                    {
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        $firmwareInfo = @()
                                        foreach($item in $member){
                                            #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                            $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                            $requiredValues.($item.Name) | Add-Member "Index" $index
                                            $firmwareInfo += $requiredValues.($item.Name)
                                        }
                                        if($firmwareInfo.Length -eq 1)
                                        {
                                           $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                                        }
                                        elseif($firmwareInfo.Length -gt 1)
                                        {
                                           $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                                           $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                                        }
                                    }
                                    else
                                    {
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        foreach($item in $member)
                                        {
                                            if($tag -eq "STORAGE" -and $item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                                            }
                                            elseif($tag -eq "MEMORY" -and $item.Name -ieq "MEMORY_COMPONENTS" -and $requiredValues.($item.Name).MEMORY_COMPONENT -ne $null)
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                                            }
                                            else
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    $methodList = @("Add-LevelWithValueAndOther", "Add-LevelNoConcat", "Add-LevelNoConcat", "Add-LevelWithValueAndOther2", "Add-LevelNoConcat", "Add-LevelWithValueAndOther", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelNoConcat" )
                                    $tagList =  @("HEALTH_AT_A_GLANCE", "FANS", "TEMPERATURE", "POWER_SUPPLIES", "VRM", "PROCESSORS", "MEMORY", "NIC_INFORMATION", "DRIVES", "STORAGE", "FIRMWARE_INFORMATION")
                                    $fieldNameList = @("HEALTH_STATUS", "FAN", "TEMP", "POWER_SUPPLY", "VRM", "PROCESSOR", "MEMORY", "NICInfo", "DRIVE", "STORAGE", "FIRMWARE_VERSION")
                                    for($i=0; $i-lt$tagList.Length;$i++)
                                    {
                                        # converting to string for passing as parameter to function Add-Level
                                        if($tagList[$i] -eq "NIC_INFORMATION" -and $xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null) #ilo RIBCL bug
                                        {
                                            $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION).OuterXml)
                                            $tagList[$i] = "NIC_INFOMATION"
                                            $fieldNameList[$i] = "NIC_INFOMATION"
                                        }
                                        else
                                        {
                                            $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.($tagList[$i])).OuterXml)
                                        }

                                        if($a -ne "")
                                        {
                                            $requiredValues = &($methodList[$i]) $a $tagList[$i]
                                            if($tagList[$i] -eq "FANS" -or $tagList[$i] -eq "TEMPERATURE" -or $tagList[$i] -eq "PROCESSORS" -or $tagList[$i] -eq "VRM" -or $tag -eq "DRIVES")
                                            {
                                        	    $tmpObj | Add-Member NoteProperty $fieldNameList[$i] ""
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                foreach($item in $member){
                                                    $tmpObj.($fieldNameList[$i]) = $requiredValues.($item.Name)
                                                }
                                            }
                                            elseif($tagList[$i] -eq "FIRMWARE_INFORMATION")
                                            {
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                $firmwareInfo = @()
                                                foreach($item in $member){
                                                    #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                                    $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                                    $requiredValues.($item.Name) | Add-Member "Index" $index
                                                    $firmwareInfo += $requiredValues.($item.Name)
                                                }
                                                if($firmwareInfo.Length -eq 1)
                                                {
                                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                                                }
                                                elseif($firmwareInfo.Length -gt 1)
                                                {
                                                   $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                                                }                                               
                                            }
                                            else
                                            {
                                                $fieldobj = New-Object PSObject
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                foreach($item in $member)
                                                {
                                                    if($tagList[$i] -eq "STORAGE" -and $item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                                                    }
                                                    elseif($tagList[$i] -eq "MEMORY" -and $item.Name -ieq "MEMORY_COMPONENTS" -and $requiredValues.($item.Name).MEMORY_COMPONENT -ne $null)
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                                                    }
                                                    else
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name)
                                                    }
                                                }
                                                $tmpObj | Add-Member $fieldNameList[$i] $fieldobj
                                            }
                                        }
                                    }

                                }

                                if($tmpObj.MEMORY.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY -ne $null)
                                {
                                    $orgobj=$tmpObj.MEMORY.MEMORY_DETAILS
                                    $memArray= @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem= New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber=$p.Name.Substring(4)
                                            $cpudata=$orgobj.$($p.Name)
                                            if($cpudata.GetType().Name -eq "Object[]")
                                            {
                                               $newcpudata =@()
                                               for($i=0;$i -lt $cpudata.count;$i++)
                                               {                                          
                                                  foreach($cpu in $cpudata[$i])
                                                  {
                                                      $cpuobject = New-Object PSobject
                                                      foreach($cpuperpty in $cpu| Get-Member)
                                                      {                                                         
                                                         if($cpuperpty.MemberType -eq "NoteProperty")
                                                         {
                                                            if($cpu.($cpuperpty.Name).GetType().Name -eq "PSCustomObject")
                                                            {
                                                                
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name).NUMBER
                                                            }
                                                            else
                                                            {
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name)
                                                            }
                                                         } 
                                                      }
                                                      $newcpudata += $cpuobject
                                                  }                                             
                                               }
                                            }
                                            $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$newcpudata} 
                                            $memArray+=$cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY.MEMORY_DETAILS = $memArray

                                    $orgobj=$tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY
                                    $memArray= @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem= New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber=$p.Name.Substring(4)
                                            if($cpudata.GetType().Name -eq "Object[]")
                                            {
                                               $newcpudata =@()
                                               for($i=0;$i -lt $cpudata.count;$i++)
                                               {                                          
                                                  foreach($cpu in $cpudata[$i])
                                                  {
                                                      $cpuobject = New-Object PSobject
                                                      foreach($cpuperpty in $cpu| Get-Member)
                                                      {                                                         
                                                         if($cpuperpty.MemberType -eq "NoteProperty")
                                                         {
                                                            if($cpu.($cpuperpty.Name).GetType().Name -eq "PSCustomObject")
                                                            {
                                                                
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name).NUMBER
                                                            }
                                                            else
                                                            {
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name)
                                                            }
                                                         } 
                                                      }
                                                      $newcpudata += $cpuobject
                                                  }                                             
                                               }
                                            }
                                            $cpuItem = New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$newcpudata} 
                                            $memArray+=$cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY = $memArray
                                }
                                elseif($tmpObj.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY_DETAILS_SUMMARY -ne $null)
                                {
                                    $orgobj = $tmpObj.MEMORY_DETAILS
                                    $memArray = @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem = New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber = $p.Name.Substring(4)
                                            $cpudata = $orgobj.$($p.Name)
                                            if($cpudata.GetType().Name -eq "Object[]")
                                            {
                                               $newcpudata =@()
                                               for($i=0;$i -lt $cpudata.count;$i++)
                                               {                                          
                                                  foreach($cpu in $cpudata[$i])
                                                  {
                                                      $cpuobject = New-Object PSobject
                                                      foreach($cpuperpty in $cpu| Get-Member)
                                                      {                                                         
                                                         if($cpuperpty.MemberType -eq "NoteProperty")
                                                         {
                                                            if($cpu.($cpuperpty.Name).GetType().Name -eq "PSCustomObject")
                                                            {
                                                                
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name).NUMBER
                                                            }
                                                            else
                                                            {
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name)
                                                            }
                                                         } 
                                                      }
                                                      $newcpudata += $cpuobject
                                                  }                                             
                                               }
                                            }
                                            $cpuItem = New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$newcpudata} 
                                            $memArray += $cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY_DETAILS = $memArray

                                    $orgobj = $tmpObj.MEMORY_DETAILS_SUMMARY
                                    $memArray = @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem = New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber = $p.Name.Substring(4)
                                            $cpudata = $orgobj.$($p.Name)
                                            if($cpudata.GetType().Name -eq "Object[]")
                                            {
                                               $newcpudata =@()
                                               for($i=0;$i -lt $cpudata.count;$i++)
                                               {                                          
                                                  foreach($cpu in $cpudata[$i])
                                                  {
                                                      $cpuobject = New-Object PSobject
                                                      foreach($cpuperpty in $cpu| Get-Member)
                                                      {                                                         
                                                         if($cpuperpty.MemberType -eq "NoteProperty")
                                                         {
                                                            if($cpu.($cpuperpty.Name).GetType().Name -eq "PSCustomObject")
                                                            {
                                                                
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name).NUMBER
                                                            }
                                                            else
                                                            {
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name)
                                                            }
                                                         } 
                                                      }
                                                      $newcpudata += $cpuobject
                                                  }                                             
                                               }
                                            }
                                            $cpuItem = New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$newcpudata} 
                                            $memArray += $cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY_DETAILS_SUMMARY = $memArray
                                }
                        }
                        elseif($noun -eq "HPiLOHealthSummary")
                        {
                            $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.HEALTH_AT_A_GLANCE).OuterXml)
                        }
                        else #non-special case
                        {
                            $a = [string](($xml.RIBCL.$tag).OuterXml)
                        }
                        # deal with output
                        if($noun -ne "HPiLOServerName" -and $noun -ne "HPiLOServerInfo")
                        {
                            $objForValues = New-Object PSObject
                            if($method -eq "Add-LevelNoConcat")
                            {
                                $requiredValues = Add-LevelNoConcat $a $tag
                            }
                            elseif($method -eq "Add-LevelWithValueAndOther2")
                            {
                                if($noun -ne "HPiLONICInfo")
                                { 
                                    $requiredValues = Add-LevelWithValueAndOther2 $a $tag
                                }
                            }
                            elseif($method -eq "Add-LevelWithValueAndOther")
                            {
                                $requiredValues = Add-LevelWithValueAndOther $a $tag
                            }
                            elseif($method -eq "Add-LevelProfileApplyGetResults")
                            {
                                $requiredValues = Add-LevelProfileApplyGetResults $a $tag
                            }
                            if($requiredValues -ne $null)
                            {
                                 if($lines.Length -gt 6 -and ($noun -ne "HPiLONICInfo" -and $noun -ne "HPiLOServerInfo"))
                                 {
                                     for($i=6; $i -lt $lines.Length; $i++)
                                     {
                                          $tmpObj | Add-Member NoteProperty $lines[$i] ""
                                     }
                                 }
                            }
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            if($noun -eq "HPiLONICInfo")
                            {
                                if($type -eq "NIC")
                                {
                                    $tmpObj | Add-Member "NIC" $requiredValues."NIC"
                                }
                                elseif($type -match "iLO")
                                {
                                    $ilos = @()
                                    $ilos = ($requiredValues | Get-Member -MemberType NoteProperty | ?{$_.Name -match "iLO"}).Name
                                    foreach($mem in $ilos)
                                    {
                                        $tmpObj | Add-Member NoteProperty $mem $requiredValues.$mem
                                    }
                                }
                                else
                                {
                                    $nics = ($requiredValues | Get-Member -MemberType NoteProperty).Name
                                    foreach($mem in $nics)
                                    {
                                        $tmpObj | Add-Member NoteProperty $mem $requiredValues.$mem
                                    }
                                }
                            }
                            elseif($noun -eq "HPiLOPersistentBootOrder")
                            {
                                 $tmpObj | Add-Member -MemberType NoteProperty "DEVICE" $requiredValues.DEVICE.Value
                            }
                            elseif($noun -eq "HPiLOSecurityMessage")
                            {
                              foreach($item in $member){
                                if($item.name -match "#cdata-section"){
                                   if($requiredValues.($item.Name) -ne "" -and $requiredValues.($item.Name) -ne $null)
                                   {
                                      $tmpObj | Add-Member "SECURITY_MSG_TEXT" $requiredValues.($item.Name)
                                   }
                                }
                                else{
                                    $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                }
                              }
                            }
                            elseif($noun -eq "HPiLOUserList")
                            {
                                foreach($item in $member)
                                {
                                   if($requiredValues.USER_LOGIN.GetType().Name -eq "String")
                                   {
                                       $tmpObj | Add-Member $item.Name $requiredValues.USER_LOGIN
                                   }
                                   else
                                   {
                                       $tmpObj | Add-Member $item.Name $requiredValues.USER_LOGIN.USER_LOGIN
                                   }
                                }
                            }
                            elseif($noun -eq "HPiLOHealthSummary" -or $noun -eq "HPiLOSSOSetting")
                            {
                                 foreach($item in $member)
                                 {
                                     if($item.Definition.ToString().split("")[0] -eq "System.Object[]")
                                      {
                                          $propMembers=$null
                                          $temp = New-Object PSObject
                                          for($i=0; $i -lt $requiredValues.($item.Name).Count ; $i++)
                                          {
                                              $propObj = $requiredValues.($item.Name)[$i]
                                              $propName = ($propObj | Get-Member | ?{$_.MemberType -eq "NoteProperty"}).Name                       
                                              $propValue = $propObj.$propName
                                              $propMembers += [ordered]@{$propName.ToUpper()="$propValue"}
                                          }
                                          $temp | Add-Member -NotePropertyMembers $propMembers -TypeName Asset
                                          $tmpObj | Add-Member NoteProperty $item.Name $temp                                    
                                      }
                                      else
                                      {                                                                           
                                          $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                                      }
                                  }
                            }
                            elseif($noun -eq "HPiLOStorageController")
                            {
                                foreach($item in $member)
                                {
                                    if($item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                                    {
                                        $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                                    }
                                    else
                                    {
                                        $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                    }
                                }
                            }
                            elseif($noun -eq "HPiLODriveInfo")
                            {
                                foreach($item in $member){
                                $tmpObj | Add-Member DRIVE $requiredValues.($item.Name)
                                }
                            }
                            elseif($noun -eq "HPiLOFirmwareInfo")
                            {
                                $firmwareInfo = @()
                                foreach($item in $member){
                                #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                $requiredValues.($item.Name) | Add-Member "Index" $index
                                $firmwareInfo += $requiredValues.($item.Name)
                                }
                                if($firmwareInfo.Length -eq 1)
                                {
                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                                }
                                elseif($firmwareInfo.Length -gt 1)
                                {
                                   $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                                }
                            }
                            elseif($noun -eq "HPiLOMemoryInfo")
                            {
                                foreach($item in $member)
                                {
                                    if($item.Name -eq "MEMORY_COMPONENTS")
                                    {
                                        $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                                    }
                                    else
                                    {
                                        $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                    }
                               }
                               if($tmpObj.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY_DETAILS_SUMMARY -ne $null)
                               {
                                   $orgobj=$tmpObj.MEMORY_DETAILS
                                   $memArray= @()
                                   foreach($p in $($orgobj| Get-Member))
                                   {
                                       $cpuItem= New-Object PSobject
                                       if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                       {
                                           $cpunumber=$p.Name.Substring(4)
                                           $cpudata=$orgobj.$($p.Name)
                                           if($cpudata.GetType().Name -eq "Object[]")
                                            {
                                               $newcpudata =@()
                                               for($i=0;$i -lt $cpudata.count;$i++)
                                               {                                          
                                                  foreach($cpu in $cpudata[$i])
                                                  {
                                                      $cpuobject = New-Object PSobject
                                                      foreach($cpuperpty in $cpu| Get-Member)
                                                      {                                                         
                                                         if($cpuperpty.MemberType -eq "NoteProperty")
                                                         {
                                                            if($cpu.($cpuperpty.Name).GetType().Name -eq "PSCustomObject")
                                                            {
                                                                
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name).NUMBER
                                                            }
                                                            else
                                                            {
                                                                $cpuobject | Add-Member $cpuperpty.Name $cpu.($cpuperpty.Name)
                                                            }
                                                         } 
                                                      }
                                                      $newcpudata += $cpuobject
                                                  }                                             
                                               }
                                            }
                                           $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$newcpudata} 
                                           $memArray+=$cpuItem
                                       }
                                   }
                                   $tmpObj.MEMORY_DETAILS = $memArray

                                   $orgobj=$tmpObj.MEMORY_DETAILS_SUMMARY
                                   $memArray= @()
                                   foreach($p in $($orgobj| Get-Member))
                                   {
                                       $cpuItem= New-Object PSobject
                                       if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                       {
                                           $cpunumber=$p.Name.Substring(4)
                                           $cpudata=$orgobj.$($p.Name)
                                           $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                           $memArray+=$cpuItem
                                       }
                                   }
                                   $tmpObj.MEMORY_DETAILS_SUMMARY = $memArray
                               }
                            }
                            elseif($noun -eq "HPiLOHostData")
                            {
                               #change "FIELD" property name to "Value" for each smbios record field item
                               foreach($smbios in $requiredValues.SMBIOS_RECORD)
                               {  
                                  if($smbios.FIELD -ne $null)
                                  {
                                      $fieldArray = @()                                
                                      foreach($fieldValue in $smbios.FIELD)
                                      {
                                          $objForValues = New-Object PSObject
                                          $member = $fieldValue | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                          foreach($item in $member)
                                          {
                                              if($item.Name -ieq "FIELD")
                                              {
                                                  $objForValues | Add-Member NoteProperty "VALUE" $fieldValue.($item.Name)
                                              }
                                              else
                                              {
                                                  $objForValues | Add-Member NoteProperty $item.Name $fieldValue.($item.Name)
                                              }
                                          }
                                          $fieldArray += $objForValues
                                      }
                                      if($fieldArray.count -eq 1)
                                      {
                                          $smbios.FIELD = $fieldArray[0]
                                      }
                                      elseif($fieldArray.count -gt 1)
                                      {
                                          $smbios.FIELD = $fieldArray
                                      }
                                  }
                               }
                               #$member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                               if($type -ne -1)
                               {
                                  $hostData = $requiredValues.SMBIOS_RECORD | ?{$_.Type -eq $Type}
                                  $tmpObj | Add-Member "SMBIOS_RECORD" $hostData
                               }
                               else
                               {
                                  $tmpObj | Add-Member "SMBIOS_RECORD" $requiredValues.SMBIOS_RECORD
                               }
                            }
                            elseif($noun -eq "HPiLOVRM")
                            {
                               foreach($item in $member)
                               {
                                  $tmpObj.VRM = $requiredValues.($item.Name)
                               }
                            }
                            else
                            {
                                foreach($item in $member)
                                {
                                    if($lines.Length -gt 6)
                                    {
                                        if($requiredValues.($item.Name).GetType().Name -eq "String")
                                        {
                                            $reqValue = ($requiredValues.($item.Name)).Replace("`"","")
                                            $tmpObj.($item.Name) = $reqValue
                                        }
                                        else
                                        {
                                            $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                        }
                                    }
                                    else
                                    {   
                                        if(($item.Name).replace("#","").ToUpper() -ne "COMMENT")
                                        {    
                                            if($requiredValues.($item.Name).GetType().Name -eq "String")
                                            {
                                                $reqValue = ($requiredValues.($item.Name)).Replace("`"","")
                                                $tmpObj | Add-member $item.Name $reqValue
                                            }
                                            else
                                            {                                                                  
                                                $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        $outputList += $tmpObj
                    }
                    else # Add-, set-
                    {
                        if($tmpObj.STATUS_TYPE -ne "Error")
                        {
                            $outputList += $tmpObj
                        } 
                    }
                }
                catch
                {                  
                        if($tmpObj.STATUS_TYPE -ne "ERROR")
                        {
                            $outputList += $tmpObj
                        } 
                        $global:error.RemoveAt($global:error.count-1)
                        $errorWarningIncremented = 1
                        $errorCounter++
                        if($tmpObj.STATUS_TYPE -eq "OK"){
                            $tmpObj.STATUS_TYPE = "ERROR"
                        }
                        if($tmpObj.STATUS_MESSAGE -eq "OK"){
                            $tmpObj.STATUS_MESSAGE = "No information available"
                        }
                        else{
                            $tmpObj.STATUS_MESSAGE += "No information available"
                        }
                 }
            }
            else 
            {
              $outputList += $tmpObj
            }
        }
        catch
        {
            $errorWarningIncremented = 1
            $errorCounter++
            if($retobject.runobject.IP -eq ""){
                Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
            }
            elseif($retobject.runobject.Hostname -eq ""){
                Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
            }
            else{
                Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
            }
            $stringerror = ""
            $stringerror += $_.Exception.Message.ToString()
            $stringerror += "`n"
            $stringerror += $_.InvocationInfo.PositionMessage.ToString()
            $stringerror += "`n"
            $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
            $stringerror += "`n"
            $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
            Write-Host $stringerror -ForegroundColor red
        }
    }
    $totalResultCount = $runObjects.Length
    foreach($obj in $outputList)
    {
        if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1)
        {
            $errorCounter++
        }
        elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1)
        {
            $warningCounter++
        }
    }
    Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    return $outputList
}

function Disable-HPiLOERSIRSConnection{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <DISABLE_ERS/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Disable-HPiLOERSIRSConnection`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
<RIBCL Version="2.22">
' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Disable-HPiLOSecurityMessage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }      
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
	<LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
		<RIB_INFO MODE="write">
			<SET_SECURITY_MSG>
				<SECURITY_MSG value="No"/>
				<SECURITY_MSG_TEXT>
					<![CDATA[""]]>
				</SECURITY_MSG_TEXT>
			</SET_SECURITY_MSG>
		</RIB_INFO>
	</LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Disable-HPiLOSecurityMessage`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Dismount-HPiLOVirtualMedia{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("FLOPPY","CDROM")] $Device
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Device")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	$tmpObj = @{parameterName = "Device" ;parameterValue = $Device; parameterDefaultValue="FLOPPY";
        parameterValidateValues=@{"FLOPPY"="FLOPPY";"CDROM"="CDROM"};
        parameterAcceptValidValues="FLOPPY,CDROM"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDevice = $obj.Device 

			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <EJECT_VIRTUAL_MEDIA DEVICE=$(Add-Quotes -InString $currDevice)/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Dismount-HPiLOVirtualMedia`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Enable-HPiLOFIPS{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <FIPS_ENABLE/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Enable-HPiLOFIPS`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
<RIBCL Version="2.22">
' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Enable-HPiLOERSIRSConnection{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $URL,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateRange(1,65535)] $Port
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "URL", "Port")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "URL" ;parameterValue = $URL;parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Port" ;parameterValue = $Port;parameterNeedInput = $true;parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currURL = $obj.URL
            $currPort = $obj.Port
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <SET_ERS_IRS_CONNECT>
                <ERS_DESTINATION_URL value = $(Add-Quotes -InString $currURL)/>
                <ERS_DESTINATION_PORT value = $(Add-Quotes -InString $currPort)/>
            </SET_ERS_IRS_CONNECT>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Enable-HPiLOERSIRSConnection`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}

function Enable-HPiLOSecurityMessage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Message
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Message")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Message" ;parameterValue = $Message;parameterNeedInput = $true; parameterMinLength = 1 }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currMessage = Remove-CDATAChars -orgString $obj.Message
            if($currMessage.Length -ne $obj.Message.Length)
            {
                Write-Warning $(Get-Message("MSG_SECURITYMESSAGE_REMOVECHARS"))
            }
			$send = @"
<RIBCL VERSION="2.30">
	<LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
		<RIB_INFO MODE="write">
			<SET_SECURITY_MSG>
				<SECURITY_MSG value="Yes"/>
				<SECURITY_MSG_TEXT>
					<![CDATA[$currMessage]]>
				</SECURITY_MSG_TEXT>
			</SET_SECURITY_MSG>
		</RIB_INFO>
	</LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Enable-HPiLOSecurityMessage`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
    }
}


#The supportted parameter could be array (which has IPv4 and/or IPv6 address) or a string (which represents IPv4 or IPv6)
#support IPv4 format: 
# IPv6 format: 8 blocks of 16 bits, seperated by ":", might have :: which indicates continuous bits of zero; might have %number in the end
function Find-HPiLO {
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    param (
        [parameter(Mandatory=$true)] [alias("IP")] $Range,
        [parameter(Mandatory=$false)] $Timeout = 300
    )
    Add-Type -AssemblyName System.Core

    $ping    = New-Object System.Net.NetworkInformation.Ping
    $options = New-Object System.Net.NetworkInformation.PingOptions(20, $false)
    $bytes   =  0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb
    $iptoping = New-Object System.Collections.Generic.HashSet[String]
    $pingediLOs = @()
    $validformat = $false

    #put all the input range in to array (one for IPv4, the other for IPv6)
    $InputIPv4Array = @()
    $InputIPv6Array = @() 

    # size of $IPv4Array will be the same as size of $InputIPv4Array, the same case to IPv6
    $IPv4Array = @()
    $IPv6Array = @()
	
    $ipv6_one_section="[0-9A-Fa-f]{1,4}"
    $ipv6_one_section_phen="$ipv6_one_section(-$ipv6_one_section)?"
	$ipv6_one_section_phen_comma="$ipv6_one_section_phen(,$ipv6_one_section_phen)*"

    $ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"
	$ipv4_one_section_phen="$ipv4_one_section(-$ipv4_one_section)?"
	$ipv4_one_section_phen_comma="$ipv4_one_section_phen(,$ipv4_one_section_phen)*"

    $ipv4_regex_inipv6="${ipv4_one_section_phen_comma}(\.${ipv4_one_section_phen_comma}){3}"  
    $ipv4_one_section_phen_comma_dot_findhpilo="(\.\.|\.|${ipv4_one_section_phen_comma}|\.${ipv4_one_section_phen_comma}|${ipv4_one_section_phen_comma}\.)"

    $port_regex = ":([1-9]|[1-9]\d|[1-9]\d{2}|[1-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])"
	$ipv6_regex_findhpilo="^\s*(${ipv4_regex_inipv6}|${ipv6_one_section_phen_comma}|((${ipv6_one_section_phen_comma}:){1,7}(${ipv6_one_section_phen_comma}|:))|((${ipv6_one_section_phen_comma}:){1,6}(:${ipv6_one_section_phen_comma}|${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){1,5}(((:${ipv6_one_section_phen_comma}){1,2})|:${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){1,4}(((:${ipv6_one_section_phen_comma}){1,3})|((:${ipv6_one_section_phen_comma})?:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1,3}(((:${ipv6_one_section_phen_comma}){1,4})|((:${ipv6_one_section_phen_comma}){0,2}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1,2}(((:${ipv6_one_section_phen_comma}){1,5})|((:${ipv6_one_section_phen_comma}){0,3}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1}(((:${ipv6_one_section_phen_comma}){1,6})|((:${ipv6_one_section_phen_comma}){0,4}:${ipv4_regex_inipv6})|:))|(:(((:${ipv6_one_section_phen_comma}){1,7})|((:${ipv6_one_section_phen_comma}){0,5}:${ipv4_regex_inipv6})|:)))(%.+)?\s*$" 
	$ipv6_regex_findhpilo_with_bra ="^\s*\[(${ipv4_regex_inipv6}|${ipv6_one_section_phen_comma}|((${ipv6_one_section_phen_comma}:){1,7}(${ipv6_one_section_phen_comma}|:))|((${ipv6_one_section_phen_comma}:){1,6}(:${ipv6_one_section_phen_comma}|${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){1,5}(((:${ipv6_one_section_phen_comma}){1,2})|:${ipv4_regex_inipv6}|:))|((${ipv6_one_section_phen_comma}:){1,4}(((:${ipv6_one_section_phen_comma}){1,3})|((:${ipv6_one_section_phen_comma})?:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1,3}(((:${ipv6_one_section_phen_comma}){1,4})|((:${ipv6_one_section_phen_comma}){0,2}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1,2}(((:${ipv6_one_section_phen_comma}){1,5})|((:${ipv6_one_section_phen_comma}){0,3}:${ipv4_regex_inipv6})|:))|((${ipv6_one_section_phen_comma}:){1}(((:${ipv6_one_section_phen_comma}){1,6})|((:${ipv6_one_section_phen_comma}){0,4}:${ipv4_regex_inipv6})|:))|(:(((:${ipv6_one_section_phen_comma}){1,7})|((:${ipv6_one_section_phen_comma}){0,5}:${ipv4_regex_inipv6})|:)))(%.+)?\]($port_regex)?\s*$" 	
    $ipv4_regex_findhpilo="^\s*${ipv4_one_section_phen_comma_dot_findhpilo}(\.${ipv4_one_section_phen_comma_dot_findhpilo}){0,3}($port_regex)?\s*$"
  		
    if ($Range.GetType().Name -eq "String")
    {
        if(($range -match $ipv4_regex_findhpilo) -and (4 -ge (Get-IPv4-Dot-Num -strIP  $range)))
        {
            $InputIPv4Array += $Range            
            $validformat = $true
        }
        elseif($range -match $ipv6_regex_findhpilo -or $range -match $ipv6_regex_findhpilo_with_bra)
        {
            if($range.contains("]") -and $range.Split("]")[0].Replace("[","").Trim() -match $ipv4_regex_findhpilo)  #exclude [ipv4] and [ipv4]:port
            {
			   Write-Error $(Get-Message("MSG_INVALID_RANGE"))
               $validformat = $false
               return
            }
            else
            {
               $InputIPv6Array += $Range            
               $validformat = $true
            }
        }
        else
        {
			Write-Error $(Get-Message("MSG_INVALID_RANGE"))
            $validformat = $false
            return
        }	
        
    }
	elseif($Range.GetType().Name -eq "Object[]")
    {
        $hasvalidinput=$false
        foreach($r in $Range)
        {            
            if(($r -match $ipv4_regex_findhpilo)  -and (4 -ge (Get-IPv4-Dot-Num -strIP  $r)) )
            {
                $InputIPv4Array += $r                
                $hasvalidinput=$true
            }
            elseif($r -match $ipv6_regex_findhpilo -or $r -match $ipv6_regex_findhpilo_with_bra)
            {
                if($r.contains("]") -and $r.Split("]")[0].Replace("[","").Trim() -match $ipv4_regex_findhpilo) #exclude [ipv4] and [ipv4]:port
                {
                   Write-Warning $([string]::Format($(Get-Message("MSG_INVALID_PARAMETER")) ,$r))           
                }
                else
                {
                   $InputIPv6Array += $r
                   $hasvalidinput=$true
                }
            }
            else
            {
                Write-Warning $([string]::Format($(Get-Message("MSG_INVALID_PARAMETER")) ,$r))           
            }                    
        }
        $validformat = $hasvalidinput        
    }
    else
    {
           Write-Error $([string]::Format($(Get-Message("MSG_PARAMETER_INVALID_TYPE")), $Range.GetType().Name, "Range"))
           $validformat = $false
           return
    }
    
    if($Timeout -ne $null){
        if(($Timeout -match "^\s*[1-9][0-9]*\s*$") -ne $true){ 		
            Write-Error $(Get-Message("MSG_INVALID_TIMEOUT"))
            $validformat = $false
            return
        }
    }
	
    if($InputIPv4Array.Length -gt 0)
    {
        #$IPv4Array = New-Object 'object[,]' $InputIPv4Array.Length,4
        $IPv4Array = New-Object System.Collections.ArrayList              
        foreach($inputIP in $InputIPv4Array)
        {
           if($inputIP.contains(":"))
           {
              $returnip = Complete-IPv4 -strIP $inputIP.Split(":")[0].Trim()
              $returnip = $returnip + ":" + $inputIP.Split(":")[1].Trim()      
           }
           else
           {
              $returnip = Complete-IPv4 -strIP $inputIP
           }
           $x = $IPv4Array.Add($returnip)
        }
    }

    if($InputIPv6Array.Length -gt 0)
    {
        #$IPv6Array = New-Object'object[,]' $InputIPv6Array.Length,11
        $IPv6Array = New-Object System.Collections.ArrayList        
        foreach($inputIP in $InputIPv6Array)
        { 
            if($inputIP.contains("]")) #[ipv6] and [ipv6]:port
            {
               $returnip = Complete-IPv6 -strIP $inputIP.Split("]")[0].Replace("[","").Trim()
               $returnip = "[" + $returnip + "]" + $inputIP.Split("]")[1].Trim()
            }
            else #ipv6 without [] nor port
            {
               $returnip = Complete-IPv6 -strIP $inputIP 
               $returnip = "[" + $returnip + "]"
            }
            $x = $IPv6Array.Add($returnip)
        }
    }   

	
	if($validformat)
	{	
		Write-Warning $(Get-Message("MSG_FIND_LONGTIME"))
        foreach($ipv4 in $IPv4Array)
        { 
            if($ipv4.contains(":")) #contains port
            {
               $retarray = Get-IPArrayFromString -stringIP $ipv4.Split(":")[0].Trim() -IPType "IPv4"
               foreach($oneip in $retarray)
               {
                  $x = $ipToPing.Add($oneip + ":" + $ipv4.Split(":")[1].Trim())
               }                 
            }
            else
            {
               $retarray = Get-IPArrayFromString -stringIP $ipv4 -IPType "IPv4"
               foreach($oneip in $retarray)
               {
                  $x = $ipToPing.Add($oneip)
               }  
            }                  
        }
				
        foreach($ipv6 in $IPv6Array) #all ipv6 has been changed to [ipv6] or [ipv6]:port
        { 
           $retarray = Get-IPv6FromString -stringIP $ipv6.Split("]")[0].Replace("[","").Trim() 
           foreach($oneip in $retarray)
           {
              $x = $ipToPing.Add("[" + $oneip + "]" + $ipv6.Split("]")[1].Trim())
           }                           
        }		
		  
        $iLOList = @()
		$ThreadPipes = @()
		$poolsize = (@($ipToPing.Count, 256) | Measure-Object -Minimum).Minimum
		if($poolsize -eq 0)
		{
			$poolsize = 1
		}
		Write-Verbose -Message $([string]::Format($(Get-Message("MSG_USING_THREADS_FIND")) ,$poolsize))
		$thispool = Create-ThreadPool $poolsize
		$t = {
			Param($aComp, $aComp2, $timeout,$RM)

            Function Get-Message
            {
                Param
                (
                    [Parameter(Mandatory=$true)][String]$MsgID
                )
                 #only these strings are used in the two script blocks
                $LocalizedStrings=@{
	"MSG_SENDING_TO"="Sending to {0}"
	"MSG_FAIL_HOSTNAME"="DNS name translation not available for {0} - Host name left blank."
	"MSG_FAIL_IPADDRESS"="Invalid Hostname: IP Address translation not available for hostname {0}."
	"MSG_PING"="Pinging {0}"
	"MSG_PING_FAIL"="No system responds at {0}"
	"MSG_FIND_NO_ILO"="No iLO at {0}"
	}
    $Message = ""
    try
    {
        $Message = $RM.GetString($MsgID)
        if($Message -eq $null)
        {
            $Message = $LocalizedStrings[$MsgID]
        }
    }
    catch
    {
        #throw $_
		$Message = $LocalizedStrings[$MsgID]
    }

    if($Message -eq $null)
    {
		#or unknown
        $Message = "Fail to get the message"
    }
    return $Message
            }

Function New-TrustAllWebClient {
    <# 
      Source for New-TrustAllWebClient is found at http://poshcode.org/624
      Use is governed by the Creative Commons "No Rights Reserved" license
      and is considered public domain see http://creativecommons.org/publicdomain/zero/1.0/legalcode 
      published by Stephen Campbell of Marchview Consultants Ltd. 
    #>

    <# Create a compilation environment #>
    $Provider=New-Object Microsoft.CSharp.CSharpCodeProvider
    $Compiler=$Provider.CreateCompiler()
    $Params=New-Object System.CodeDom.Compiler.CompilerParameters
    $Params.GenerateExecutable=$False
    $Params.GenerateInMemory=$True
    $Params.IncludeDebugInformation=$False
    $Params.ReferencedAssemblies.Add("System.DLL") > $null
    $TASource=@'
namespace Local.ToolkitExtensions.Net.CertificatePolicy {
    public class TrustAll : System.Net.ICertificatePolicy {
        public TrustAll() { 
        }
        public bool CheckValidationResult(System.Net.ServicePoint sp,
            System.Security.Cryptography.X509Certificates.X509Certificate cert, 
            System.Net.WebRequest req, int problem) {
            return true;
        }
    }
}
'@ 
    $TAResults=$Provider.CompileAssemblyFromSource($Params,$TASource)
    $TAAssembly=$TAResults.CompiledAssembly

    <# We now create an instance of the TrustAll and attach it to the ServicePointManager #>
    $TrustAll=$TAAssembly.CreateInstance("Local.ToolkitExtensions.Net.CertificatePolicy.TrustAll")
    [System.Net.ServicePointManager]::CertificatePolicy=$TrustAll

    <#
     The ESX Upload requires the Preauthenticate value to be true which is not the default
     for the System.Net.WebClient class which has very simple-to-use downloadFile and uploadfile
     methods.  We create an override class which simply sets that Preauthenticate value.
     After creating an instance of the Local.ToolkitExtensions.Net.WebClient class, we use it just
     like the standard WebClient class.
    #>
    $Params1=New-Object System.CodeDom.Compiler.CompilerParameters
    $Params1.GenerateExecutable=$False
    $Params1.GenerateInMemory=$True
    $Params1.IncludeDebugInformation=$False
    $Params1.ReferencedAssemblies.Add("System.DLL") > $null
    $WCSource=@'
namespace Local.ToolkitExtensions.Net { 
        class WebClient : System.Net.WebClient {
        protected override System.Net.WebRequest GetWebRequest(System.Uri uri) {
            System.Net.WebRequest webRequest = base.GetWebRequest(uri);
            webRequest.PreAuthenticate = true;
            webRequest.Timeout = 60000;
            return webRequest;
        }
    }
}
'@
    $WCResults=$Provider.CompileAssemblyFromSource($Params1,$WCSource)
    $WCAssembly=$WCResults.CompiledAssembly

    <# Now return the custom WebClient. It behaves almost like a normal WebClient. #>
    $WebClient=$WCAssembly.CreateInstance("Local.ToolkitExtensions.Net.WebClient")
    return $WebClient
}

			$ping    = New-Object -TypeName System.Net.NetworkInformation.Ping
			$options = New-Object -TypeName System.Net.NetworkInformation.PingOptions -ArgumentList (20, $false)
			$bytes   =  0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb
			$retobj = New-Object -TypeName PSObject   
			try
			{			
				$pingres = $ping.Send($aComp2, $timeout, [Byte[]]$bytes, $options )
				if ($pingres.Status -eq "Success") {
					$iLOAddr = $pingres.Address.IPAddressToString
					$client = New-Object -TypeName System.Net.WebClient
								  
					try 
					{   try
                        {
                          $data = $client.DownloadData("http://$aComp/xmldata?item=All")                   
                        }
                        catch
                        {
                          $client = New-TrustAllWebClient
                          $data = $client.DownloadData("https://$aComp/xmldata?item=All")                   
                        }                 
						
						$str = ""
						$data | % {$str += [char]$_}
						$iLOobj = New-Object -TypeName PSObject 
						$iLOobj |   Add-Member NoteProperty IP  $iLOAddr 
						$iLOobj |   Add-Member NoteProperty HOSTNAME $null
						try
						{
							$dns = [System.Net.Dns]::GetHostEntry($iLOAddr)
							$iLOobj.Hostname = $dns.Hostname
						}
						catch
						{
							$retobj | Add-Member NoteProperty errormsg $([string]::Format($(Get-Message("MSG_FAIL_HOSTNAME")), $iLOAddr))
						}
						#remove special characters.
						try
						{
							$xml = [xml] $str                        
						}
						catch
						{
							$chararray = @()
							$chararray= $str -split ""
							for ($i = 0; $i -lt $chararray.length; $i++) {
								switch -regex ($chararray[$i]) {
									('[\x01-\x08\x0b-\x0c\x0e-\x1f]+') {$chararray[$i] = " "  ; break}
									('[\ud800-\udfff\ufffe]+') {$chararray[$i] = " " ;break }
									('&') {$chararray[$i] = '&amp;' ; break}
								}
							}
							$str = $chararray -join ""
							$chararray.Clear()
						}

						$spn  = (Select-Xml -Content $str -XPath "RIMP/HSI/SPN").node."#text"
						$fwri = (Select-Xml -Content $str -XPath "RIMP/MP/FWRI").node."#text"
						$pn   = (Select-Xml -Content $str -XPath "RIMP/MP/PN"  ).node."#text"
						$uuid = (Select-Xml -Content $str -XPath "RIMP/HSI/cUUID").node."#text"
						$sn = (Select-Xml -Content $str -XPath "RIMP/HSI/SBSN"  ).node."#text"
						$iLOobj |   Add-Member NoteProperty SPN  $spn 
						$iLOobj |   Add-Member NoteProperty FWRI  $fwri 
						$iLOobj |   Add-Member NoteProperty PN  $pn
						if(($iLOobj.PN).indexOf("Integrated Lights-Out") -ne -1) {
							$retobj | Add-Member NoteProperty data $iLOobj
						}
						$iLOobj |   Add-Member NoteProperty SerialNumber  $sn
						$iLOobj |   Add-Member NoteProperty UUID  $uuid
					}
					catch 
					{
						$retobj | Add-Member NoteProperty errormsg $([string]::Format($(Get-Message("MSG_FIND_NO_ILO")), $iLOAddr))
					}
				}
				else
				{
					$retobj | Add-Member NoteProperty errormsg  $([string]::Format($(Get-Message("MSG_PING_FAIL")), $aComp2))
				}
			}
			catch
			{
				$retobj | Add-Member NoteProperty errormsg  $([string]::Format($(Get-Message("MSG_PING_FAIL")), $aComp2))
			}
			return $retobj
		} 
		#end of $t scriptblock
            
		foreach ($comp in $ipToPing) {
			Write-Verbose -Message $([string]::Format($(Get-Message("MSG_PING")) ,$comp))
            $comp2=$comp
            if($comp -match $ipv4_regex_findhpilo -and $comp.contains(":")) #ipv4:port
            {
               $comp2 = $comp.Split(":")[0].Trim()
            }
            elseif($comp -match $ipv6_regex_findhpilo_with_bra) #all ipv6 have been added [] after completing address
            {
               if($comp.contains("]:")) #[ipv6]:port
               {
                 $comp2 = $comp.Split("]")[0].Replace("[","").Trim()
               }
               else #[ipv6]
               {
                 $comp2 = $comp.Replace("[","").Replace("]","").Trim()
               }
            }
            
			$ThreadPipes += Start-ThreadScriptBlock -ThreadPool $thispool -ScriptBlock $t -Parameters $comp,$comp2, $Timeout, $RM
		}

		#this waits for and collects the output of all of the scriptblock pipelines - using showprogress for verbose
		if ($VerbosePreference -eq "Continue") {
			$iLOList = Get-ThreadPipelines -Pipelines $ThreadPipes -ShowProgress
		}
		else {
			$iLOList = Get-ThreadPipelines -Pipelines $ThreadPipes
		}
		$thispool.Close()
		$thispool.Dispose()
        foreach($ilo in $iLOList)
        {
			if($ilo.errormsg -ne $null)
            {
                Write-Verbose $ilo.errormsg
            }
            
            if($ilo.data -ne $null)
            {
                $ilo.data
            }
        }  
        
    }    
    else{
        Write-Error $(Get-Message("MSG_INVALID_USE"))
    }
}

function Get-HPiLOAHSStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)

    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_AHS_STATUS/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOAHSStatus`n" + "Add-LevelWithValueAndOther`n" + "GET_AHS_STATUS`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_AHS_STATUS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_AHS_STATUS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOAssetTag{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_ASSET_TAG/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOAssetTag`n" + "Add-LevelWithValueAndOther`n" + "GET_ASSET_TAG`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret = Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ASSET_TAG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_ASSET_TAG"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOCertificateSigningRequest{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $State,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Country,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Locality,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Organization,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $OrganizationalUnit,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CommonName
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "State", "Country", "Locality", "Organization", "OrganizationalUnit", "CommonName")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "State" ;parameterValue = $State }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Country" ;parameterValue = $Country }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Locality" ;parameterValue = $Locality }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Organization" ;parameterValue = $Organization }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OrganizationalUnit" ;parameterValue = $OrganizationalUnit }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CommonName" ;parameterValue = $CommonName }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.State -ne $null){
                $currState = $obj.State
                $parameterFlag = 1
            }
            if($obj.Country -ne $null){
                $currCountry = $obj.Country
                $parameterFlag = 1
            }
            if($obj.Locality -ne $null){
                $currLocality = $obj.Locality
                $parameterFlag = 1
            }
            if($obj.Organization -ne $null){
                $currOrganization = $obj.Organization
                $parameterFlag = 1
            }
            if($obj.OrganizationalUnit -ne $null){
                $currOrganizationalUnit = $obj.OrganizationalUnit
                $parameterFlag = 1
            }
            if($obj.CommonName -ne $null){
                $currCommonName = $obj.CommonName
                $parameterFlag = 1
            }

			if($parameterFlag -ne 1){
				$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <CERTIFICATE_SIGNING_REQUEST/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			}
			else{
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <CERTIFICATE_SIGNING_REQUEST>
"@
				if($currState -ne $null){
					$send = $send + @"
`n                <CSR_STATE VALUE =$(Add-Quotes -InString $currState)/>
"@
				}
				if($currCountry -ne $null){
					$send = $send + @"
`n                <CSR_COUNTRY VALUE =$(Add-Quotes -InString $currCountry)/>
"@
            }
				if($currLocality -ne $null){
					$send = $send + @"
`n                <CSR_LOCALITY VALUE =$(Add-Quotes -InString $currLocality)/>
"@
				}
				if($currOrganization -ne $null){
					$send = $send + @"
`n                <CSR_ORGANIZATION VALUE =$(Add-Quotes -InString $currOrganization)/>
"@
				}
				if($currOrganizationalUnit -ne $null){
					$send = $send + @"
`n                <CSR_ORGANIZATIONAL_UNIT VALUE =$(Add-Quotes -InString $currOrganizationalUnit)/>
"@
				}
				if($currCommonName -ne $null){
					$send = $send + @"
`n                <CSR_COMMON_NAME VALUE =$(Add-Quotes -InString $currCommonName)/>
"@
				}
                $send = $send + @"
`n            </CERTIFICATE_SIGNING_REQUEST>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOCertificateSigningRequest`n" + "Add-LevelWithValueAndOther`n" + "RIBCL`n" + "CERTIFICATE_SIGNING_REQUEST`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "CERTIFICATE_SIGNING_REQUEST" ""



                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "RIBCL"
							$tmpObj | Add-Member NoteProperty "CERTIFICATE_SIGNING_REQUEST" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLODefaultLanguage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <GET_LANGUAGE/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLODefaultLanguage`n" + "Add-LevelWithValueAndOther`n" + "GET_LANGUAGE`n" + "LANG_ID`n" + "LANGUAGE`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "LANG_ID" ""
                    #$tmpObj | Add-Member NoteProperty "LANGUAGE" ""

                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_LANGUAGE).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_LANGUAGE"
							$tmpObj | Add-Member NoteProperty "LANG_ID" ""
							$tmpObj | Add-Member NoteProperty "LANGUAGE" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLODirectory{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <DIR_INFO MODE="read">
            <GET_DIR_CONFIG/>
        </DIR_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLODirectory`n" + "Add-LevelWithValueAndOther`n" + "GET_DIR_CONFIG`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                $ret = Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_DIR_CONFIG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_DIR_CONFIG"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member -MemberType NoteProperty $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOERSSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <!-- Command to retrieve the current ERS settings. -->
            <GET_ERS_SETTINGS />
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOERSSetting`n" + "Add-LevelWithValueAndOther`n" + "GET_ERS_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ERS_SETTINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_ERS_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOEventLog{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }      
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="READ" >
         <GET_EVENT_LOG />
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOEventLog`n" + "Add-LevelNoConcat`n" + "EVENT_LOG`n" + "DESCRIPTION`n" + "EVENT`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret = Remove-SpecialChars -strRet $ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "DESCRIPTION" ""
                    #$tmpObj | Add-Member NoteProperty "EVENT" ""

                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.EVENT_LOG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "EVENT_LOG"
							$tmpObj | Add-Member NoteProperty "DESCRIPTION" ""
							$tmpObj | Add-Member NoteProperty "EVENT" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOFan{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }   
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj    
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
	if($validateInputFlag){
		foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOFan`n" + "Add-LevelNoConcat`n" + "FANS`n" + "FAN`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret= Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
                    
                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.FANS.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"
                    
                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "FAN" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.FANS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "FANS"
							$tmpObj | Add-Member NoteProperty "FAN" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOFIPSStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <GET_FIPS_STATUS/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOFIPSStatus`n" + "Add-LevelWithValueAndOther`n" + "GET_FIPS_STATUS`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_FIPS_STATUS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_FIPS_STATUS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOFirmwareInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOFirmwareInfo`n" + "Add-LevelNoConcat`n" + "FIRMWARE_INFORMATION`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret= Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.FIRMWARE_INFORMATION.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.FIRMWARE_INFORMATION).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "FIRMWARE_INFORMATION"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            $firmwareInfo = @()
                            foreach($item in $member){
                                #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                $requiredValues.($item.Name) | Add-Member "Index" $index
                                $firmwareInfo += $requiredValues.($item.Name)
                            }
                            if($firmwareInfo.Length -eq 1)
                            {
                               $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                            }
                            elseif($firmwareInfo.Length -gt 1)
                            {
                               $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                               $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOFirmwareVersion{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }	
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
		
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	

    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_FW_VERSION/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOFirmwareVersion`n" + "Add-LevelWithValueAndOther`n" + "GET_FW_VERSION`n" + "FIRMWARE_DATE`n" + "FIRMWARE_VERSION`n" + "LICENSE_TYPE`n" + "MANAGEMENT_PROCESSOR`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "FIRMWARE_DATE" ""
                    #$tmpObj | Add-Member NoteProperty "FIRMWARE_VERSION" ""
                    #$tmpObj | Add-Member NoteProperty "LICENSE_TYPE" ""
                    #$tmpObj | Add-Member NoteProperty "MANAGEMENT_PROCESSOR" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_FW_VERSION).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_FW_VERSION"
							$tmpObj | Add-Member NoteProperty "FIRMWARE_DATE" ""
							$tmpObj | Add-Member NoteProperty "FIRMWARE_VERSION" ""
							$tmpObj | Add-Member NoteProperty "LICENSE_TYPE" ""
							$tmpObj | Add-Member NoteProperty "MANAGEMENT_PROCESSOR" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOGlobalSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="read">
         <GET_GLOBAL_SETTINGS/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOGlobalSetting`n" + "Add-LevelWithValueAndOther`n" + "GET_GLOBAL_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret = Remove-SpecialChars -strRet $ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_GLOBAL_SETTINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_GLOBAL_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                               if(($item.Name).replace("#","").ToUpper() -ne "COMMENT")
                               {
                                  $tmpObj | Add-Member NoteProperty ($item.Name).ToUpper() $requiredValues.($item.Name)
                               }
                                #$tmpObj | Add-Member -MemberType NoteProperty ($item.Name).replace("#","").ToUpper() $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHealthSummary{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHealthSummary`n" + "Add-LevelWithValueAndOther`n" + "HEALTH_AT_A_GLANCE`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret= Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.HEALTH_AT_A_GLANCE.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.HEALTH_AT_A_GLANCE).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "HEALTH_AT_A_GLANCE"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member)
                            {
                                if($item.Definition.ToString().split("")[0] -eq "System.Object[]")
                                {
                                    $propMembers=$null
                                    $temp = New-Object PSObject
                                    for($i=0; $i -lt $requiredValues.($item.Name).Count ; $i++)
                                    {
                                        $propObj = $requiredValues.($item.Name)[$i]
                                        $propName = ($propObj | Get-Member | ?{$_.MemberType -eq "NoteProperty"}).Name
                                        $propValue = $propObj.$propName
                                        $propMembers += [ordered]@{$propName.ToUpper()="$propValue"}
                                    }
                                    $temp | Add-Member -NotePropertyMembers $propMembers -TypeName Asset
                                    $tmpObj | Add-Member NoteProperty $item.Name $temp                               
                                }
                                else
                                {    
                                    $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                                }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHostAPO{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_SERVER_AUTO_PWR />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHostAPO`n" + "Add-LevelWithValueAndOther`n" + "GET_SERVER_AUTO_PWR`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_SERVER_AUTO_PWR).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_SERVER_AUTO_PWR"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                               if(($item.Name).replace("#","").ToUpper() -ne "COMMENT")
                               {
                                  $tmpObj | Add-Member NoteProperty ($item.Name).ToUpper() $requiredValues.($item.Name)
                               }
                                #$tmpObj | Add-Member -MemberType NoteProperty ($item.Name).replace("#","").ToUpper() $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHostData{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [int]$Type = -1
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Type")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Type" ;parameterValue = $Type;parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="READ" >
         <GET_HOST_DATA />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		   $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHostData`n" + "Add-LevelWithValueAndOther2`n" + "GET_HOST_DATA`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_HOST_DATA).OuterXml)

                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "GET_HOST_DATA"
                            #change "FIELD" property name to "Value" for each smbios record field item
                            foreach($smbios in $requiredValues.SMBIOS_RECORD)
                            {  if($smbios.FIELD -ne $null)
                               {
                                  $fieldArray = @()                                
                                  foreach($fieldValue in $smbios.FIELD)
                                  {
                                     $objForValues = New-Object PSObject
                                     $member = $fieldValue | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                     foreach($item in $member)
                                     {
                                        if($item.Name -ieq "FIELD")
                                        {
                                           $objForValues | Add-Member NoteProperty "VALUE" $fieldValue.($item.Name)
                                        }
                                        else
                                        {
                                           $objForValues | Add-Member NoteProperty $item.Name $fieldValue.($item.Name)
                                        }
                                     }
                                     $fieldArray += $objForValues
                                  }
                                  if($fieldArray.count -eq 1)
                                  {
                                     $smbios.FIELD = $fieldArray[0]
                                  }
                                  elseif($fieldArray.count -gt 1)
                                  {
                                     $smbios.FIELD = $fieldArray
                                  }
                               }
                            }
                            #$member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            if($type -ne -1){
                                $hostData = $requiredValues.SMBIOS_RECORD | ?{$_.Type -eq $Type}
                                $tmpObj | Add-Member "SMBIOS_RECORD" $hostData
                            }
                            else{
                                $tmpObj | Add-Member "SMBIOS_RECORD" $requiredValues.SMBIOS_RECORD
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }     
    return $outputList
	}
}

function Get-HPiLOHostPower{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_HOST_POWER_STATUS/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHostPower`n" + "Add-LevelWithValueAndOther`n" + "GET_HOST_POWER`n" + "HOST_POWER`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "HOST_POWER" ""
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_HOST_POWER).OuterXml)
                    
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_HOST_POWER"
							$tmpObj | Add-Member NoteProperty "HOST_POWER" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHostPowerMicroVersion{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_HOST_PWR_MICRO_VER/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		   $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHostPowerMicroVersion`n" + "Add-LevelWithValueAndOther`n" + "PWR_MICRO`n" + "PWR_MICRO_VERSION`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "PWR_MICRO_VERSION" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_HOST_PWR_MICRO_VER.PWR_MICRO).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "PWR_MICRO"
							$tmpObj | Add-Member NoteProperty "PWR_MICRO_VERSION" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHostPowerSaver{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_HOST_POWER_SAVER_STATUS/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHostPowerSaver`n" + "Add-LevelWithValueAndOther`n" + "GET_HOST_POWER_SAVER`n" + "HOST_POWER_SAVER`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "HOST_POWER_SAVER" ""

                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_HOST_POWER_SAVER).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_HOST_POWER_SAVER"
							$tmpObj | Add-Member NoteProperty "HOST_POWER_SAVER" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOHotKeyConfig{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_HOTKEY_CONFIG/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOHotKeyConfig`n" + "Add-LevelWithValueAndOther`n" + "GET_HOTKEY_CONFIG`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_HOTKEY_CONFIG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_HOTKEY_CONFIG"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOIML{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="READ" >
         <GET_EVENT_LOG />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		   $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOIML`n" + "Add-LevelNoConcat`n" + "EVENT_LOG`n" + "DESCRIPTION`n" + "EVENT`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
				$ret = Remove-SpecialChars -strRet $ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "DESCRIPTION" ""
                    #$tmpObj | Add-Member NoteProperty "EVENT" ""

                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.EVENT_LOG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "EVENT_LOG"
							$tmpObj | Add-Member NoteProperty "DESCRIPTION" ""
							$tmpObj | Add-Member NoteProperty "EVENT" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOLanguage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_ALL_LANGUAGES/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOLanguage`n" + "Add-LevelWithValueAndOther`n" + "GET_ALL_LANGUAGES`n" + $send
            Write-Output $send
        }
        else
        {
		$rets =  Execute-RIBCL($runObjects)
        foreach($retobject in $rets)
        {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ALL_LANGUAGES).OuterXml)
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_ALL_LANGUAGES"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOLicense{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_ALL_LICENSES/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOLicense`n" + "Add-LevelWithValueAndOther`n" + "GET_ALL_LICENSES`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ALL_LICENSES).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_ALL_LICENSES"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOMemoryInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
            <GET_EMBEDDED_HEALTH>
                    <GET_ALL_MEMORY/>
            </GET_EMBEDDED_HEALTH>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOMemoryInfo`n" + "Add-LevelWithValueAndOther2`n" + "MEMORY`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.MEMORY.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
                    $ret = $ret.Replace("<PART NUMBER = ", "<PART_NUMBER VALUE = ")
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.MEMORY).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "MEMORY"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                               if($item.Name -eq "MEMORY_COMPONENTS")
                               {
                                  $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                               }
                               else
                               {
                                  $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                               }
                            }

                            if($tmpObj.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY_DETAILS_SUMMARY -ne $null)
                            {
                               $orgobj=$tmpObj.MEMORY_DETAILS
                               $memArray= @()
                               foreach($p in $($orgobj| Get-Member))
                               {
                                  $cpuItem= New-Object PSobject
                                  if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                  {
                                     $cpunumber=$p.Name.Substring(4)
                                     $cpudata=$orgobj.$($p.Name)
                                     $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                     $memArray+=$cpuItem
                                  }
                               }
                               $tmpObj.MEMORY_DETAILS = $memArray

                               $orgobj=$tmpObj.MEMORY_DETAILS_SUMMARY
                               $memArray= @()
                               foreach($p in $($orgobj| Get-Member))
                               {
                                  $cpuItem= New-Object PSobject
                                  if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                  {
                                     $cpunumber=$p.Name.Substring(4)
                                     $cpudata=$orgobj.$($p.Name)
                                     $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                     $memArray+=$cpuItem
                                  }
                               }
                               $tmpObj.MEMORY_DETAILS_SUMMARY = $memArray
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOModuleVersion{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    $mod = Get-Module | ? {$_.Name -eq "HPiLOCmdlets"}
    $cul = Get-UICulture
    $versionObject = New-Object PSObject
    $versionObject | Add-member "Name" $mod.Name
    $versionObject | Add-member "Path" $mod.Path
    $versionObject | Add-member "Description" $mod.Description
    $versionObject | Add-member "GUID" $mod.GUID
    $versionObject | Add-member "Version" $mod.Version
    $versionObject | Add-member "CurrentUICultureName" $cul.Name
    $fileDir = (Get-ChildItem $mod.Path).DirectoryName
    $fileName = "HPiLOCmdlets_" + $versionObject.GUID.guid + "_HelpInfo.xml"
    $helpInfoPath = "$fileDir\$filename"
    $file = Get-Content $helpInfoPath
    $file = [xml] $file
    $AvailableUICulture = @()

    if($file.HelpInfo.SupportedUICultures.UICulture.getType().Name -match "Object"){
       
        foreach($i in $file.HelpInfo.SupportedUICultures.UICulture){
            $UICultureObject = New-Object PSObject
            $UICultureObject | Add-Member UICultureName $i.UICultureName
            $UICultureObject | Add-Member UICultureVersion $i.UICultureVersion
            $AvailableUICulture += $UICultureObject

            if($versionObject.CurrentUICultureName -eq $UICultureObject.UICultureName){
               $versionObject | Add-member "CurrentUICultureVersion" $UICultureObject.UICultureVersion
            }
        }
        $versionObject | Add-Member "AvailableUICulture" $AvailableUICulture
    }
    else{
        #$versionObject | Add-Member "UICultureName" $file.HelpInfo.SupportedUICultures.UICulture.UICultureName
        #$versionObject | Add-Member "UICultureVersion" $file.HelpInfo.SupportedUICultures.UICulture.UICultureVersion

        $UICulture = New-Object PSObject
        $UICulture | Add-Member UICultureName $file.HelpInfo.SupportedUICultures.UICulture.UICultureName
        $UICulture | Add-Member UICultureVersion $file.HelpInfo.SupportedUICultures.UICulture.UICultureVersion
        $AvailableUICulture += $UICulture

        if($versionObject.CurrentUICultureName -eq $UICulture.UICultureName){
           $versionObject | Add-member "CurrentUICultureVersion" $UICulture.UICultureVersion
        }  
           
        $versionObject | Add-Member "AvailableUICulture" $AvailableUICulture
    }

    return $versionObject
}

function Get-HPiLONetworkSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="read">
         <GET_NETWORK_SETTINGS/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLONetworkSetting`n" + "Add-LevelWithValueAndOther`n" + "GET_NETWORK_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_NETWORK_SETTINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_NETWORK_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLONICInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("NIC","iLO")] $Type
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Type")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Type" ;parameterValue = $Type;
        parameterValidateValues=@{"NIC"="NIC";"iLO"="iLO"};
        parameterAcceptValidValues="NIC,iLO"}
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            if($type -eq $null)
            {
                $send = "Get-HPiLONICInfo`n" + "Add-LevelWithValueAndOther2`n" + "Nic_Information`n" + $send
            }
            else
            {
                $send = "Get-HPiLONICInfo`n" + "Add-LevelWithValueAndOther2`n" + "Nic_Information`n" + $type + "`n" + $send
            }
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    if ($ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFORMATION -ne $null){
                             $Nic_Information = "NIC_INFORMATION"
                        }
                    elseif ($ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null){
                             $Nic_Information = "NIC_INFOMATION"
                        }
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.$Nic_Information.OuterXML
                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"
                    $outputList += $xml
            
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                    
                          if ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFORMATION -ne $null){
                              $Nic_Information = "NIC_INFORMATION"
                          }
                          elseif ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null){
                              $Nic_Information = "NIC_INFOMATION"
                          }
                          if($Nic_Information -ne $null)
                          {
                             $nicObj = New-Object PSObject
                             $nicTypes = ($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.$Nic_Information | Get-Member -MemberType Property).NAME
                             foreach($typeVar in $nicTypes){
                                $nicObj | Add-Member NoteProperty $typeVar ""
                             }
                          }

                          # converting to string for passing as parameter to function Add-Level
                          $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.$Nic_Information).OuterXml)

                          $objForValues = New-Object PSObject
                          try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "$Nic_Information"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            if($type -eq "NIC"){
                                $tmpObj | Add-Member "NIC" $requiredValues."NIC"
                            }
                            elseif($type -match "iLO"){
                                $ilos = @()
                                $ilos = ($requiredValues | Get-Member -MemberType NoteProperty | ?{$_.Name -match "iLO"}).Name
                                foreach($mem in $ilos){
                                    $tmpObj | Add-Member NoteProperty $mem $requiredValues.$mem
                                }
                            }
                            else{
                                $nics = ($requiredValues | Get-Member -MemberType NoteProperty).Name
                                foreach($mem in $nics){
                                    $tmpObj | Add-Member NoteProperty $mem $requiredValues.$mem
                                }
                            }
                        }
                          catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        } 
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOOAInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <BLADESYSTEM_INFO MODE="read">
         <GET_OA_INFO/>
      </BLADESYSTEM_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOOAInfo`n" + "Add-LevelWithValueAndOther`n" + "GET_OA_INFO`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_OA_INFO).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_OA_INFO"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member ($item.Name).ToUpper() $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOOneTimeBootOrder{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
   
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    $serverErrorFlag = 0

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
	<LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
		<SERVER_INFO MODE="read">
		<GET_ONE_TIME_BOOT/>
		</SERVER_INFO>
	</LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOOneTimeBootOrder`n" + "Add-LevelWithValueAndOther`n" + "ONE_TIME_BOOT`n" + "BOOT_TYPE`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "BOOT_TYPE" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.ONE_TIME_BOOT).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "ONE_TIME_BOOT"
							$tmpObj | Add-Member NoteProperty "BOOT_TYPE" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPersistentBootOrder{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    $serverErrorFlag = 0

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_PERSISTENT_BOOT/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPersistentBootOrder`n" + "Add-LevelWithValueAndOther`n" + "PERSISTENT_BOOT`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.PERSISTENT_BOOT).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "PERSISTENT_BOOT"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            $tmpObj | Add-Member -MemberType NoteProperty "DEVICE" $requiredValues.DEVICE.Value
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPowerAlertThreshold{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_PWREG/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPowerAlertThreshold`n" + "Add-LevelWithValueAndOther`n" + "GET_PWREG`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_PWREG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_PWREG"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member ($item.Name).Replace("#","").ToUpper() ($requiredValues.($item.Name)).Replace("`"","")
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPowerCap{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_POWER_CAP/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		   $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPowerCap`n" + "Add-LevelWithValueAndOther`n" + "GET_POWER_CAP`n" + "POWER_CAP`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "POWER_CAP" ""
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_POWER_CAP).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_POWER_CAP"
							$tmpObj | Add-Member NoteProperty "POWER_CAP" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                # fix for QuIX issue 1001308541
                                # RIBCL returns tag - <GET_POWER_CAP>
                                #                        <POWER_CAP>"OFF"</POWER_CAP>
                                #                      </GET_POWER_CAP>
                                # only cmdlet that returns value in <<tag>><value></<tag>>
                                # all other cmdlets return values as <<tag> <property>="<value>" />
                                $tmpObj.($item.Name) = ($requiredValues.($item.Name)).Replace("`"","")
                                #$tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                            $tmpObj.STATUS_MESSAGE = "No information available"
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPowerOnTime{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
  
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_SERVER_POWER_ON_TIME />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
             $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPowerOnTime`n" + "Add-LevelWithValueAndOther`n" + "SERVER_POWER_ON_MINUTES`n" + "SERVER_POWER_ON_MINUTES`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "SERVER_POWER_ON_MINUTES" ""
                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){						
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.SERVER_POWER_ON_MINUTES).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "SERVER_POWER_ON_MINUTES"
							$tmpObj | Add-Member NoteProperty "SERVER_POWER_ON_MINUTES" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPowerReading{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
  
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_POWER_READINGS/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		   $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPowerReading`n" + "Add-LevelWithValueAndOther`n" + "GET_POWER_READINGS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_POWER_READINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_POWER_READINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member -MemberType NoteProperty ($item.Name).replace("#","").ToUpper() $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOPowerSupply{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOPowerSupply`n" + "Add-LevelWithValueAndOther2`n" + "POWER_SUPPLIES`n" + "POWER_SUPPLY_SUMMARY`n" + "SUPPLY`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.POWER_SUPPLIES.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "POWER_SUPPLY_SUMMARY" ""
                    #$tmpObj | Add-Member NoteProperty "SUPPLY" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.POWER_SUPPLIES).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "POWER_SUPPLIES"							
							$tmpObj | Add-Member NoteProperty "POWER_SUPPLY_SUMMARY" ""
							$tmpObj | Add-Member NoteProperty "SUPPLY" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOProcessor{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOProcessor`n" + "Add-LevelWithValueAndOther`n" + "PROCESSORS`n" + "PROCESSOR`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.PROCESSORS.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "PROCESSOR" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.PROCESSORS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "PROCESSORS"
							$tmpObj | Add-Member NoteProperty "PROCESSOR" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOProfile{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
   
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <PROFILE_LIST/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
           $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOProfile`n" + "Add-LevelNoConcat`n" + "PROFILE_DESC_LIST`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.PROFILE_DESC_LIST).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "PROFILE_DESC_LIST"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOProfileApplyResult{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)

    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <PROFILE_APPLY_GET_RESULTS/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
            $obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOProfileApplyResult`n" + "Add-LevelProfileApplyGetResults`n" + "results`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.PROFILE_APPLY_GET_RESULTS.results).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelProfileApplyGetResults $a "results"
                            $tmpObj | Add-Member NoteProperty "RESULT" $requiredValues.RESULTS
                            #$member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            #foreach($item in $member){
                            #    $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            #}
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLORackSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RACK_INFO MODE="read">
            <GET_RACK_SETTINGS/>
        </RACK_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLORackSetting`n" + "Add-LevelWithValueAndOther`n" + "GET_RACK_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_RACK_SETTINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_RACK_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            $tmpObj.STATUS_TYPE = "ERROR"
                            $tmpObj.STATUS_MESSAGE = "No information available"
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOSecurityMessage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="read">
            <GET_SECURITY_MSG/>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOSecurityMessage`n" + "Add-LevelWithValueAndOther`n" + "GET_SECURITY_MSG`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'
                    if($ret.contains("]]>"))
                    {
                        $endstring = $ret.Substring($ret.LastIndexOf("]]>"))
                        $startstring = $ret.Substring(0, $ret.LastIndexOf("]]>"))
                        $newstring = Remove-CDATAChars -orgString $startstring
                        if($newstring -ne $startstring)
                        {
                            Write-Warning $(Get-Message("MSG_SECURITYMESSAGE_REMOVECHARS"))
                        }
                        $ret = $newstring + $endstring
                    }
                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_SECURITY_MSG).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_SECURITY_MSG"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                if($item.name -match "#cdata-section"){
                                   if($requiredValues.($item.Name) -ne "" -and $requiredValues.($item.Name) -ne $null)
                                   {
                                      $tmpObj | Add-Member "SECURITY_MSG_TEXT" $requiredValues.($item.Name)
                                   }
                                }
                                else{
                                    $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOServerInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("All", "Fan", "Temperature", "PowerSupply", "Processor", "MemoryInfo", "NICInfo", "DriveInfo", "StorageController", "VRM", "FirmwareInfo", "HealthSummary")] $Category
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Category")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Category" ;parameterValue = $Category; parameterDefaultValue = "All"; 
        parameterValidateValues=@{"ALL"="ALL"; "Fan"="FANS"; "Temperature"="TEMPERATURES"; "PowerSupply"="POWER_SUPPLIES"; "Processor"="PROCESSORS"; "MemoryInfo"="MEMORY"; "NICInfo"="NIC_INFORMATION"; "DriveInfo"="DRIVE"; "StorageController"="STORAGE"; "VRM"="VRM"; "FirmwareInfo"="FIRMWARE_VERSIONS"; "HealthSummary"="HEALTH_AT_A_GLANCE"}; 
        parameterAcceptValidValues="All, Fan, Temperature, PowerSupply, Processor, MemoryInfo, NICInfo, DriveInfo, StorageController, VRM, FirmwareInfo, HealthSummary" }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag)
    {
        foreach($obj in $runObjects)
        {
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currCategory = $obj.Category

            if($currCategory -eq "ALL")
            {
			   $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            }
            else
            {
			   $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_EMBEDDED_HEALTH>`n
"@
                if($currCategory -eq "FANS"){
                    $send = $send + @"
                    <GET_ALL_FANS/>`n
"@
                }
                if($currCategory -eq "TEMPERATURES"){
                    $send = $send + @"
                    <GET_ALL_TEMPERATURES/>`n
"@
                }
                if($currCategory -eq "POWER_SUPPLIES"){
                    $send = $send + @"
                    <GET_ALL_POWER_SUPPLIES/>`n
"@
                }
                if($currCategory -eq "VRM"){
                    $send = $send + @"
                    <GET_ALL_VRM/>`n
"@
                }
                if($currCategory -eq "PROCESSORS"){
                    $send = $send + @"
                    <GET_ALL_PROCESSORS/>`n
"@
                }
                if($currCategory -eq "MEMORY"){
                    $send = $send + @"
                    <GET_ALL_MEMORY/>`n
"@
                }
                if($currCategory -eq "NIC_INFORMATION"){
                    $send = $send + @"
                    <GET_ALL_NICS/>`n
"@
                }
             <# #tag not valid for iLO3. Drive info available in iLO3
                if($currCategory -eq "DRIVE"){
                    $send = $send + @"
                    <GET_ALL_DRIVE/>`n
"@
                }#>

                if($currCategory -eq "STORAGE"){
                    $send = $send + @"
                    <GET_ALL_STORAGE/>`n
"@
                }
                if($currCategory -eq "HEALTH_AT_A_GLANCE"){
                    $send = $send + @"
                    <GET_ALL_HEALTH_STATUS/>`n
"@
                }
                if($currCategory -eq "FIRMWARE_VERSIONS"){
                    $send = $send + @"
                    <GET_ALL_FIRMWARE_VERSIONS/>`n
"@
                }
                $send = $send + @"
            </GET_EMBEDDED_HEALTH>
        </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
            }
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOServerInfo`n" + "Add-LevelWithValueAndOther2`n" + "GET_EMBEDDED_HEALTH_DATA`n" + $currCategory + "`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
                $method = ""
                $fieldName = ""
                $tag = ""
                $currCategory = $retobject.runobject.Category
                if($currCategory -eq "FANS"){
                    $method = "Add-LevelNoConcat"
                    $tag = "FANS"
                    $fieldName = "FAN"
                }
                if($currCategory -eq "TEMPERATURES"){
                    $method = "Add-LevelNoConcat"
                    $tag = "TEMPERATURE"
                    $fieldName = "TEMP"
                }
                if($currCategory -eq "POWER_SUPPLIES"){
                    $method = "Add-LevelWithValueAndOther2"
                    $tag = "POWER_SUPPLIES"
                    $fieldName = "-"
                }
                if($currCategory -eq "VRM"){
                    $method = "Add-LevelNoConcat"
                    $tag = "VRM"
                    $fieldName = "VRM"
                }
                if($currCategory -eq "PROCESSORS"){
                    $method = "Add-LevelWithValueAndOther"
                    $tag = "PROCESSORS"
                    $fieldName = "PROCESSOR"
                }
                if($currCategory -eq "MEMORY"){
                    $method = "Add-LevelWithValueAndOther2"
                    $tag = "MEMORY"
                    $fieldName = "MEMORY"
                }
                if($currCategory -eq "NIC_INFORMATION"){
                    $method = "Add-LevelWithValueAndOther2"
                    $tag = "NIC_INFORMATION"
                    $fieldName = "NICS"
                }
                if($currCategory -eq "STORAGE"){
                    $method = "Add-LevelWithValueAndOther2"
                    $tag = "STORAGE"
                    $fieldName = "STORAGE"
                }
                if($currCategory -eq "DRIVE"){
                    $method = "Add-LevelWithValueAndOther2"
                    $tag = "DRIVES"
                    $fieldName = "DRIVE"
                }
                if($currCategory -eq "HEALTH_AT_A_GLANCE"){
                    $method = "Add-LevelWithValueAndOther"
                    $tag = "HEALTH_AT_A_GLANCE"
                    $fieldName = "HEALTH_STATUS"
                }
                if($currCategory -eq "FIRMWARE_VERSIONS"){
                    $method = "Add-LevelNoConcat"
                    $tag = "FIRMWARE_INFORMATION"
                    $fieldName = "FIRMWARE_VERSIONS"
                }


			    $errmsg = "retrieving information from iLO"
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml")
                    {
                        $errmsg = "Error in XML output"
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                        $xml = '<?xml version="1.0"?>'
                        $xml += "`n" +$matches[0] + "`n"
                        $xml += $ret
                        $xml += '</RIBCL>'
                        $ret = [xml]$xml
                        if($currCategory -ne $All)
                        {
                            $rettagStorage = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.$tag.OuterXML 
                            $xml = '<?xml version="1.0"?>'
                            $xml += "`n" +$matches[0] + "`n"
                            $xml += $rettagStorage
                            $xml += "`n" + "</RIBCL>"
                        }
                        else
                        {
                            $rettagStorage = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.OuterXML
                            $xml = '<?xml version="1.0"?>'
                            $xml += "`n" +$matches[0] + "`n"
                            $xml += "<GET_EMBEDDED_HEALTH_DATA>"
                            $xml += $rettagStorage
                            $xml += "</GET_EMBEDDED_HEALTH_DATA>"
                            $xml += "`n" + "</RIBCL>"
                        }

                        $outputList += $xml
                    }
                    elseif($outputType -eq "ribcl"){
                        $outputList += $ret
                    }
                    elseif($outputType -eq "PSObject"){
                        $errmsg = "Error in format/values returned from iLO "
                        # creating XML in required format from the output
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
                        $ret = $ret.Replace("<PART NUMBER = ", "<PART_NUMBER VALUE = ")
                        $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'

                        $xml = [xml] $ret

                        $tmpObj = New-Object PSObject        
                        $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                        $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                        $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                        $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    
                        Get-Status $xml $tmpObj
                        if($tmpObj.STATUS_TYPE -ne "ERROR"){

                            try
                            {
                                if($currCategory -ne "ALL")
                                {
                                    # converting to string for passing as parameter to function Add-Level
                                    if($tag -eq "NIC_INFORMATION" -and $xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null) #ilo RIBCL bug
                                    {
                                        $a = [string]$xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION.OuterXml
                                        $tag = "NIC_INFOMATION"
                                        $fieldName = "NIC_INFOMATION"
                                    }
                                    else
                                    {
                                        $a = [string]$xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.($tag).OuterXml
                                    }
                                    $requiredValues = &($method) $a $tag
                                    if($tag -eq "FANS" -or $tag -eq "TEMPERATURE" -or $tag -eq "PROCESSORS" -or $tag -eq "VRM" -or $tag -eq "DRIVES")
                                    {
                                        $tmpObj | Add-Member NoteProperty $fieldName ""
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        foreach($item in $member){
                                            $tmpObj.$fieldName = $requiredValues.($item.Name)
                                        }
                                    }
                                    elseif($tag -eq "FIRMWARE_INFORMATION")
                                    {
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        $firmwareInfo = @()
                                        foreach($item in $member){
                                            #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                            $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                            $requiredValues.($item.Name) | Add-Member "Index" $index
                                            $firmwareInfo += $requiredValues.($item.Name)
                                        }
                                        if($firmwareInfo.Length -eq 1)
                                        {
                                           $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                                        }
                                        elseif($firmwareInfo.Length -gt 1)
                                        {
                                           $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                                           $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                                        }
                                    }
                                    else
                                    {
                                        $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                        foreach($item in $member)
                                        {
                                            if($tag -eq "STORAGE" -and $item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                                            }
                                            elseif($tag -eq "MEMORY" -and $item.Name -ieq "MEMORY_COMPONENTS" -and $requiredValues.($item.Name).MEMORY_COMPONENT -ne $null)
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                                            }
                                            else
                                            {
                                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    $methodList = @("Add-LevelWithValueAndOther", "Add-LevelNoConcat", "Add-LevelNoConcat", "Add-LevelWithValueAndOther2", "Add-LevelNoConcat", "Add-LevelWithValueAndOther", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelWithValueAndOther2", "Add-LevelNoConcat" )
                                    $tagList =  @("HEALTH_AT_A_GLANCE", "FANS", "TEMPERATURE", "POWER_SUPPLIES", "VRM", "PROCESSORS", "MEMORY", "NIC_INFORMATION", "DRIVES", "STORAGE", "FIRMWARE_INFORMATION")
                                    $fieldNameList = @("HEALTH_STATUS", "FAN", "TEMP", "POWER_SUPPLY", "VRM", "PROCESSOR", "MEMORY", "NICInfo", "DRIVE", "STORAGE", "FIRMWARE_VERSION")
                                    for($i=0; $i-lt$tagList.Length;$i++)
                                    {
                                        # converting to string for passing as parameter to function Add-Level
                                        if($tagList[$i] -eq "NIC_INFORMATION" -and $xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION -ne $null) #ilo RIBCL bug
                                        {
                                            $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.NIC_INFOMATION).OuterXml)
                                            $tagList[$i] = "NIC_INFOMATION"
                                            $fieldNameList[$i] = "NIC_INFOMATION"
                                        }
                                        else
                                        {
                                            $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.($tagList[$i])).OuterXml)
                                        }

                                        if($a -ne "")
                                        {
                                            $requiredValues = &($methodList[$i]) $a $tagList[$i]
                                            if($tagList[$i] -eq "FANS" -or $tagList[$i] -eq "TEMPERATURE" -or $tagList[$i] -eq "PROCESSORS" -or $tagList[$i] -eq "VRM" -or $tag -eq "DRIVES")
                                            {
                                        	    $tmpObj | Add-Member NoteProperty $fieldNameList[$i] ""
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                foreach($item in $member){
                                                    $tmpObj.($fieldNameList[$i]) = $requiredValues.($item.Name)
                                                }
                                            }
                                            elseif($tagList[$i] -eq "FIRMWARE_INFORMATION")
                                            {
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                $firmwareInfo = @()
                                                foreach($item in $member){
                                                    #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                                                    $index = [int]($item.Name.Replace("INDEX_","").Trim())
                                                    $requiredValues.($item.Name) | Add-Member "Index" $index
                                                    $firmwareInfo += $requiredValues.($item.Name)
                                                }
                                                if($firmwareInfo.Length -eq 1)
                                                {
                                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo[0]
                                                }
                                                elseif($firmwareInfo.Length -gt 1)
                                                {
                                                   $firmwareInfo = $firmwareInfo | Sort-Object -Property "Index"
                                                   $tmpObj | Add-Member "FirmwareInfo" $firmwareInfo
                                                }                                               
                                            }
                                            else
                                            {
                                                $fieldobj = New-Object PSObject
                                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                                foreach($item in $member)
                                                {
                                                    if($tagList[$i] -eq "STORAGE" -and $item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                                                    }
                                                    elseif($tagList[$i] -eq "MEMORY" -and $item.Name -ieq "MEMORY_COMPONENTS" -and $requiredValues.($item.Name).MEMORY_COMPONENT -ne $null)
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name).MEMORY_COMPONENT
                                                    }
                                                    else
                                                    {
                                                       $fieldobj | Add-Member $item.Name $requiredValues.($item.Name)
                                                    }
                                                }
                                                $tmpObj | Add-Member $fieldNameList[$i] $fieldobj
                                            }
                                        }
                                    }

                                }

                                if($tmpObj.MEMORY.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY -ne $null)
                                {
                                    $orgobj=$tmpObj.MEMORY.MEMORY_DETAILS
                                    $memArray= @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem= New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber=$p.Name.Substring(4)
                                            $cpudata=$orgobj.$($p.Name)
                                            $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                            $memArray+=$cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY.MEMORY_DETAILS = $memArray

                                    $orgobj=$tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY
                                    $memArray= @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem= New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber=$p.Name.Substring(4)
                                            $cpudata=$orgobj.$($p.Name)
                                            $cpuItem= New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                            $memArray+=$cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY.MEMORY_DETAILS_SUMMARY = $memArray
                                }
                                elseif($tmpObj.MEMORY_DETAILS -ne $null -and $tmpObj.MEMORY_DETAILS_SUMMARY -ne $null)
                                {
                                    $orgobj = $tmpObj.MEMORY_DETAILS
                                    $memArray = @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem = New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber = $p.Name.Substring(4)
                                            $cpudata = $orgobj.$($p.Name)
                                            $cpuItem = New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                            $memArray += $cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY_DETAILS = $memArray

                                    $orgobj = $tmpObj.MEMORY_DETAILS_SUMMARY
                                    $memArray = @()
                                    foreach($p in $($orgobj| Get-Member))
                                    {
                                        $cpuItem = New-Object PSobject
                                        if($p.MemberType -eq "NoteProperty" -and $($p.Name.StartsWith("CPU_")))
                                        {
                                            $cpunumber = $p.Name.Substring(4)
                                            $cpudata = $orgobj.$($p.Name)
                                            $cpuItem = New-Object PSobject -Property @{CPUNumber=$cpunumber; MemoryData=$cpudata} 
                                            $memArray += $cpuItem
                                        }
                                    }
                                    $tmpObj.MEMORY_DETAILS_SUMMARY = $memArray
                                }
                            }
                            catch{
                                $global:error.RemoveAt($global:error.count-1)
                                $errorWarningIncremented = 1
                                $errorCounter++
                                if($tmpObj.STATUS_TYPE -eq "OK"){
                                    $tmpObj.STATUS_TYPE = "ERROR"
                                }
                                if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                    $tmpObj.STATUS_MESSAGE = "No information available"
                                }
                                else{
                                    $tmpObj.STATUS_MESSAGE += "No information available"
                                }
                            }
                        }
                        $outputList += $tmpObj
                    }
                }
                catch{
                    $errorWarningIncremented = 1
                    $errorCounter++
                    if($retobject.runobject.IP -eq "")
                    {
                       Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    elseif($retobject.runobject.Hostname -eq "")
                    {
                       Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                    }
                    else{
                       Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    $stringerror = ""
                    $stringerror += $_.Exception.Message.ToString()
                    $stringerror += "`n"
                    $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                    Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOServerName{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
   
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
            $currUsername = ""
            $currPassword = ""
            Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_SERVER_NAME/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@	
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOServerName`n" + "Add-LevelWithValueAndOther`n" + "`n" +"SERVER_NAME`n" + "SERVER_OSNAME`n" + "SERVER_OSVERSION`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            $errmsg = Get-Message("MSG_ERROR_RETRIEVING_INFO")
            foreach($retobject in $rets)
            {
                try
                {
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret = Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''                    

                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
                    
                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    $tmpObj | Add-Member NoteProperty "SERVER_NAME" ""
                    $tmpObj | Add-Member NoteProperty "SERVER_OSNAME" ""
                    $tmpObj | Add-Member NoteProperty "SERVER_OSVERSION" ""
                   

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        try
                        {
                            if($xml.RIBCL.SERVER_NAME -ne $null)
                            {
                                # converting to string for passing as parameter to function Add-Level
                                $a = [string](($xml.RIBCL.SERVER_NAME).OuterXml)

                                $objForValues = New-Object PSObject
                                $requiredValues = Add-LevelWithValueAndOther $a "SERVER_NAME"
                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                foreach($item in $member){
                                    $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                }
                            }

                            if($xml.RIBCL.SERVER_OSNAME -ne $null)
                            {
                                # converting to string for passing as parameter to function Add-Level
                                $a = [string](($xml.RIBCL.SERVER_OSNAME).OuterXml)

                                $objForValues = New-Object PSObject
                                $requiredValues = Add-LevelWithValueAndOther $a "SERVER_OSNAME"
                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                foreach($item in $member){
                                    $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                }
                            }

                            if($xml.RIBCL.SERVER_OSVERSION -ne $null)
                            {
                                # converting to string for passing as parameter to function Add-Level
                                $a = [string](($xml.RIBCL.SERVER_OSVERSION).OuterXml)

                                $objForValues = New-Object PSObject
                                $requiredValues = Add-LevelWithValueAndOther $a "SERVER_OSVERSION"
                                $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                                foreach($item in $member){
                                    $tmpObj.($item.Name) = $requiredValues.($item.Name)
                                }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch
            {
			    $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOSNMPIMSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
 
    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
	<LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
		<RIB_INFO MODE="read">
			<GET_SNMP_IM_SETTINGS/>
		</RIB_INFO>
	</LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOSNMPIMSetting`n" + "Add-LevelWithValueAndOther`n" + "GET_SNMP_IM_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                $ret = Remove-SpecialChars -strRet $ret
                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_SNMP_IM_SETTINGS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_SNMP_IM_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member -MemberType NoteProperty $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOSpatial{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_SPATIAL/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOSpatial`n" + "Add-LevelWithValueAndOther`n" + "SPATIAL`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.30">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"                    

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.SPATIAL).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "SPATIAL"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOSSOSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
   
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SSO_INFO MODE="read">
         <GET_SSO_SETTINGS/>
      </SSO_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOSSOSetting`n" + "Add-LevelNoConcat`n" + "GET_SSO_SETTINGS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_SSO_SETTINGS).OuterXml)
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "GET_SSO_SETTINGS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member)
                            {
                                if($item.Definition.ToString().split("")[0] -eq "System.Object[]")
                                {
                                    $propMembers=$null
                                    $temp = New-Object PSObject
                                    for($i=0; $i -lt $requiredValues.($item.Name).Count ; $i++)
                                    {
                                        $propObj = $requiredValues.($item.Name)[$i]
                                        $propName = ($propObj | Get-Member | ?{$_.MemberType -eq "NoteProperty"}).Name
                                        $propValue = $propObj.$propName
                                        $propMembers += [ordered]@{$propName.ToUpper()="$propValue"}
                                    }
                                    $temp | Add-Member -NotePropertyMembers $propMembers -TypeName Asset
                                    $tmpObj | Add-Member NoteProperty $item.Name $temp                               
                                }
                                else
                                {    
                                    $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                                }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLODriveInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLODriveInfo`n" + "Add-LevelWithValueAndOther2`n" + "Drives`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettagDrive = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.Drives.BACKPLANE.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += "<DRIVES>"
                    $xml += $rettagDrive
                    $xml += "</DRIVES>"
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "DRIVE" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.Drives).OuterXml)
                        
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "Drives"
							$tmpObj | Add-Member NoteProperty "DRIVE" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.DRIVE = $requiredValues.($item.Name)
                                #$tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                            }

                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOStorageController{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
    
    $arrayForProcess=@()    
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="read">
            <GET_EMBEDDED_HEALTH>
                <GET_ALL_STORAGE/>
            </GET_EMBEDDED_HEALTH>
        </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOStorageController`n" + "Add-LevelWithValueAndOther2`n" + "STORAGE`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettagStorage = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.Storage.Controller.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += "<STORAGE>"
                    $xml += $rettagStorage
                    $xml += "</STORAGE>"
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.Storage).OuterXml)

                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "Storage"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member)
                            {
                               if($item.Name -ieq "DISCOVERY_STATUS" -and $requiredValues.($item.Name).STATUS -ne $null)
                               {
                                  $tmpObj | Add-Member $item.Name $requiredValues.($item.Name).STATUS
                               }
                               else
                               {
                                  $tmpObj | Add-Member $item.Name $requiredValues.($item.Name)
                               }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    
    return $outputList
	}
}

function Get-HPiLOTemperature{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()

    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOTemperature`n" + "Add-LevelNoConcat`n" + "TEMPERATURE`n" + "TEMP`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.TEMPERATURE.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "TEMP" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.TEMPERATURE).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "TEMPERATURE"
							$tmpObj | Add-Member NoteProperty "TEMP" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOUIDStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
    BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    
    $runObjects = @()
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()

    $arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_UID_STATUS />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOUIDStatus`n" + "Add-LevelWithValueAndOther`n" + "GET_UID_STATUS`n" + "UID`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "UID" ""
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_UID_STATUS).OuterXml)
                    
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_UID_STATUS"
							$tmpObj | Add-Member NoteProperty "UID" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOUser{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $GetUserLogin
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "GetUserLogin")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "GetUserLogin" ;parameterValue = $GetUserLogin;parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currGetUserLogin = $obj.GetUserLogin
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="read">
         <GET_USER USER_LOGIN=$(Add-Quotes -InString $currGetUserLogin)/>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOUser`n" + "Add-LevelWithValueAndOther`n" + "GET_USER`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret = Remove-SpecialChars -strRet $ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_USER).OuterXml)
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_USER"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOUserInfo{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="read">
         <GET_ALL_USER_INFO/>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOUserInfo`n" + "Add-LevelNoConcat`n" + "GET_ALL_USER_INFO`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret = Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ALL_USER_INFO).OuterXml)
                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "GET_ALL_USER_INFO"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj | Add-member $item.Name $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOUserList{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]

    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <USER_INFO MODE="read">
            <GET_ALL_USERS/>
        </USER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOUserList`n" + "Add-LevelWithValueAndOther2`n" + "GET_ALL_USERS`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret
				    $ret = Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'


                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml]$ret
                    
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    
                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_ALL_USERS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther2 $a "GET_ALL_USERS"
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                if($requiredValues.USER_LOGIN.GetType().Name -eq "String")
                                {
                                   $tmpObj | Add-Member $item.Name $requiredValues.USER_LOGIN
                                }
                                else
                                {
                                   $tmpObj | Add-Member $item.Name $requiredValues.USER_LOGIN.USER_LOGIN
                                }
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOVMStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,        
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
		[parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("FLOPPY","CDROM")] $Device
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Device")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }      
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Device" ;parameterValue = $Device; parameterDefaultValue="FLOPPY";
        parameterValidateValues=@{"FLOPPY"="FLOPPY";"CDROM"="CDROM"};
        parameterAcceptValidValues="FLOPPY,CDROM"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDevice = $obj.Device
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="read">       
         <GET_VM_STATUS DEVICE=$(Add-Quotes -InString $currDevice)/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOVMStatus`n" + "Add-LevelWithValueAndOther`n" + "GET_VM_STATUS`n" + "VM_APPLET`n" + "DEVICE`n" + "BOOT_OPTION`n" + "WRITE_PROTECT`n" + "IMAGE_INSERTED`n" + "IMAGE_URL`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "VM_APPLET" ""
                    #$tmpObj | Add-Member NoteProperty "DEVICE" ""
                    #$tmpObj | Add-Member NoteProperty "BOOT_OPTION" ""
                    #$tmpObj | Add-Member NoteProperty "WRITE_PROTECT" ""
                    #$tmpObj | Add-Member NoteProperty "IMAGE_INSERTED" ""
                    #$tmpObj | Add-Member NoteProperty "IMAGE_URL" ""
                    


                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_VM_STATUS).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelWithValueAndOther $a "GET_VM_STATUS"
							$tmpObj | Add-Member NoteProperty "VM_APPLET" ""
							$tmpObj | Add-Member NoteProperty "DEVICE" ""
							$tmpObj | Add-Member NoteProperty "BOOT_OPTION" ""
							$tmpObj | Add-Member NoteProperty "WRITE_PROTECT" ""
							$tmpObj | Add-Member NoteProperty "IMAGE_INSERTED" ""
							$tmpObj | Add-Member NoteProperty "IMAGE_URL" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.($item.Name) = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }

                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Get-HPiLOVRM{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$errmsg = ""
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="read">
         <GET_EMBEDDED_HEALTH />
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
        	$obj | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Get-HPiLOVRM`n" + "Add-LevelNoConcat`n" + "VRM`n" + "VRM`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets = Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret = $retobject.ret
				    $ret= Remove-SpecialChars -strRet $ret
                    if($outputType -eq "xml"){
                        $errmsg = Get-Message("MSG_ERROR_XML")
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
                    
                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'
                    $ret = [xml]$xml
                    $rettag = $ret.RIBCL.GET_EMBEDDED_HEALTH_DATA.VRM.OuterXML 

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $rettag
                    $xml += "`n" + "</RIBCL>"
                    
                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'

                    $xml = [xml] $ret

                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"
                    #$tmpObj | Add-Member NoteProperty "VRM" ""

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "ERROR"){
                        # converting to string for passing as parameter to function Add-Level
                        $a = [string](($xml.RIBCL.GET_EMBEDDED_HEALTH_DATA.VRM).OuterXml)

                        $objForValues = New-Object PSObject
                        try{
                            $requiredValues = Add-LevelNoConcat $a "VRM"
							$tmpObj | Add-Member NoteProperty "VRM" ""
                            $member = $requiredValues | Get-Member | ?{$_.MemberType -eq "NoteProperty"}
                            foreach($item in $member){
                                $tmpObj.VRM = $requiredValues.($item.Name)
                            }
                        }
                        catch{
                            $global:error.RemoveAt($global:error.count-1)
                            $errorWarningIncremented = 1
                            $errorCounter++
                            if($tmpObj.STATUS_TYPE -eq "OK"){
                                $tmpObj.STATUS_TYPE = "ERROR"
                            }
                            if($tmpObj.STATUS_MESSAGE -eq "OK"){
                                $tmpObj.STATUS_MESSAGE = "No information available"
                            }
                            else{
                                $tmpObj.STATUS_MESSAGE += "No information available"
                            }
                        }
                    }
                    $outputList += $tmpObj
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Import-HPiLOCertificate{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Certificate
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Certificate")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Certificate" ;parameterValue = $Certificate; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currCertificate = $obj.Certificate

            if(-not $currCertificate.Contains("-BEGIN CERTIFICATE-")){
               $currCertificate = "-----BEGIN CERTIFICATE-----`n" + $currCertificate
            }
            if(-not $currCertificate.Contains("-END CERTIFICATE-")){
               $currCertificate = $currCertificate + "`n-----END CERTIFICATE-----" 
            }
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <IMPORT_CERTIFICATE>
$currCertificate
         </IMPORT_CERTIFICATE>
         <RESET_RIB/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Import-HPiLOCertificate`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Import-HPiLOSSHKey{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SSHKey
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "SSHKey")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SSHKey" ;parameterValue = $SSHKey; parameterNeedInput = $true  }
	$arrayForProcess+=$tmpObj	
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currSSHKey = $obj.SSHKey
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <IMPORT_SSH_KEY>
-----BEGIN SSH KEY-----
$currSSHKey
-----END SSH KEY-----
         </IMPORT_SSH_KEY>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Import-HPiLOSSHKey`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Invoke-HPiLOProfileApply{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)]$DescName,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Stage", "Apply_Now")] $Action
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "DescName", "Action")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }   
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DescName"; parameterValue = $DescName; parameterNeedInput = $true; parameterMinLength = 1; parameterMaxLength = 27 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Action"; parameterValue = $Action; parameterNeedInput = $true;
        parameterValidateValues = @{"Stage" = "Stage"; "Apply_Now" = "Apply_Now"}; 
        parameterAcceptValidValues = "Stage, Apply_Now"}
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
            $currDescName = $obj.DescName
            $currAction = $obj.Action
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
                $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <PROFILE_APPLY>
                <PROFILE_DESC_NAME VALUE=$(Add-Quotes -InString $currDescName)/>
                <PROFILE_OPTIONS VALUE="none"/>
                <PROFILE_ACTION VALUE=$(Add-Quotes -InString $currAction)/>
            </PROFILE_APPLY>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
           	$obj  | Add-Member NoteProperty "RIBCLCommand" $send
        }
        if($OutputType -eq "ExternalCommand")
        {
           $send = "Invoke-HPiLOProfileApply`n" + $send
           Write-Output $send
        }
        else
        {
           $rets =  Execute-RIBCL($runObjects)
           foreach($retobject in $rets)
           {
              $errmsg = Get-Message("MSG_RETRIEVING_INFO")
              try
              {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $errmsg = Get-Message("MSG_ERROR_XML")
                    # creating XML in required format from the output 
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''                    

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    $errmsg = Get-Message("MSG_ERROR_FORMAT")
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }

              }
              catch
              {
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
 
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Invoke-HPiLOProfileDownload{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $DescName,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ProfileName,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Description,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $BLOBNameSpace,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $BLOBName,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $URL
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "DescName", "ProfileName", "Description", "BLOBNameSpace", "BLOBName", "URL")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DescName"; parameterValue = $DescName; parameterNeedInput = $true; parameterMinLength = 1; parameterMaxLength = 27}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ProfileName"; parameterValue = $ProfileName; parameterMinLength = 1; parameterMaxLength = 512}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Description"; parameterValue = $Description; parameterMinLength = 1}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "BLOBNameSpace" ;parameterValue = $BLOBNameSpace }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "BLOBName"; parameterValue = $BLOBName; parameterMinLength = 1; parameterMaxLength = 31}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "URL" ;parameterValue = $URL }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDescName = $obj.DescName
            if($obj.ProfileName -ne $null){
                $currProfileName = $obj.ProfileName
            }
            if($obj.Description -ne $null){
                $currDescription = $obj.Description
            }
            if($obj.BLOBNamespace -ne $null){
                $currBLOBNamespace = $obj.BLOBNamespace
            }
            if($obj.BLOBName -ne $null){
                $currBLOBName = $obj.BLOBName
            }
            if($obj.URL -ne $null){
                $currURL = $obj.URL
            }
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <PROFILE_DESC_DOWNLOAD>
                <PROFILE_DESC_NAME VALUE=$(Add-Quotes -InString $currDescName)/>`n
"@
            if($currProfileName -ne $null){
                $send = $send + @"
                <PROFILE_NAME VALUE=$(Add-Quotes -InString $currProfileName)/>`n
"@
            }
            if($currDescription -ne $null){
                $send = $send + @"
                <PROFILE_DESCRIPTION VALUE=$(Add-Quotes -InString $currDescription)/>`n
"@
            }
                $send = $send + @"
                <PROFILE_SCHEMA VALUE=$(Add-Quotes -InString intelligentprovisioning.1.0.0)/>`n
"@
            if($currBLOBNamespace -ne $null){
                $send = $send + @"
                <BLOB_NAMESPACE VALUE=$(Add-Quotes -InString $currBLOBNamespace)/>`n
"@
            }
            if($currBLOBName -ne $null){
                $send = $send + @"
                <BLOB_NAME VALUE=$(Add-Quotes -InString $currBLOBName)/>`n
"@
            }
            if($currURL -ne $null){
                $send = $send + @"
                <PROFILE_URL VALUE=$(Add-Quotes -InString $currURL)/>`n
"@ 
            }
			$send = $send + @"
            </PROFILE_DESC_DOWNLOAD>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Invoke-HPiLOProfileDownload`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Mount-HPiLOVirtualMedia{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("FLOPPY","CDROM")] $Device,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ImageURL
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Device", "ImageURL")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Device" ;parameterValue = $Device; parameterDefaultValue="FLOPPY";
        parameterValidateValues=@{"FLOPPY"="FLOPPY";"CDROM"="CDROM"};
        parameterAcceptValidValues="FLOPPY,CDROM"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ImageURL" ;parameterValue = $ImageURL; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDevice = $obj.Device
            $currImageURL = $obj.ImageURL
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <INSERT_VIRTUAL_MEDIA DEVICE=$(Add-Quotes -InString $currDevice) IMAGE_URL=$(Add-Quotes -InString $currImageURL)/>        
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Mount-HPiLOVirtualMedia`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Remove-HPiLOProfile{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $DescName
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "DescName")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DescName"; parameterValue = $DescName; parameterNeedInput = $true; parameterMinLength = 1; parameterMaxLength = 27}
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDescName = $obj.DescName
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <PROFILE_DELETE>
                <PROFILE_DESC_NAME VALUE=$(Add-Quotes -InString $currDescName)/>
            </PROFILE_DELETE>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Remove-HPiLOProfile`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Remove-HPiLOSSORecord{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [alias("Record")] $Index
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Index")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Index" ;parameterValue = $Index; parameterNeedInput = $true; parameterSupportInt = $true; parameterAlias=@("Record")  }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currIndex = $obj.Index

			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SSO_INFO MODE="write">
         <DELETE_SERVER INDEX=$(Add-Quotes -InString $currIndex) />
      </SSO_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Remove-HPiLOSSORecord`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Remove-HPiLOUser{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $RemoveUserLogin
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "RemoveUserLogin")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoveUserLogin" ;parameterValue = $RemoveUserLogin; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currRemoveUserLogin = $obj.RemoveUserLogin
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="write">
         <DELETE_USER USER_LOGIN=$(Add-Quotes -InString $currRemoveUserLogin)/>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Remove-HPiLOUser`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets = Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Remove-HPiLOUserSSHKey{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserLoginToEdit
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "UserLoginToEdit")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserLoginToEdit" ;parameterValue = $UserLoginToEdit; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currUserLoginToEdit = $obj.UserLoginToEdit
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <USER_INFO MODE="write">
            <MOD_USER USER_LOGIN=$(Add-Quotes -InString $currUserLoginToEdit)>
                <DEL_USERS_SSH_KEY/>
            </MOD_USER>
        </USER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Remove-HPiLOUserSSHKey`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Reset-HPiLOAdministratorPassword{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewPassword
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "NewPassword")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewPassword"; parameterValue = $NewPassword; parameterNeedInput = $true; parameterIsPassword = $true; parameterMaxLength = 39}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currNewPassword = $obj.NewPassword
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="write">
         <MOD_USER USER_LOGIN="Administrator">
            <PASSWORD value=$(Add-Quotes -InString $currNewPassword)/>
         </MOD_USER>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Reset-HPiLOAdministratorPassword`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Reset-HPiLORIB{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <RESET_RIB/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Reset-HPiLORIB`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Reset-HPiLOServer{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <RESET_SERVER/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Reset-HPiLOServer`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOAHSStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Enable","On","Disable","Off")] [alias("AHS","AHSLogging")] $AHSStatus
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "AHSStatus")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AHSStatus" ;parameterValue = $AHSStatus;parameterNeedInput = $true; parameterAlias=@("AHS","AHSLogging");
        parameterValidateValues=@{"Enable"="Enable";"On"="Enable"; "Disable"="Disable"; "Off"="Disable"};
        parameterAcceptValidValues="Enable,On,Disable,Off"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)
	
    if( $validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currAHSStatus = $obj.AHSStatus

			$send = @"
<RIBCL VERSION="2.30">
  <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
    <RIB_INFO MODE="write">
      <SET_AHS_STATUS VALUE=$(Add-Quotes -InString $currAHSStatus)/>
    </RIB_INFO>
  </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOAHSStatus`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOAssetTag{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AssetTag
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "AssetTag")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AssetTag" ;parameterValue = $AssetTag; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currAssetTag = $obj.AssetTag
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="write">
            <SET_ASSET_TAG VALUE =$(Add-Quotes -InString $currAssetTag)/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOAssetTag`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOBrownout{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $Enable
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Enable")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Enable" ;parameterValue = $Enable; parameterNeedInput = $true;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currEnable = $obj.Enable
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <MOD_GLOBAL_SETTINGS>
                <BROWNOUT_RECOVERY VALUE=$(Add-Quotes -InString $currEnable)/>
            </MOD_GLOBAL_SETTINGS>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOBrownout`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOComputerLockConfig{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ComputerLock
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "ComputerLock")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ComputerLock" ;parameterValue = $ComputerLock; parameterNeedInput = $true; parameterMinLength = 1 }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currComputerLock = $obj.ComputerLock

            if($currComputerLock -eq "Windows"){
                $currComputerLock = "windows"
            }
            if($currComputerLock -eq "Disabled"){
                $currComputerLock = "disabled"
            }

			if(($currComputerLock -eq "windows") -or ($currComputerLock -eq "disabled")){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <COMPUTER_LOCK_CONFIG>
                <COMPUTER_LOCK value="$currComputerLock"/>
            </COMPUTER_LOCK_CONFIG>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			else{#if($currComputerLockType -eq "custom"){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <COMPUTER_LOCK_CONFIG>
                <COMPUTER_LOCK value="custom"/>
                <COMPUTER_LOCK_KEY value=$(Add-Quotes -InString $currComputerLock)/>
            </COMPUTER_LOCK_CONFIG>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOComputerLockConfig`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLODefaultLanguage{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [alias("Language")] $LanguageID
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "LanguageID")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }      
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "LanguageID" ;parameterValue = $LanguageID; parameterNeedInput = $true; parameterAlias=@("Language") }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currLanguageID = $obj.LanguageID

			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <SET_LANGUAGE LANG_ID=$(Add-Quotes -InString $currlanguageID)/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLODefaultLanguage`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLODirectory{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Disable","Use_HP_Extended_Schema","Use_Directory_Default_Schema")] $LDAPDirectoryAuthentication,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $LocalUserAccount,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ServerAddress,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [alias("Port")] $ServerPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ObjectDN,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ObjectPassword,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext4,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext5,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext6,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext7,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext8,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext9,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext10,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext11,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext12,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext13,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext14,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserContext15
    )  
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "LDAPDirectoryAuthentication", "LocalUserAccount", "ServerAddress", "ServerPort", "ObjectDN", "ObjectPassword", "UserContext1", "UserContext2", "UserContext3", 
		"UserContext4", "UserContext5", "UserContext6", "UserContext7", "UserContext8", "UserContext9", "UserContext10", "UserContext11", "UserContext12", 
		"UserContext13", "UserContext14", "UserContext15")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
    END {
    if($global:error.Count -gt $errorCount)
    { return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "LDAPDirectoryAuthentication" ;parameterValue = $LDAPDirectoryAuthentication;
        parameterValidateValues=@{"Disable"="Disable";"Use_HP_Extended_Schema"="Use_HP_Extended_Schema";"Use_Directory_Default_Schema"="Use_Directory_Default_Schema"};
        parameterAcceptValidValues="Disable","Use_HP_Extended_Schema","Use_Directory_Default_Schema"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "LocalUserAccount" ;parameterValue = $LocalUserAccount;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off" }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ServerAddress" ;parameterValue = $ServerAddress }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ServerPort" ;parameterValue = $ServerPort; parameterSupportInt = $true; parameterAlias=@("Port") }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ObjectDN" ;parameterValue = $ObjectDN }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ObjectPassword"; parameterValue = $ObjectPassword; parameterIsPassword = $true; parameterMaxLength = 39 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext1" ;parameterValue = $UserContext1; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext2" ;parameterValue = $UserContext2; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext3" ;parameterValue = $UserContext3; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext4" ;parameterValue = $UserContext4; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext5" ;parameterValue = $UserContext5; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext6" ;parameterValue = $UserContext6; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext7" ;parameterValue = $UserContext7; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext8" ;parameterValue = $UserContext8; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext9" ;parameterValue = $UserContext9; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext10" ;parameterValue = $UserContext10; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext11" ;parameterValue = $UserContext11; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext12" ;parameterValue = $UserContext12; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext13" ;parameterValue = $UserContext13; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext14" ;parameterValue = $UserContext14; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "UserContext15" ;parameterValue = $UserContext15; parameterMaxLength = 128 }
    $arrayForProcess+=$tmpObj
    foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
            $currUsername = ""
            $currPassword = ""
            Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currHostPower = $obj.HostPower
            if($obj.LDAPDirectoryAuthentication -ne $null ){
                $currLDAPDirectoryAuthentication = $obj.LDAPDirectoryAuthentication
            }
            if($obj.LocalUserAccount -ne $null ){
                $currLocalUserAccount = $obj.LocalUserAccount
            }
            if($obj.ServerAddress -ne $null ){
                $currServerAddress = $obj.ServerAddress
            }
            if($obj.ServerPort -ne $null ){
                $currServerPort = $obj.ServerPort
            }
            if($obj.ObjectDN -ne $null ){
                $currObjectDN = $obj.ObjectDN
            }
            if($obj.ObjectPassword -ne $null ){
                $currObjectPassword = $obj.ObjectPassword
            }
            if($obj.UserContext1 -ne $null ){
                $currUserContext1 = $obj.UserContext1
            }
            if($obj.UserContext2 -ne $null ){
                $currUserContext2 = $obj.UserContext2
            }
            if($obj.UserContext3 -ne $null ){
                $currUserContext3 = $obj.UserContext3
            }
            if($obj.UserContext4 -ne $null ){
                $currUserContext4 = $obj.UserContext4
            }
            if($obj.UserContext5 -ne $null ){
                $currUserContext5 = $obj.UserContext5
            }
            if($obj.UserContext6 -ne $null ){
                $currUserContext6 = $obj.UserContext6
            }
            if($obj.UserContext7 -ne $null ){
                $currUserContext7 = $obj.UserContext7
            }
            if($obj.UserContext8 -ne $null ){
                $currUserContext8 = $obj.UserContext8
            }
            if($obj.UserContext9 -ne $null ){
                $currUserContext9 = $obj.UserContext9
            }
            if($obj.UserContext10 -ne $null ){
                $currUserContext10 = $obj.UserContext10
            }
            if($obj.UserContext11 -ne $null ){
                $currUserContext11 = $obj.UserContext11
            }
            if($obj.UserContext12 -ne $null ){
                $currUserContext12 = $obj.UserContext12
            }
            if($obj.UserContext13 -ne $null ){
                $currUserContext13 = $obj.UserContext13
            }
            if($obj.UserContext14 -ne $null ){
                $currUserContext14 = $obj.UserContext14
            }
            if($obj.UserContext15 -ne $null ){
                $currUserContext15 = $obj.UserContext15
            }
		
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <DIR_INFO MODE="write">
            <MOD_DIR_CONFIG> 
"@
            if($currLDAPDirectoryAuthentication -ieq "Disable"){
                $send = $send + @"
`n                <DIR_AUTHENTICATION_ENABLED value= "N"/>
                <DIR_ENABLE_GRP_ACCT value= "N"/>
"@
            }
            elseif($currLDAPDirectoryAuthentication -ieq "Use_HP_Extended_Schema")
            {
                $send = $send + @"
`n                <DIR_AUTHENTICATION_ENABLED value= "Y"/>
                <DIR_ENABLE_GRP_ACCT value= "N"/>
"@
            }
            elseif($currLDAPDirectoryAuthentication -ieq "Use_Directory_Default_Schema")
            {
                $send = $send + @"
`n                <DIR_AUTHENTICATION_ENABLED value= "Y"/>
                <DIR_ENABLE_GRP_ACCT value= "Y"/>
"@
            }
            if($currLocalUserAccount -ne $null){
                $send = $send + @"
`n                <DIR_LOCAL_USER_ACCT value=$(Add-Quotes -InString $currLocalUserAccount)/>
"@
            } 
            if($currServerAddress -ne $null){
                $send = $send + @"
`n               <DIR_SERVER_ADDRESS value=$(Add-Quotes -InString $currServerAddress)/>
"@
            } 
            if($currServerPort -ne $null){
                $send = $send + @"
`n                <DIR_SERVER_PORT value=$(Add-Quotes -InString $currServerPort)/>
"@
            } 
            if($currObjectDN -ne $null){
                $send = $send + @"
`n                <DIR_OBJECT_DN value=$(Add-Quotes -InString $currObjectDN)/>
"@
            }
            if($currObjectPassword -ne $null){
                $send = $send + @"
`n                <DIR_OBJECT_PASSWORD value=$(Add-Quotes -InString $currObjectPassword)/>
"@
            }
            if($currUserContext1 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_1 value=$(Add-Quotes -InString $currUserContext1)/>
"@
            }
            if($currUserContext2 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_2 value=$(Add-Quotes -InString $currUserContext2)/>
"@
            }
            if($currUserContext3 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_3 value=$(Add-Quotes -InString $currUserContext3)/>
"@
            }
            if($currUserContext4 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_4 value=$(Add-Quotes -InString $currUserContext4)/>
"@
            }
            if($currUserContext5 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_5 value=$(Add-Quotes -InString $currUserContext5)/>
"@
            }
            if($currUserContext6 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_6 value=$(Add-Quotes -InString $currUserContext6)/>
"@
            }
            if($currUserContext7 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_7 value=$(Add-Quotes -InString $currUserContext7)/>
"@
            }
            if($currUserContext8 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_8 value=$(Add-Quotes -InString $currUserContext8)/>
"@
            }
            if($currUserContext9 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_9 value=$(Add-Quotes -InString $currUserContext9)/>
"@
            }
            if($currUserContext10 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_10 value=$(Add-Quotes -InString $currUserContext10)/>
"@
            }
            if($currUserContext11 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_11 value=$(Add-Quotes -InString $currUserContext11)/>
"@
            }
            if($currUserContext12 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_12 value=$(Add-Quotes -InString $currUserContext12)/>
"@
            }
            if($currUserContext13 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_13 value=$(Add-Quotes -InString $currUserContext13)/>
"@
            }
            if($currUserContext14 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_14 value=$(Add-Quotes -InString $currUserContext14)/>
"@
            }
            if($currUserContext15 -ne $null){
                $send = $send + @"
`n                <DIR_USER_CONTEXT_15 value=$(Add-Quotes -InString $currUserContext15)/>
"@
            }
			$send = $send + @"
`n             </MOD_DIR_CONFIG>
          </DIR_INFO>
       </LOGIN>
    </RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLODirectory`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOFactoryDefault{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }     
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <FACTORY_DEFAULTS/>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOFactoryDefault`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOGlobalSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("0", "15", "30", "60", "120")] $SessionTimeout,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $F8Prompt,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $HTTPPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $HTTPSPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $RemoteConsolePort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateRange(0,39)]$MinPassword,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $iLOFunctEnable,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $VirtualMediaPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $F8LoginRequired,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SSHPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $SSHStatus,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Disabled","Enabled-no_authentication","Enabled-authentication_required")] $SerialCLIStatus,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("9600","19200","38400","57600","115200")] $SerialCLISpeed,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $RBSUPOSTIP,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $EnforceAES,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Disabled","Enabled-every_failure","Enabled-every_2nd_failure","Enabled-every_3rd_failure","Enabled-every_5th_failure")] $AuthenticationFailureLogin,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","No","N","Disable")] $SNMPAccess,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPTrapPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $RemoteSysLog,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $RemoteSysLogPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $RemoteSysLogServerAddress,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $AlertMail,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AlertMailEmail,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AlertMailSenderDomain,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AlertMailSMTPServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $IPMIDCMIOverLAN,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $VSPLog,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $PropagateTimeToHost
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "SessionTimeout", "F8Prompt", "HTTPPort", "HTTPSPort", "RemoteConsolePort", 
		"MinPassword", "iLOFunctEnable", "VirtualMediaPort", "F8LoginRequired", "SSHPort", "SSHStatus", "SerialCLIStatus", "SerialCLISpeed", "RBSUPOSTIP", 
		"EnforceAES", "AuthenticationFailureLogin", "SNMPAccess", "SNMPPort", "SNMPTrapPort", "RemoteSysLog", "RemoteSysLogPort", 
		"RemoteSysLogServerAddress", "AlertMail", "AlertMailEmail", "AlertMailSenderDomain", "AlertMailSMTPServer", "IPMIDCMIOverLAN", "VSPLog")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SessionTimeout" ;parameterValue = $SessionTimeout; parameterSupportInt = $true; 
        parameterValidateValues=@{"0"="0";"15"="15";"30"="30"; "60"="60";"120"="120"};
        parameterAcceptValidValues="0, 15, 30, 60, 120"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "F8Prompt" ;parameterValue = $F8Prompt;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "HTTPPort" ;parameterValue = $HTTPPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "HTTPSPort" ;parameterValue = $HTTPSPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoteConsolePort" ;parameterValue = $RemoteConsolePort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "MinPassword" ;parameterValue = $MinPassword; parameterSupportInt = $true; parameterMinRange = 0; parameterMaxRange = 39 }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "iLOFunctEnable" ;parameterValue = $iLOFunctEnable;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VirtualMediaPort" ;parameterValue = $VirtualMediaPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "F8LoginRequired" ;parameterValue = $F8LoginRequired;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SSHPort" ;parameterValue = $SSHPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SSHStatus" ;parameterValue = $SSHStatus;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SerialCLIStatus" ;parameterValue = $SerialCLIStatus; parameterSupportInt = $true;
        parameterValidateValues=@{"Disabled"="1";"Enabled-no_authentication"="2"; "Enabled-authentication_required"="3"};
        parameterAcceptValidValues="Disabled,Enabled-no_authentication,Enabled-authentication_required"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SerialCLISpeed" ;parameterValue = $SerialCLISpeed; parameterSupportInt = $true;
        parameterValidateValues=@{"9600"="1";"19200"="2"; "38400"="3";"57600"="4"; "115200"="5"};
        parameterAcceptValidValues="9600,19200,38400,57600,115200"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RBSUPOSTIP" ;parameterValue = $RBSUPOSTIP;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "EnforceAES" ;parameterValue = $EnforceAES;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N"}
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AuthenticationFailureLogin" ;parameterValue = $AuthenticationFailureLogin; parameterSupportInt = $true;
        parameterValidateValues=@{"Disabled"="0";"Enabled-every_failure"="1";"Enabled-every_2nd_failure"="2";"Enabled-every_3rd_failure"="3";"Enabled-every_5th_failure"="5"};
        parameterAcceptValidValues="Disabled,Enabled-every_failure,Enabled-every_2nd_failure,Enabled-every_3rd_failure,Enabled-every_5th_failure"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SNMPAccess" ;parameterValue = $SNMPAccess;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "No"="No";"N"="No";"Disable"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,No,N,Disable"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SNMPPort" ;parameterValue = $SNMPPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNMPTrapPort" ;parameterValue = $SNMPTrapPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoteSysLog" ;parameterValue = $RemoteSysLog;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoteSysLogPort" ;parameterValue = $RemoteSysLogPort; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoteSysLogServerAddress" ;parameterValue = $RemoteSysLogServerAddress }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AlertMail" ;parameterValue = $AlertMail;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AlertMailEmail" ;parameterValue = $AlertMailEmail }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AlertMailSenderDomain" ;parameterValue = $AlertMailSenderDomain }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AlertMailSMTPServer" ;parameterValue = $AlertMailSMTPServer }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPMIDCMIOverLAN" ;parameterValue = $IPMIDCMIOverLAN;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "VSPLog" ;parameterValue = $VSPLog;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PropagateTimeToHost" ;parameterValue = $PropagateTimeToHost;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"On"="Y";"No"="N";"N"="N";"Disable"="N";"Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.SessionTimeout -ne $null ){
                $currSessionTimeout = $obj.SessionTimeout
            }
            if($obj.F8Prompt -ne $null ){
                $currF8Prompt = $obj.F8Prompt
            }
            if($obj.HTTPPort -ne $null ){
                $currHTTPPort = $obj.HTTPPort
            }
            if($obj.HTTPSPort -ne $null ){
                $currHTTPSPort = $obj.HTTPSPort
            }
            if($obj.RemoteConsolePort -ne $null ){
                $currRemoteConsolePort = $obj.RemoteConsolePort
            }
            if($obj.MinPassword -ne $null ){
                $currMinPassword = $obj.MinPassword
            }
            if($obj.iLOFunctEnable -ne $null ){
                $curriLOFunctEnable = $obj.iLOFunctEnable
            }
            if($obj.VirtualMediaPort -ne $null ){
                $currVirtualMediaPort = $obj.VirtualMediaPort
            }
            if($obj.F8LoginRequired -ne $null ){
                $currF8LoginRequired = $obj.F8LoginRequired
            }
            if($obj.SSHPort -ne $null ){
                $currSSHPort = $obj.SSHPort
            }
            if($obj.SSHStatus -ne $null ){
                $currSSHStatus = $obj.SSHStatus
            }
            if($obj.SerialCLIStatus -ne $null ){
                $currSerialCLIStatus = $obj.SerialCLIStatus
            }
            if($obj.SerialCLISpeed -ne $null ){
                $currSerialCLISpeed = $obj.SerialCLISpeed
            }
            if($obj.RBSUPOSTIP -ne $null ){
                $currRBSUPOSTIP = $obj.RBSUPOSTIP
            }
            if($obj.EnforceAES -ne $null ){
                $currEnforceAES = $obj.EnforceAES
            }
            if($obj.AuthenticationFailureLogin -ne $null ){
                $currAuthenticationFailureLogin = $obj.AuthenticationFailureLogin
            }
            if($obj.SNMPAccess -ne $null ){
                $currSNMPAccess = $obj.SNMPAccess
            }
            if($obj.SNMPPort -ne $null ){
                $currSNMPPort = $obj.SNMPPort
            }
            if($obj.SNMPTrapPort -ne $null ){
                $currSNMPTrapPort = $obj.SNMPTrapPort
            }
            if($obj.RemoteSysLog -ne $null ){
                $currRemoteSysLog = $obj.RemoteSysLog
            }
            if($obj.RemoteSysLogPort -ne $null ){
                $currRemoteSysLogPort = $obj.RemoteSysLogPort
            }
            if($obj.RemoteSysLogServerAddress -ne $null ){
                $currRemoteSysLogServerAddress = $obj.RemoteSysLogServerAddress
            }
            if($obj.AlertMail -ne $null ){
                $currAlertMail = $obj.AlertMail
            }
            if($obj.AlertMailEmail -ne $null ){
                $currAlertMailEmail = $obj.AlertMailEmail
            }
            if($obj.AlertMailSenderDomain -ne $null ){
                $currAlertMailSenderDomain = $obj.AlertMailSenderDomain
            }
            if($obj.AlerTMailSMTPServer -ne $null ){
                $currAlertMailSMTPServer = $obj.AlerTMailSMTPServer
            }
            if($obj.IPMIDCMIOverLAN -ne $null ){
                $currIPMIDCMIOverLAN = $obj.IPMIDCMIOverLAN
            }
            if($obj.VSPLog -ne $null ){
                $currVSPLog = $obj.VSPLog
            }
            if($obj.PropagateTimeToHost -ne $null ){
                $currPropagateTimeToHost = $obj.PropagateTimeToHost
            }  
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <MOD_GLOBAL_SETTINGS>            
"@
            if($currSessionTimeout -ne $null){
                $send = $send + @"
                <SESSION_TIMEOUT value=$(Add-Quotes -InString $currSessionTimeout)/>
"@
            }
            if($currF8Prompt -ne $null){
                $send = $send + @"
                <F8_PROMPT_ENABLED value=$(Add-Quotes -InString $currF8Prompt)/>
"@
            }
            if($currHTTPPort -ne $null){
                $send = $send + @"
                <HTTP_PORT value=$(Add-Quotes -InString $currHTTPPort)/>
"@
            }
            if($currHTTPSPort -ne $null){
                $send = $send + @"
                <HTTPS_PORT value=$(Add-Quotes -InString $currHTTPSPort)/>
"@
            }
            if($currRemoteConsolePort -ne $null){
                $send = $send + @"
                <REMOTE_CONSOLE_PORT value=$(Add-Quotes -InString $currRemoteConsolePort)/>
"@
            }
            if($currMinPassword -ne $null){
                $send = $send + @"
                <MIN_PASSWORD value=$(Add-Quotes -InString $currMinPassword)/>
"@
            }
            if($curriLOFunctEnable -ne $null){
                $send = $send + @"
                <ILO_FUNCT_ENABLED value=$(Add-Quotes -InString $curriLOFunctEnable)/>
"@
            }
            if($currVirtualMediaPort -ne $null){
                $send = $send + @"
                <VIRTUAL_MEDIA_PORT value=$(Add-Quotes -InString $currVirtualMediaPort)/>
"@
            }
            if($currF8LoginRequired -ne $null){
                $send = $send + @"
                <F8_LOGIN_REQUIRED value=$(Add-Quotes -InString $currF8LoginRequired)/>
"@
            }
            if($currSSHPort -ne $null){
                $send = $send + @"
                <SSH_PORT value=$(Add-Quotes -InString $currSSHPort)/>
"@
            }
            if($currSSHStatus -ne $null){
                $send = $send + @"
                <SSH_STATUS value=$(Add-Quotes -InString $currSSHStatus)/>
"@
            }
            if($currSerialCLIStatus -ne $null){
                $send = $send + @"
                <SERIAL_CLI_STATUS value=$(Add-Quotes -InString $currSerialCLIStatus)/>
"@
            }
            if($currSerialCLISpeed -ne $null){
                $send = $send + @"
                <SERIAL_CLI_SPEED value=$(Add-Quotes -InString $currSerialCLISpeed)/>
"@
            }
            if($currRBSUPOSTIP -ne $null){
                $send = $send + @"
                <RBSU_POST_IP value=$(Add-Quotes -InString $currRBSUPOSTIP)/>
"@
            }
            if($currEnforceAES -ne $null){
                $send = $send + @"
                <ENFORCE_AES value=$(Add-Quotes -InString $currEnforceAES)/>
"@
            }
            if($currAuthenticationFailureLogin -ne $null){
                $send = $send + @"
                <AUTHENTICATION_FAILURE_LOGGING value=$(Add-Quotes -InString $currAuthenticationFailureLogin)/>
"@
            }
            if($currSNMPAccess -ne $null){
                $send = $send + @"
                <SNMP_ACCESS_ENABLED value = $(Add-Quotes -InString $currSNMPAccess)/>
"@
            }
            if($currSNMPPort -ne $null){
                $send = $send + @"
                <SNMP_PORT value=$(Add-Quotes -InString $currSNMPPort)/>
"@
            }
            if($currSNMPTrapPort -ne $null){
                $send = $send + @"
                <SNMP_TRAP_PORT value=$(Add-Quotes -InString $currSNMPTrapPort)/>
"@
            }
            if($currRemoteSysLog -ne $null){
                $send = $send + @"
                <REMOTE_SYSLOG_ENABLE VALUE=$(Add-Quotes -InString $currRemoteSysLog)/>
"@
            }
            if($currRemoteSysLogPort -ne $null){
                $send = $send + @"
                <REMOTE_SYSLOG_PORT VALUE=$(Add-Quotes -InString $currRemoteSysLogPort)/>
"@
            }
            if($currRemoteSysLogServerAddress -ne $null){
                $send = $send + @"
                <REMOTE_SYSLOG_SERVER_ADDRESS VALUE=$(Add-Quotes -InString $currRemoteSysLogServerAddress)/>
"@
            }
            if($currAlertMail -ne $null){
                $send = $send + @"
                <ALERTMAIL_ENABLE VALUE=$(Add-Quotes -InString $currAlertMail)/>
"@
            }
            if($currAlertMailEmail -ne $null){
                $send = $send + @"
                <ALERTMAIL_EMAIL_ADDRESS VALUE=$(Add-Quotes -InString $currAlertMailEmail)/>
"@
            }
            if($currAlertMailSenderDomain -ne $null){
                $send = $send + @"
                <ALERTMAIL_SENDER_DOMAIN VALUE=$(Add-Quotes -InString $currAlertMailSenderDomain)/>
"@
            }
            if($currAlertMailSMTPServer -ne $null){
                $send = $send + @"
                <ALERTMAIL_SMTP_SERVER VALUE=$(Add-Quotes -InString $currAlertMailSMTPServer) />
"@
            }
            if($currIPMIDCMIOverLAN -ne $null){
                $send = $send + @"
                <IPMI_DCMI_OVER_LAN_ENABLED value=$(Add-Quotes -InString $currIPMIDCMIOverLAN)/>
"@
            }
            if($currVSPLog -ne $null){
                $send = $send + @"
                <VSP_LOG_ENABLE VALUE=$(Add-Quotes -InString $currVSPLog) />
"@
            }
            if($currPropagateTimeToHost -ne $null){
                $send = $send + @"
                <PROPAGATE_TIME_TO_HOST VALUE=$(Add-Quotes -InString $currPropagateTimeToHost) />
"@
            }
			$send = $send + @"
            </MOD_GLOBAL_SETTINGS>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOGlobalSetting`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }     
    return $outputList
	}
}

function Set-HPiLOHostAPO{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No","Random","On","Off","Restore","15","30","45","60")] $ServerAutoPower
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "ServerAutoPower")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "ServerAutoPower"; parameterValue = $ServerAutoPower; parameterNeedInput = $true; parameterSupportInt = $true;
        parameterValidateValues=@{"Yes"="Yes";"No"="No";"Random"="Random";"On"="On";"Off"="Off";"Restore"="Restore";"15"="15";"30"="30"; "45"="45";"60"="60"};
        parameterAcceptValidValues="Yes,No,Random,On,Off,Restore,15,30,45,60"}
    $arrayForProcess+=$tmpObj
    foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
            $currUsername = ""
            $currPassword = ""
            Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currServerAutoPower = $obj.ServerAutoPower
            
            $send = @"
<RIBCL VERSION="2.30">
  <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
    <SERVER_INFO MODE="write">
      <SERVER_AUTO_PWR VALUE=$(Add-Quotes -InString $currServerAutoPower)/>
    </SERVER_INFO>
  </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOHostAPO`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOHostPower{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","On","No","Off")] $HostPower
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "HostPower")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "HostPower" ;parameterValue = $HostPower; parameterNeedInput = $true;
        parameterValidateValues=@{"Yes"="Yes";"On"="Yes";"No"="No";"Off"="No"};
        parameterAcceptValidValues="Yes,On,No,Off"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currHostPower = $obj.HostPower
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="write">
            <SET_HOST_POWER HOST_POWER=$(Add-Quotes -InString $currHostPower)/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOHostPower`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOHostPowerSaver{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateRange(1,4)] $PowerSaver
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "PowerSaver")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }      
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PowerSaver"; parameterValue = $PowerSaver; parameterNeedInput = $true; parameterSupportInt = $true;
        parameterMinRange=1; parameterMaxRange=4}
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
            $currUsername = ""
            $currPassword = ""
            Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currPowerSaver = $obj.PowerSaver
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <SET_HOST_POWER_SAVER HOST_POWER_SAVER=$(Add-Quotes -InString $currPowerSaver)/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOHostPowerSaver`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOHotKeyConfig{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlT,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlU,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlV,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlW,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlX,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $CtrlY
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "CtrlT", "CtrlU", "CtrlV", "CtrlW", "CtrlX", "CtrlY")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlT" ;parameterValue = $CtrlT }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlU" ;parameterValue = $CtrlU }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlV" ;parameterValue = $CtrlV }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlW" ;parameterValue = $CtrlW }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlX" ;parameterValue = $CtrlX }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "CtrlY" ;parameterValue = $CtrlY }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if( $validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.CtrlT -ne $null){
                $currCtrlT = $obj.CtrlT
            }
            if($obj.CtrlU -ne $null){
                $currCtrlU = $obj.CtrlU
            }
            if($obj.CtrlV -ne $null){
                $currCtrlV = $obj.CtrlV
            }
            if($obj.CtrlW -ne $null){
                $currCtrlW = $obj.CtrlW
            }
            if($obj.CtrlX -ne $null){
                $currCtrlX = $obj.CtrlX
            }
            if($obj.CtrlY -ne $null){
                $currCtrlY = $obj.CtrlY
            }
            
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <HOTKEY_CONFIG>
"@
			if($currCtrlT -ne $null)
			{
			$send += @"
`n                <CTRL_T value=$(Add-Quotes -InString $currCtrlT)/>
"@
			}
			if($currCtrlU -ne $null)
			{
			$send += @"
`n                <CTRL_U value=$(Add-Quotes -InString $currCtrlU)/>
"@
			}
			if($currCtrlV -ne $null)
			{
			$send += @"
`n                <CTRL_V value=$(Add-Quotes -InString $currCtrlV)/>
"@
			}
			if($currCtrlW -ne $null)
			{
			$send += @"
`n                <CTRL_W value=$(Add-Quotes -InString $currCtrlW)/>
"@
			}
			if($currCtrlX -ne $null)
			{
			$send += @"
`n                <CTRL_X value=$(Add-Quotes -InString $currCtrlX)/>
"@
			}
			if($currCtrlY -ne $null)
			{
			$send += @"
`n                <CTRL_Y value=$(Add-Quotes -InString $currCtrlY)/>
"@
			}
			$send += @"
`n            </HOTKEY_CONFIG>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOHotKeyConfig`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOKerberosConfig{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")][alias("State")] $KerberosAuthentication,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Realm,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [alias("Address")] $KDCAddress,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [alias("Port")] $KDCPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Keytab
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "KerberosAuthentication", "Realm", "KDCAddress", "KDCPort", "Keytab")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "KerberosAuthentication" ;parameterValue = $KerberosAuthentication; parameterAlias=@("State");
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Realm" ;parameterValue = $Realm }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "KDCAddress" ;parameterValue = $KDCAddress;parameterAlias=@("Address") }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "KDCPort" ;parameterValue = $KDCPort; parameterSupportInt = $true; parameterAlias=@("Port") }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Keytab" ;parameterValue = $Keytab }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.KerberosAuthentication -ne $null ){
                $currKerberosAuthentication = $obj.KerberosAuthentication
            }
            if($obj.Realm -ne $null ){
                $currRealm = $obj.Realm
            }
            if($obj.KDCAddress -ne $null ){
                $currKDCAddress = $obj.KDCAddress
            }
            if($obj.KDCPort -ne $null ){
                $currKDCPort = $obj.KDCPort
            }
            if($obj.Keytab -ne $null ){
                $currKeytab = $obj.Keytab
            }
            
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <DIR_INFO MODE = "write">
            <MOD_DIR_CONFIG>            
"@
			if($currKerberosAuthentication -ne $null){
				$send = $send + @"
                <DIR_KERBEROS_ENABLED value= $(Add-Quotes -InString $currKerberosAuthentication)/>
"@
            }
            if($currRealm -ne $null){
                $send = $send + @"
                <DIR_KERBEROS_REALM value=$(Add-Quotes -InString $currRealm)/>
"@
            }
            if($currKDCAddress -ne $null){
                $send = $send + @"
                <DIR_KERBEROS_KDC_ADDRESS value=$(Add-Quotes -InString $currKDCAddress)/>
"@
            }
            if($currKDCPort -ne $null){
                $send = $send + @"
                <DIR_KERBEROS_KDC_PORT value=$(Add-Quotes -InString $currKDCPort)/>
"@
            }
            if($currKeytab -ne $null){
                $send = $send + @"
                <DIR_KERBEROS_KEYTAB>
$currKeytab
                </DIR_KERBEROS_KEYTAB> 
"@
            }
			$send = $send + @"
         </MOD_DIR_CONFIG>
      </DIR_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOKerberosConfig`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOLicenseKey{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Key
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Key")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Key" ;parameterValue = $Key; parameterNeedInput = $true  }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currKey = $obj.Key
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <LICENSE>
            <ACTIVATE KEY=$(Add-Quotes -InString $currKey)/>
         </LICENSE>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOLicenseKey`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOLockConfiguration{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","No","N","Disable")] $LockConfig,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","No","N","Disable")] $F8LoginRequired
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "LockConfig", "F8LoginRequired")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "LockConfig" ;parameterValue = $LockConfig; parameterNeedInput = $true;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"No"="N";"N"="N";"Disable"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,No,N,Disable"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "F8LoginRequired" ;parameterValue = $F8LoginRequired; parameterNeedInput = $true;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y";"No"="N";"N"="N";"Disable"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,No,N,Disable"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currLockConfig = $obj.LockConfig
            $currF8LoginRequired = $obj.F8LoginRequired
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <MOD_GLOBAL_SETTINGS>
            <LOCK_CONFIGURATION value=$(Add-Quotes -InString $currLockConfig)/>
            <F8_LOGIN_REQUIRED  value=$(Add-Quotes -InString $currF8LoginRequired)/>
         </MOD_GLOBAL_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOLockConfiguration`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLONetworkSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $EnableNIC,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $RegDDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $PingGateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $DHCPDomain,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $SpeedAutoselect,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Automatic","Auto","10","100")] $NICSpeed,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off","Automatic","Auto")] [alias("Duplex")] $FullDuplex,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $DHCPEnable,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $IPAddress,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SubnetMask,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $GatewayIP,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $DNSName,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Domain,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$DHCPGateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$DHCPDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$DHCPWINSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$DHCPStaticRoute,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$RegWINSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrimDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $TerDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrimWINSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecWINSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute1Dest,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute1Gateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute2Dest,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute2Gateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute3Dest,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute3Gateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$DHCPSNTP,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNTPServer1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNTPServer2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Timezone,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Yes","No")]$EnclosureIPEnable,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("DISABLED","LINKACT","RCVDATA","DHCP")] $iLONicAutoSelect
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "EnableNIC", "RegDDNSServer", "PingGateway", "DHCPDomain", "SpeedAutoselect", 
		"NICSpeed","FullDuplex", "DHCPEnable", "IPAddress", "SubnetMask", "GatewayIP", "DNSName", "Domain", "DHCPGateway", "DHCPDNSServer", 
		"DHCPWINSServer", "DHCPStaticRoute", "RegWINSServer", "PrimDNSServer", "SecDNSServer", "TerDNSServer", "PrimWINSServer", "SecWINSServer", "StaticRoute1Dest", 
		"StaticRoute1Gateway", "StaticRoute2Dest", "StaticRoute2Gateway", "StaticRoute3Dest", "StaticRoute3Gateway", "DHCPSNTP", "SNTPServer1", "SNTPServer2", 
		"Timezone", "EnclosureIPEnable", "iLONicAutoSelect")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "EnableNIC" ;parameterValue = $EnableNIC;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "RegDDNSServer" ;parameterValue = $RegDDNSServer;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PingGateway" ;parameterValue = $PingGateway; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPDomain" ;parameterValue = $DHCPDomain;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SpeedAutoselect" ;parameterValue = $SpeedAutoselect;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "NICSpeed"; parameterValue = $NICSpeed; parameterSupportInt = $true;
        parameterValidateValues=@{"Automatic"="Automatic";"Auto"="Auto";"10"="10";"100"="100"};
        parameterAcceptValidValues="Automatic,Auto,10,100"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "FullDuplex" ;parameterValue = $FullDuplex; parameterAlias=@("Duplex");
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No";"Automatic"="Automatic";"Auto"="Automatic"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off,Automatic,Auto"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPEnable" ;parameterValue = $DHCPEnable;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "IPAddress" ;parameterValue = $IPAddress }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SubnetMask" ;parameterValue = $SubnetMask  }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "GatewayIP" ;parameterValue = $GatewayIP}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DNSName" ;parameterValue = $DNSName }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Domain" ;parameterValue = $Domain }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPGateway"; parameterValue = $DHCPGateway; 
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPDNSServer"; parameterValue = $DHCPDNSServer;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPWINSServer"; parameterValue = $DHCPWINSServer;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPStaticRoute"; parameterValue = $DHCPStaticRoute; 
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}        
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "RegWINSServer"; parameterValue = $RegWINSServer;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrimDNSServer" ;parameterValue = $PrimDNSServer }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SecDNSServer" ;parameterValue = $SecDNSServer }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "TerDNSServer" ;parameterValue = $TerDNSServer }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrimWINSServer" ;parameterValue = $PrimWINSServer }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SecWINSServer" ;parameterValue = $SecWINSServer }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute1Dest" ;parameterValue = $StaticRoute1Dest }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute1Gateway" ;parameterValue = $StaticRoute1Gateway }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute2Dest" ;parameterValue = $StaticRoute2Dest  }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute2Gateway" ;parameterValue = $StaticRoute2Gateway }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute3Dest" ;parameterValue = $StaticRoute3Dest }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "StaticRoute3Gateway" ;parameterValue = $StaticRoute3Gateway }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "DHCPSNTP" ;parameterValue = $DHCPSNTP;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNTPServer1" ;parameterValue = $SNTPServer1 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNTPServer2" ;parameterValue = $SNTPServer2 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Timezone" ;parameterValue = $Timezone }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "EnclosureIPEnable" ;parameterValue = $EnclosureIPEnable;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "iLONicAutoSelect" ;parameterValue = $iLONicAutoSelect;
        parameterValidateValues=@{"DISABLED"="DISABLED";"LINKACT"="LINKACT";"RCVDATA"="RCVDATA"; "DHCP"="DHCP"};
        parameterAcceptValidValues="DISABLED,LINKACT,RCVDATA,DHCP"}
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.EnableNIC -ne $null){
                $currEnableNIC = $obj.EnableNIC
            }

            if($obj.REGDDNSServer -ne $null){
                $currREGDDNSServer = $obj.REGDDNSServer
            }

            if($obj.PingGateway -ne $null){
                $currPingGateway = $obj.PingGateway
            }

            if($obj.DHCPDomain -ne $null){
                $currDHCPDomain = $obj.DHCPDomain
            }

            if($obj.SpeedAutoselect -ne $null){
                $currSpeedAutoselect = $obj.SpeedAutoselect
            }

            if($obj.NICSpeed -eq "Automatic" -or $obj.NICSpeed -eq "Auto"){
                $currNICSpeed = "Automatic"
            }
            else{
                $currNICSpeed = $obj.NICSpeed
            }
            
            if($obj.FullDuplex -ne $null){
                $currFullDuplex = $obj.FullDuplex
            }

            if($obj.DHCPEnable  -ne $null){
                $currDHCPEnable = $obj.DHCPEnable
            }
            if($obj.iLONicAutoSelect  -ne $null){
                $curriLONicAutoSelect = $obj.iLONicAutoSelect
            }
             
            $currIPAddress = $obj.IPAddress
            $currSubnetMask = $obj.SubnetMask
            $currGatewayIP = $obj.GatewayIP
            $currDNSName = $obj.DNSName
            $currDomain = $obj.Domain
            $currDHCPGateway = $obj.DHCPGateway
            $currDHCPDNSServer = $obj.DHCPDNSServer
            $currDHCPWINSServer = $obj.DHCPWINSServer
            $currDHCPStaticRoute = $obj.DHCPStaticRoute
            $currRegWINSServer = $obj.RegWINSServer
            $currPrimDNSServer = $obj.PrimDNSServer
            $currSecDNSServer = $obj.SecDNSServer
            $currTerDNSServer = $obj.TerDNSServer
            $currPrimWINSServer = $obj.PrimWINSServer
            $currSecWINSServer = $obj.SecWINSServer
            $currStaticRoute1Dest = $obj.StaticRoute1Dest
            $currStaticRoute1Gateway = $obj.StaticRoute1Gateway
            $currStaticRoute2Dest = $obj.StaticRoute2Dest
            $currStaticRoute2Gateway = $obj.StaticRoute2Gateway
            $currStaticRoute3Dest = $obj.StaticRoute3Dest
            $currStaticRoute3Gateway = $obj.StaticRoute3Gateway
            $currDHCPSNTP = $obj.DHCPSNTP
            $currSNTPServer1 = $obj.SNTPServer1
            $currSNTPServer2 = $obj.SNTPServer2
            $currTimezone = $obj.Timezone
            $currEnclosureIPEnable = $obj.EnclosureIPEnable
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <MOD_NETWORK_SETTINGS>`n
"@
			if($currEnableNIC -ne $null){
				$send = $send + @"
            <ENABLE_NIC value=$(Add-Quotes -InString $currEnableNIC)/>`n
"@
            }
            if($currRegDDNSServer -ne $null){
                $send = $send + @"
            <REG_DDNS_SERVER value=$(Add-Quotes -InString $currRegDDNSServer)/>`n
"@
            }
            if($currPingGateway -ne $null){
                $send = $send + @"
            <PING_GATEWAY value=$(Add-Quotes -InString $currPingGateway)/>`n
"@
            }
            if($currDHCPDomain -ne $null){
                $send = $send + @"
            <DHCP_DOMAIN_NAME value=$(Add-Quotes -InString $currDHCPDomain)/>`n
"@
            }
            if($currSpeedAutoselect -ne $null){
                $send = $send + @"
            <SPEED_AUTOSELECT value=$(Add-Quotes -InString $currSpeedAutoselect)/>`n
"@
            }
            if($currNICSpeed -ne $null){
                $send = $send + @"
            <NIC_SPEED value=$(Add-Quotes -InString $currNICSpeed)/>`n
"@
            }
            if($currFullDuplex -ne $null){
                $send = $send + @"
            <FULL_DUPLEX value=$(Add-Quotes -InString $currFullDuplex)/>`n
"@
            }
            if($currDHCPEnable -ne $null){
                $send = $send + @"
            <DHCP_ENABLE value=$(Add-Quotes -InString $currDHCPEnable)/>`n
"@
            }
            if($currIPAddress -ne $null){
                $send = $send + @"
            <IP_ADDRESS value=$(Add-Quotes -InString $currIPAddress)/>`n
"@
            }
            if($currSubnetMask -ne $null){
                $send = $send + @"
            <SUBNET_MASK value=$(Add-Quotes -InString $currSubnetMask)/>`n
"@
            }
            if($currGatewayIP -ne $null){
                $send = $send + @"
            <GATEWAY_IP_ADDRESS value=$(Add-Quotes -InString $currGatewayIP)/>`n
"@
            }
            if($currDNSName -ne $null){
                $send = $send + @"
            <DNS_NAME value=$(Add-Quotes -InString $currDNSName)/>`n
"@
            }
            if($currDomain -ne $null){
                $send = $send + @"
            <DOMAIN_NAME value=$(Add-Quotes -InString $currDomain)/>`n
"@
            }
            if($currDHCPGateway -ne $null){
                $send = $send + @"
            <DHCP_GATEWAY value=$(Add-Quotes -InString $currDHCPGateway)/>`n
"@
            }
            if($currDHCPDNSServer -ne $null){
                $send = $send + @"
            <DHCP_DNS_SERVER value=$(Add-Quotes -InString $currDHCPDNSServer)/>`n
"@
            }
            if($currDHCPWINSServer -ne $null){
                $send = $send + @"
            <DHCP_WINS_SERVER value=$(Add-Quotes -InString $currDHCPWINSServer)/>`n
"@
            }
            if($currDHCPStaticRoute -ne $null){
                $send = $send + @"
            <DHCP_STATIC_ROUTE value=$(Add-Quotes -InString $currDHCPStaticRoute)/>`n
"@
            }
            if($currRegWINSServer -ne $null){
                $send = $send + @"
            <REG_WINS_SERVER value=$(Add-Quotes -InString $currRegWINSServer)/>`n
"@
            }
            if($currPrimDNSServer -ne $null){
                $send = $send + @"
            <PRIM_DNS_SERVER value=$(Add-Quotes -InString $currPrimDNSServer)/>`n
"@
            }
            if($currSecDNSServer -ne $null){
                $send = $send + @"
            <SEC_DNS_SERVER value=$(Add-Quotes -InString $currSecDNSServer)/>`n
"@
            }
            if($currTerDNSServer -ne $null){
                $send = $send + @"
            <TER_DNS_SERVER value=$(Add-Quotes -InString $currTerDNSServer)/>`n
"@
            }
            if($currPrimWINSServer -ne $null){
                $send = $send + @"
            <PRIM_WINS_SERVER value=$(Add-Quotes -InString $currPrimWINSServer)/>`n
"@
            }
            if($currSecWINSServer -ne $null){
                $send = $send + @"
            <SEC_WINS_SERVER value=$(Add-Quotes -InString $currSecWINSServer)/>`n
"@
            }
            if($currStaticRoute1Dest -ne $null -and $currStaticRoute1Gateway -ne $null){
                $send = $send + @"
            <STATIC_ROUTE_1 DEST=$(Add-Quotes -InString $currStaticRoute1Dest) GATEWAY=$(Add-Quotes -InString $currStaticRoute1Gateway)/>`n
"@
            }
            if($currStaticRoute2Dest -ne $null -and $currStaticRoute2Gateway -ne $null){
                $send = $send + @"
            <STATIC_ROUTE_2 DEST=$(Add-Quotes -InString $currStaticRoute2Dest) GATEWAY=$(Add-Quotes -InString $currStaticRoute2Gateway)/>`n
"@
            }
            if($currStaticRoute3Dest -ne $null -and $currStaticRoute3Gateway -ne $null){
                $send = $send + @"
            <STATIC_ROUTE_3 DEST=$(Add-Quotes -InString $currStaticRoute3Dest) GATEWAY=$(Add-Quotes -InString $currStaticRoute3Gateway)/>`n
"@
            }
            if($currDHCPSNTP -ne $null){
                $send = $send + @"
            <DHCP_SNTP_SETTINGS value=$(Add-Quotes -InString $currDHCPSNTP)/>`n
"@
            }
            if($currSNTPServer1 -ne $null){
                $send = $send + @"
            <SNTP_SERVER1 value=$(Add-Quotes -InString $currSNTPServer1)/>`n
"@
            }
            if($currSNTPServer2 -ne $null){
                $send = $send + @"
            <SNTP_SERVER2 value=$(Add-Quotes -InString $currSNTPServer2)/>`n
"@
            }
            if($currTimezone -ne $null){
                $send = $send + @"
            <TIMEZONE value=$(Add-Quotes -InString $currTimezone)/>`n
"@
            }
            if($currEnclosureIPEnable -ne $null){
                $send = $send + @"
            <ENCLOSURE_IP_ENABLE VALUE=$(Add-Quotes -InString $currEnclosureIPEnable)/>`n
"@
            }
            if($curriLONicAutoSelect -ne $null){
                $send = $send + @"
            <ILO_NIC_AUTO_SELECT VALUE=$(Add-Quotes -InString $curriLONicAutoSelect)/>`n
"@
            }
			$send = $send + @"
         </MOD_NETWORK_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLONetworkSetting`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOIPv6NetworkSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
		[parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false,  ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $IPAddress1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $IPAddress1PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $IPAddress2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $IPAddress2PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $IPAddress3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $IPAddress3PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $IPAddress4,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $IPAddress4PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $DefaultGateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute1Destination,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $StaticRoute1PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute1Gateway,    
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute2Destination,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $StaticRoute2PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute2Gateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute3Destination,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateRange(0,128)] $StaticRoute3PrefixLength,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $StaticRoute3Gateway,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrimDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $TerDNSServer,  
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $RegDDNSServer,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $AddressAutoCfg,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $PreferredProtocol,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6Stateless,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6Stateful,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6RapidCommit,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6SNTPSetting,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6DNSSever,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("Enable","Disable")] $DHCPv6DomainName        
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "IPAddress1", "IPAddress1PrefixLength", "IPAddress2", "IPAddress2PrefixLength", 
		"IPAddress3", "IPAddress3PrefixLength", "IPAddress4", "IPAddress4PrefixLength", "DefaultGateway", "StaticRoute1Destination", 
		"StaticRoute1PrefixLength", "StaticRoute1Gateway", "StaticRoute2Destination", "StaticRoute2PrefixLength", "StaticRoute2Gateway", 
		"StaticRoute3Destination", "StaticRoute3PrefixLength", "StaticRoute3Gateway", "PrimDNSServer", "SecDNSServer", "TerDNSServer", "RegDDNSServer", 
		"AddressAutoCfg", "PreferredProtocol", "DHCPv6Stateless", "DHCPv6Stateful", "DHCPv6RapidCommit", "DHCPv6SNTPSetting", "DHCPv6DNSSever", "DHCPv6DomainName")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress1" ;parameterValue = $IPAddress1  }	
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress1PrefixLength" ;parameterValue = $IPAddress1PrefixLength; parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128}

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress2" ;parameterValue = $IPAddress2  }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress2PrefixLength" ;parameterValue = $IPAddress2PrefixLength; parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128 }

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress3" ;parameterValue = $IPAddress3  }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress3PrefixLength" ;parameterValue = $IPAddress3PrefixLength; parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128 }

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress4" ;parameterValue = $IPAddress4 }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "IPAddress4PrefixLength" ;parameterValue = $IPAddress4PrefixLength; parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128 }

    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DefaultGateway"; parameterValue = $DefaultGateway}

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute1Destination" ;parameterValue = $StaticRoute1Destination  }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute1PrefixLength" ;parameterValue = $StaticRoute1PrefixLength ;parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute1Gateway" ;parameterValue = $StaticRoute1Gateway }

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute2Destination" ;parameterValue = $StaticRoute2Destination  }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute2PrefixLength" ;parameterValue = $StaticRoute2PrefixLength ;parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute2Gateway" ;parameterValue = $StaticRoute2Gateway }

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute3Destination" ;parameterValue = $StaticRoute3Destination }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute3PrefixLength" ;parameterValue = $StaticRoute3PrefixLength ;parameterSupportInt= $true; parameterMinRange=0; parameterMaxRange=128}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "StaticRoute3Gateway" ;parameterValue = $StaticRoute3Gateway }

	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "PrimDNSServer" ;parameterValue = $PrimDNSServer }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SecDNSServer" ;parameterValue = $SecDNSServer }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "TerDNSServer" ;parameterValue = $TerDNSServer }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AddressAutoCfg" ;parameterValue = $AddressAutoCfg ; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable"}
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RegDDNSServer" ;parameterValue = $RegDDNSServer; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable"}
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "PreferredProtocol" ;parameterValue = $PreferredProtocol; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
	$arrayForProcess+=$tmpObj

    $tmpObj = @{parameterName = "DHCPv6Stateless" ;parameterValue = $DHCPv6Stateless; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DHCPv6Stateful" ;parameterValue = $DHCPv6Stateful;
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DHCPv6RapidCommit" ;parameterValue = $DHCPv6RapidCommit; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DHCPv6SNTPSetting" ;parameterValue = $DHCPv6SNTPSetting; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable"}
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DHCPv6DNSSever" ;parameterValue = $DHCPv6DNSSever; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
    $arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "DHCPv6DomainName" ;parameterValue = $DHCPv6DomainName; 
        parameterValidateValues=@{"Enable"="Y";"Disable"="N"}; 
        parameterAcceptValidValues="Enable, Disable" }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj            
                   
            $ipv6_one_section="[0-9A-Fa-f]{1,4}"
			$ipv4_one_section="(2[0-4]\d|25[0-5]|[01]?\d\d?)"

			#regex for single ip address without range (,-) 
			#could not be range
			$ipv4_regex_inipv6_single="${ipv4_one_section}(\.${ipv4_one_section}){3}"  
			$ipv6_regex_single="^\s*(((${ipv6_one_section}:){7}(${ipv6_one_section}|:))|((${ipv6_one_section}:){6}(:${ipv6_one_section}|${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){5}(((:${ipv6_one_section}){1,2})|:${ipv4_regex_inipv6_single}|:))|((${ipv6_one_section}:){4}(((:${ipv6_one_section}){1,3})|((:${ipv6_one_section})?:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){3}(((:${ipv6_one_section}){1,4})|((:${ipv6_one_section}){0,2}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){2}(((:${ipv6_one_section}){1,5})|((:${ipv6_one_section}){0,3}:${ipv4_regex_inipv6_single})|:))|((${ipv6_one_section}:){1}(((:${ipv6_one_section}){1,6})|((:${ipv6_one_section}){0,4}:${ipv4_regex_inipv6_single})|:))|(:(((:${ipv6_one_section}){1,7})|((:${ipv6_one_section}){0,5}:${ipv4_regex_inipv6_single})|:)))(%.+)?\s*$" 
			$ipv4_regex_single="^\s*${ipv4_one_section}(\.${ipv4_one_section}){3}\s*$"
	
            $currIPAddress1 = $obj.IPAddress1
            $currIPAddress1PrefixLength= $obj.IPAddress1PrefixLength
            if($currIPAddress1PrefixLength -eq 0){
               $currIPAddress1PrefixLength = ""
            }
            if(($currIPAddress1 -ne $null) -and !($currIPAddress1 -eq "" -or $currIPAddress1 -eq "::")){
              if($currIPAddress1 -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currIPAddress1))
                $currIPAddress1 =$null
              }
            }
        
            $currIPAddress2 = $obj.IPAddress2
            $currIPAddress2PrefixLength= $obj.IPAddress2PrefixLength
            if($currIPAddress2PrefixLength -eq 0){
               $currIPAddress2PrefixLength = ""
            }
            if(($currIPAddress2 -ne $null) -and !($currIPAddress2 -eq "" -or $currIPAddress2 -eq "::")){
              if($currIPAddress2 -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currIPAddress2))
                $currIPAddress2 =$null
              }
            }

            $currIPAddress3 = $obj.IPAddress3
            $currIPAddress3PrefixLength= $obj.IPAddress3PrefixLength
            if($currIPAddress3PrefixLength -eq 0){
               $currIPAddress3PrefixLength = ""
            }
            if(($currIPAddress3 -ne $null) -and !($currIPAddress3 -eq "" -or $currIPAddress3 -eq "::")){
              if($currIPAddress3 -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currIPAddress3))
                $currIPAddress3 =$null
              }
            }

            $currIPAddress4 = $obj.IPAddress4
            $currIPAddress4PrefixLength= $obj.IPAddress4PrefixLength
            if($currIPAddress4PrefixLength -eq 0){
               $currIPAddress4PrefixLength = ""
            }
            if(($currIPAddress4 -ne $null) -and !($currIPAddress4 -eq "" -or $currIPAddress4 -eq "::" )){
              if($currIPAddress4 -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currIPAddress4))
                $currIPAddress4 =$null
              }
            }
            $currDefaultGateway = $obj.DefaultGateway
            if(($currDefaultGateway -ne $null) -and !($currDefaultGateway -eq "" -or $currDefaultGateway -eq "::")){
              if($currDefaultGateway -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currDefaultGateway))
                $currDefaultGateway =$null
              }
            }

            $currStaticRoute1Destination = $obj.StaticRoute1Destination
             if(($currStaticRoute1Destination -ne $null) -and !($currStaticRoute1Destination -eq "" -or $currStaticRoute1Destination -eq "::")){
              if($currStaticRoute1Destination -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute1Destination))
                $currStaticRoute1Destination =$null
              }
            }
            $currStaticRoute1PrefixLength = $obj.StaticRoute1PrefixLength
            if($currStaticRoute1PrefixLength -eq 0){
               $currStaticRoute1PrefixLength = ""
            }
            $currStaticRoute1Gateway = $obj.StaticRoute1Gateway
            if(($currStaticRoute1Gateway -ne $null) -and !($currStaticRoute1Gateway -eq "" -or $currStaticRoute1Gateway -eq "::")){
              if($currStaticRoute1Gateway -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute1Gateway))
                $currStaticRoute1Gateway =$null
              }
            }

            $currStaticRoute2Destination = $obj.StaticRoute2Destination
            if(($currStaticRoute2Destination -ne $null) -and !($currStaticRoute2Destination -eq "" -or $currStaticRoute2Destination -eq "::")){
              if($currStaticRoute2Destination -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute2Destination))
                $currStaticRoute2Destination =$null
              }
            }
            $currStaticRoute2PrefixLength = $obj.StaticRoute2PrefixLength
            if($currStaticRoute2PrefixLength -eq 0){
               $currStaticRoute2PrefixLength = ""
            }
            $currStaticRoute2Gateway = $obj.StaticRoute2Gateway
             if(($currStaticRoute2Gateway -ne $null) -and !($currStaticRoute2Gateway -eq "" -or $currStaticRoute2Gateway -eq "::")){
              if($currStaticRoute2Gateway -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute2Gateway))
                $currStaticRoute2Gateway =$null
              }
            }

            $currStaticRoute3Destination = $obj.StaticRoute3Destination
             if(($currStaticRoute3Destination -ne $null) -and !($currStaticRoute3Destination -eq "" -or $currStaticRoute3Destination -eq "::")){
              if($currStaticRoute3Destination -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute3Destination))
                $currStaticRoute3Destination =$null
              }
            }
            $currStaticRoute3PrefixLength = $obj.StaticRoute3PrefixLength
            if($currStaticRoute3PrefixLength -eq 0){
               $currStaticRoute3PrefixLength = ""
            }
            $currStaticRoute3Gateway = $obj.StaticRoute3Gateway
             if(($currStaticRoute3Gateway -ne $null) -and !($currStaticRoute3Gateway -eq "" -or $currStaticRoute3Gateway -eq "::")){
              if($currStaticRoute3Gateway -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currStaticRoute3Gateway))
                $currStaticRoute3Gateway =$null
              }
            }

            $currPrimDNSServer = $obj.PrimDNSServer
             if(($currPrimDNSServer -ne $null) -and !($currPrimDNSServer -eq "" -or $currPrimDNSServer -eq "::")){
              if($currPrimDNSServer -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currPrimDNSServer))
                $currPrimDNSServer =$null
              }
            }
            $currSecDNSServer = $obj.SecDNSServer 
             if(($currSecDNSServer -ne $null) -and !($currSecDNSServer -eq "" -or $currSecDNSServer -eq "::")){
              if($currSecDNSServer -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currSecDNSServer))
                $currSecDNSServer =$null
              }
            }
            $currTerDNSServer=$obj.TerDNSServer
            if(($currTerDNSServer -ne $null) -and !($currTerDNSServer -eq "" -or $currTerDNSServer -eq "::")){
              if($currTerDNSServer -notmatch $ipv6_regex_single){
                throw $([string]::Format($(Get-Message("MSG_IVALID_IPV6")) ,$currTerDNSServer))
                $currTerDNSServer =$null
              }
            }

			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write">
         <MOD_NETWORK_SETTINGS>`n
"@

            if(($currIPAddress1 -ne $null -and $currIPAddress1PrefixLength -eq $null) -or
               ($currIPAddress1 -eq $null -and $currIPAddress1PrefixLength -ne $null)){
               throw $([string]::Format($(Get-Message("MSG_INVALID_IPV6ADDRESS_PREFIX_Length")) ,1))
            }
            elseif(!($currIPAddress1 -eq "" -or $currIPAddress1 -eq "::") -and $currIPAddress1PrefixLength -eq ""){
               throw $([string]::Format($(Get-Message("MSG_CONFLICTED_IPV6ADDRESS_PREFIX_LENGTH")) ,1))
            }

            if(($currIPAddress2 -ne $null -and $currIPAddress2PrefixLength -eq $null) -or
               ($currIPAddress2 -eq $null -and $currIPAddress2PrefixLength -ne $null)){
               throw $([string]::Format($(Get-Message("MSG_INVALID_IPV6ADDRESS_PREFIX_Length")) ,2))
            }
            elseif(!($currIPAddress2 -eq "" -or $currIPAddress2 -eq "::") -and $currIPAddress2PrefixLength -eq ""){
               throw $([string]::Format($(Get-Message("MSG_CONFLICTED_IPV6ADDRESS_PREFIX_LENGTH")) ,2))
            }

            if(($currIPAddress3 -ne $null -and $currIPAddress3PrefixLength -eq $null) -or
               ($currIPAddress3 -eq $null -and $currIPAddress3PrefixLength -ne $null)){
               throw $([string]::Format($(Get-Message("MSG_INVALID_IPV6ADDRESS_PREFIX_Length")) ,3))
            }
            elseif(!($currIPAddress3 -eq "" -or $currIPAddress3 -eq "::") -and $currIPAddress3PrefixLength -eq ""){
               throw $([string]::Format($(Get-Message("MSG_CONFLICTED_IPV6ADDRESS_PREFIX_LENGTH")) ,3))
            }

            if(($currIPAddress4 -ne $null -and $currIPAddress4PrefixLength -eq $null) -or
               ($currIPAddress4 -eq $null -and $currIPAddress4PrefixLength -ne $null)){
               throw $([string]::Format($(Get-Message("MSG_INVALID_IPV6ADDRESS_PREFIX_Length")) ,4))              
            }
            elseif(!($currIPAddress4 -eq "" -or $currIPAddress4 -eq "::") -and $currIPAddress4PrefixLength -eq ""){
               throw $([string]::Format($(Get-Message("MSG_CONFLICTED_IPV6ADDRESS_PREFIX_LENGTH")) ,4))
            }

          if(($currIPAddress1 -ne $null -and $currIPAddress1PrefixLength -ne $null) -or 
             ($currIPAddress2 -ne $null -and $currIPAddress2PrefixLength -ne $null) -or
             ($currIPAddress3 -ne $null -and $currIPAddress3PrefixLength -ne $null) -or
             ($currIPAddress4 -ne $null -and $currIPAddress4PrefixLength -ne $null)){

             if($currIPAddress1 -ne $null -and $currIPAddress1PrefixLength -ne $null){
                $send = $send + @"
            <IPV6_ADDRESS value=$(Add-Quotes -InString $currIPAddress1) PREFIXLEN=$(Add-Quotes -InString $currIPAddress1PrefixLength) ADDR_SOURCE="Static"/>`n
"@
            }
            else{
                 $send = $send + @"
            <IPV6_ADDRESS value=""  PREFIXLEN=""/>`n
"@
            }


            if($currIPAddress2 -ne $null -and $currIPAddress2PrefixLength -ne $null){
                $send = $send + @"
            <IPV6_ADDRESS value=$(Add-Quotes -InString $currIPAddress2) PREFIXLEN=$(Add-Quotes -InString $currIPAddress2PrefixLength) ADDR_SOURCE="Static"/>`n
"@
            }
            else{
                 $send = $send + @"
            <IPV6_ADDRESS value=""  PREFIXLEN=""/>`n
"@
            }


            if($currIPAddress3 -ne $null -and $currIPAddress3PrefixLength -ne $null){
                $send = $send + @"
           <IPV6_ADDRESS value=$(Add-Quotes -InString $currIPAddress3) PREFIXLEN=$(Add-Quotes -InString $currIPAddress3PrefixLength) ADDR_SOURCE="Static"/>`n
"@
            }
            else{
                $send = $send + @"
            <IPV6_ADDRESS value=""  PREFIXLEN=""/>`n
"@
            }


            if($currIPAddress4 -ne $null -and $currIPAddress4PrefixLength -ne $null){
                $send = $send + @"
            <IPV6_ADDRESS value=$(Add-Quotes -InString $currIPAddress4) PREFIXLEN=$(Add-Quotes -InString $currIPAddress4PrefixLength) ADDR_SOURCE="Static"/>`n
"@
            }
            else{
                $send = $send + @"
            <IPV6_ADDRESS value=""  PREFIXLEN=""/>`n
"@
            }              
         }
            
            if($currStaticRoute1Destination -ne $null -and $currStaticRoute1PrefixLength -ne $null -and $currStaticRoute1Gateway -ne $null ){
                $send = $send + @"
            <IPV6_STATIC_ROUTE_1 IPV6_DEST=$(Add-Quotes -InString $currStaticRoute1Destination) PREFIXLEN=$(Add-Quotes -InString $currStaticRoute1PrefixLength) IPV6_GATEWAY=$(Add-Quotes -InString $currStaticRoute1Gateway)/>`n
"@
            }
            elseif($currStaticRoute1Destination -eq $null -and $currStaticRoute1PrefixLength -eq $null -and $currStaticRoute1Gateway -eq $null){
                #no action
            }
            else{
                throw $([string]::Format($(Get-Message("MSG_INVALID_STATIC_ROUTE_DESTINATION_PREFIX_GATEWAY")) ,1))                      
            }

            if($currStaticRoute2Destination -ne $null -and $currStaticRoute2PrefixLength -ne $null -and $currStaticRoute2Gateway -ne $null ){
                $send = $send + @"
            <IPV6_STATIC_ROUTE_2 IPV6_DEST=$(Add-Quotes -InString $currStaticRoute2Destination) PREFIXLEN=$(Add-Quotes -InString $currStaticRoute2PrefixLength) IPV6_GATEWAY=$(Add-Quotes -InString $currStaticRoute2Gateway)/>`n
"@
            }
            elseif($currStaticRoute2Destination -eq $null -and $currStaticRoute2PrefixLength -eq $null -and $currStaticRoute2Gateway -eq $null){
                #no action
            }
            else{
                throw $([string]::Format($(Get-Message("MSG_INVALID_STATIC_ROUTE_DESTINATION_PREFIX_GATEWAY")) ,2))                      
            }
                    
            if($currStaticRoute3Destination -ne $null -and $currStaticRoute3PrefixLength -ne $null -and $currStaticRoute3Gateway -ne $null ){
                $send = $send + @"
            <IPV6_STATIC_ROUTE_3 IPV6_DEST=$(Add-Quotes -InString $currStaticRoute3Destination) PREFIXLEN=$(Add-Quotes -InString $currStaticRoute3PrefixLength) IPV6_GATEWAY=$(Add-Quotes -InString $currStaticRoute3Gateway)/>`n
"@
            }
            elseif($currStaticRoute3Destination -eq $null -and $currStaticRoute3PrefixLength -eq $null -and $currStaticRoute3Gateway -eq $null){
                #no action
            }
            else{
                throw $([string]::Format($(Get-Message("MSG_INVALID_STATIC_ROUTE_DESTINATION_PREFIX_GATEWAY")) ,3))                      
            }

            if($currPrimDNSServer -ne $null){
                $send = $send + @"
            <IPV6_PRIM_DNS_SERVER VALUE=$(Add-Quotes -InString $currPrimDNSServer)/>`n
"@
            }
            if($currSecDNSServer -ne $null){
                $send = $send + @"
            <IPV6_SEC_DNS_SERVER VALUE=$(Add-Quotes -InString $currSecDNSServer)/>`n
"@
            }
            if($currTerDNSServer -ne $null){
                $send = $send + @"
            <IPV6_TER_DNS_SERVER VALUE=$(Add-Quotes -InString $currTerDNSServer)/>`n
"@
            }
            if($currDefaultGateway -ne $null){
                $send = $send + @"
            <IPV6_DEFAULT_GATEWAY VALUE=$(Add-Quotes -InString $currDefaultGateway)/>`n
"@
            }
            $currPreferredProtocol = $obj.PreferredProtocol
            if($currPreferredProtocol -ne $null){
                $send = $send + @"
            <IPV6_PREFERRED_PROTOCOL VALUE=$(Add-Quotes -InString $currPreferredProtocol)/>`n
"@
            }
            $currAddressAutoCfg = $obj.AddressAutoCfg
            if($currAddressAutoCfg -ne $null){
                $send = $send + @"
            <IPV6_ADDR_AUTOCFG VALUE=$(Add-Quotes -InString $currAddressAutoCfg)/>`n
"@
            }
            $currRegDDNSServer = $obj.RegDDNSServer
            if($currRegDDNSServer -ne $null){
                $send = $send + @"
            <IPV6_REG_DDNS_SERVER VALUE=$(Add-Quotes -InString $currRegDDNSServer)/>`n
"@
            }
            $currDHCPv6Stateless = $obj.DHCPv6Stateless
            if($currDHCPv6Stateless -ne $null){
                $send = $send + @"
            <DHCPV6_STATELESS_ENABLE value=$(Add-Quotes -InString $currDHCPv6Stateless)/>`n
"@
            } 
            $currDHCPv6Stateful = $obj.DHCPv6Stateful  
            if($currDHCPv6Stateful -ne $null){
                $send = $send + @"
            <DHCPV6_STATEFUL_ENABLE value=$(Add-Quotes -InString $currDHCPv6Stateful)/>`n
"@
            }
            $currDHCPv6RapidCommit =  $obj.DHCPv6RapidCommit 
            if($currDHCPv6RapidCommit -ne $null){
                $send = $send + @"
            <DHCPV6_RAPID_COMMIT value=$(Add-Quotes -InString $currDHCPv6RapidCommit)/>`n
"@
            }  
            $currDHCPv6SNTPSetting = $obj.DHCPv6SNTPSetting
            if($currDHCPv6SNTPSetting -ne $null){
                $send = $send + @"
            <DHCPV6_SNTP_SETTINGS value=$(Add-Quotes -InString $currDHCPv6SNTPSetting)/>`n
"@
            }
            $currDHCPv6DNSSever = $obj.DHCPv6DNSSever
            if($currDHCPv6DNSSever -ne $null){
                $send = $send + @"
            <DHCPV6_DNS_SERVER value=$(Add-Quotes -InString $currDHCPv6DNSSever)/>`n
"@
            } 
            $currDHCPv6DomainName = $obj.DHCPv6DomainName
            if($currDHCPv6DomainName -ne $null){
                $send = $send + @"
            <DHCPV6_DOMAIN_NAME VALUE=$(Add-Quotes -InString $currDHCPv6DomainName)/>`n
"@
            } 

			$send = $send + @"
         </MOD_NETWORK_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOIPv6NetworkSetting`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                   }                  
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOOneTimeBootOrder{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] [ValidateSet("NORMAL","FLOPPY","CDROM","HDD","USB","RBSU","NETWORK","UEFI_SHELL",
        "Intelligent_Provisioning","BootCustom","EMB-MENU","EMB-ACU","EMB-HPSUM-AUTO","EMB-DIAGS")] $Device,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $BootCustomName
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Device", "BootCustomName")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Device" ;parameterValue = $Device; parameterNeedInput = $true; 
        parameterValidateValues = @{"NORMAL"="NORMAL";"FLOPPY"="FLOPPY";"CDROM"="CDROM";"HDD"="HDD";"USB"="USB";"RBSU"="RBSU";"NETWORK"="NETWORK";"UEFI_SHELL"="UEFI_SHELL";"Intelligent_Provisioning"="Intelligent_Provisioning";
        "BootCustom"="BootCustom";"EMB-MENU"="EMB-MENU";"EMB-ACU"="EMB-ACU";"EMB-HPSUM-AUTO"="EMB-HPSUM-AUTO";"EMB-DIAGS"="EMB-DIAGS"};
        parameterAcceptValidValues = "NORMAL,FLOPPY,CDROM,HDD,USB,RBSU,NETWORK,UEFI_SHELL,Intelligent_Provisioning,BootCustom,EMB-MENU,EMB-ACU,EMB-HPSUM-AUTO,EMB-DIAGS"}
	$arrayForProcess+=$tmpObj
    if($Device -eq "BootCustom"){
    $tmpObj = @{parameterName = "BootCustomName" ;parameterValue = $BootCustomName; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	}
    else{
    $tmpObj = @{parameterName = "BootCustomName" ;parameterValue = $BootCustomName; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
    }
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDevice = $obj.Device
            $currBootCustomName = $obj.BootCustomName
            if($currBootCustomName -ne $null -and $Device -eq "BootCustom"){
            $currDevice = $currBootCustomName
            }
			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="write">
            <SET_ONE_TIME_BOOT value = $(Add-Quotes -InString $currDevice)/>
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand"){
        
            $send = "Set-HPiLOOneTimeBootOr`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                        Get-Status $xml $tmpObj
                        if($tmpObj.STATUS_TYPE -ne "OK"){
                            $outputList += $tmpObj
                        }
                    }
                }
                catch
                {
                    $errorWarningIncremented = 1
                    $errorCounter++
                    if($retobject.runobject.IP -eq ""){
                       Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    elseif($retobject.runobject.Hostname -eq ""){
                       Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                    }
                    else{
                       Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    $stringerror = ""
                    $stringerror += $_.Exception.Message.ToString()
                    $stringerror += "`n"
                    $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                    Write-Host $stringerror -ForegroundColor red
                }
            }
        
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOPassword{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserLoginToEdit,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewPassword
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "UserLoginToEdit", "NewPassword")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserLoginToEdit" ;parameterValue = $UserLoginToEdit; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewPassword" ;parameterValue = $NewPassword; parameterNeedInput = $true; parameterIsPassword = $true  }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currUserLoginToEdit = $obj.UserLoginToEdit
            $currNewPassword = $obj.NewPassword
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="write">
         <MOD_USER USER_LOGIN=$(Add-Quotes -InString $currUserLoginToEdit)>
            <PASSWORD value=$(Add-Quotes -InString $currNewPassword)/>
         </MOD_USER>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOPassword`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets){
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOPersistentBootOrder{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $BootOrder
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "BootOrder")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "BootOrder" ;parameterValue = $BootOrder; parameterNeedInput = $true  }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	
    if($validateInputFlag ){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currBootOrder = $obj.BootOrder

			$splitOrder = $currBootOrder.split(",")
			$send = @"
<RIBCL VERSION="2.30">
 <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
   <SERVER_INFO MODE="write">
     <SET_PERSISTENT_BOOT>
"@
			for($i = 0; $i -lt $splitOrder.length; $i++){
				$dev = $splitOrder[$i]
				$send = $send + @"
`n      <DEVICE value = $(Add-Quotes -InString $dev) />        
"@
			}
			$send = $send +@"
`n     </SET_PERSISTENT_BOOT>
   </SERVER_INFO>
 </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOPersistentBootOrder`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOPowerAlertThreshold{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Type,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Threshold,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Duration
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Type", "Threshold", "Duration")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Type" ;parameterValue = $Type; parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Threshold" ;parameterValue = $Threshold; parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Duration" ;parameterValue = $Duration; parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currType = $obj.Type
            if($currType -eq "Disabled"){
               $currThreshold = $obj.Threshold
               $currDuration = $obj.Duration
               Write-verbose $(Get-Message("MSG_NOSET_THRESHOLD"))
            }
            else{
                $currThreshold = $obj.Threshold
                $currDuration = $obj.Duration
            }
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <SET_PWREG>
            <PWRALERT TYPE=$(Add-Quotes -InString $currType)/>
            <PWRALERT_SETTINGS THRESHOLD=$(Add-Quotes -InString $currThreshold) DURATION=$(Add-Quotes -InString $currDuration)/>
         </SET_PWREG>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOPowerAlertThreshold`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret


                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }     
    return $outputList
	}
}

function Set-HPiLOPowerCap{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PowerCap
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "PowerCap")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }       
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "PowerCap" ;parameterValue = $PowerCap; parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currPowerCap = $obj.PowerCap
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <SET_POWER_CAP POWER_CAP=$(Add-Quotes -InString $currPowerCap)/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOPowerCap`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLORBSUPOSTIP{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $RBSUPOSTIP
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "RBSUPOSTIP")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }        
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RBSUPOSTIP" ;parameterValue = $RBSUPOSTIP; parameterNeedInput = $true;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y"; "On"="Y";"No"="N";"N"="N";"Disable"="N"; "Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currRBSUPOSTIP = $obj.RBSUPOSTIP
			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="write" >
         <MOD_GLOBAL_SETTINGS>
            <RBSU_POST_IP VALUE=$(Add-Quotes -InString $currRBSUPOSTIP)/>
         </MOD_GLOBAL_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
	    }
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLORBSUPOSTIP`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOSchemalessDirectory{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group1Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group1Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group1SID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group2Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group2Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group2SID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group3Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group3Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group3SID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group4Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group4Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group4SID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group5Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group5Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group5SID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group6Name,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group6Priv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Group6SID
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Group1Name", "Group1Priv", "Group1SID", "Group2Name", "Group2Priv", "Group2SID", 
		"Group3Name", "Group3Priv", "Group3SID", "Group4Name", "Group4Priv", "Group4SID", "Group5Name", "Group5Priv", "Group5SID", "Group6Name", "Group6Priv", "Group6SID")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group1Name" ;parameterValue = $Group1Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group1Priv" ;parameterValue = $Group1Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group1SID" ;parameterValue = $Group1SID }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group2Name" ;parameterValue = $Group2Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group2Priv" ;parameterValue = $Group2Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group2SID" ;parameterValue = $Group2SID }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group3Name" ;parameterValue = $Group3Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group3Priv" ;parameterValue = $Group3Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group3SID" ;parameterValue = $Group3SID }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group4Name" ;parameterValue = $Group4Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group4Priv" ;parameterValue = $Group4Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group4SID" ;parameterValue = $Group4SID }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group5Name" ;parameterValue = $Group5Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group5Priv" ;parameterValue = $Group5Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group5SID" ;parameterValue = $Group5SID }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group6Name" ;parameterValue = $Group6Name }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group6Priv" ;parameterValue = $Group6Priv; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Group6SID" ;parameterValue = $Group6SID }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.Group1Name -ne $null ){
                $currGroup1Name = $obj.Group1Name
            }
            if($obj.Group1Priv -ne $null ){
                $currGroup1Priv = $obj.Group1Priv
            }
            if($obj.Group1SID -ne $null ){
                $currGroup1SID = $obj.Group1SID
            }
            if($obj.Group2Name -ne $null ){
                $currGroup2Name = $obj.Group2Name
            }
            if($obj.Group2Priv -ne $null ){
                $currGroup2Priv = $obj.Group2Priv
            }
            if($obj.Group2SID -ne $null ){
                $currGroup2SID = $obj.Group2SID
            }
            if($obj.Group3Name -ne $null ){
                $currGroup3Name = $obj.Group3Name
            }
            if($obj.Group3Priv -ne $null ){
                $currGroup3Priv = $obj.Group3Priv
            }
            if($obj.Group3SID -ne $null ){
                $currGroup3SID = $obj.Group3SID
            }
            if($obj.Group4Name -ne $null ){
                $currGroup4Name = $obj.Group4Name
            }
            if($obj.Group4Priv -ne $null ){
                $currGroup4Priv = $obj.Group4Priv
            }
            if($obj.Group4SID -ne $null ){
                $currGroup4SID = $obj.Group4SID
            }
            if($obj.Group5Name -ne $null ){
                $currGroup5Name = $obj.Group5Name
            }
            if($obj.Group5Priv -ne $null ){
                $currGroup5Priv = $obj.Group5Priv
            }
            if($obj.Group5SID -ne $null ){
                $currGroup5SID = $obj.Group5SID
            }
            if($obj.Group6Name -ne $null ){
                $currGroup6Name = $obj.Group6Name
            }
            if($obj.Group6Priv -ne $null ){
                $currGroup6Priv = $obj.Group6Priv
            }
            if($obj.Group6SID -ne $null ){
                $currGroup6SID = $obj.Group6SID
            }
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <DIR_INFO MODE = "write">
         <MOD_DIR_CONFIG>
            <DIR_ENABLE_GRP_ACCT value = "Yes"/>
"@
            if($currGroup1Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT1_NAME value = $(Add-Quotes -InString $currGroup1Name)/>
"@
            }
            if($currGroup1Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT1_PRIV value = $(Add-Quotes -InString $currGroup1Priv)/>
"@
            }
            if($currGroup1SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT1_SID value  = $(Add-Quotes -InString $currGroup1SID)/>
"@
            }
            if($currGroup2Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT2_NAME value = $(Add-Quotes -InString $currGroup2Name)/>
"@
            }
            if($currGroup2Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT2_PRIV value = $(Add-Quotes -InString $currGroup2Priv)/>
"@
            }
            if($currGroup2SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT2_SID value  = $(Add-Quotes -InString $currGroup2SID)/>
"@
            }
            if($currGroup3Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT3_NAME value = $(Add-Quotes -InString $currGroup3Name)/>
"@
            }
            if($currGroup3Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT3_PRIV value = $(Add-Quotes -InString $currGroup3Priv)/>
"@
            }
            if($currGroup3SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT3_SID value  = $(Add-Quotes -InString $currGroup3SID)/>
"@
            }
            if($currGroup4Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT4_NAME value = $(Add-Quotes -InString $currGroup4Name)/>
"@
            }
            if($currGroup4Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT4_PRIV value = $(Add-Quotes -InString $currGroup4Priv)/>
"@
            }
            if($currGroup4SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT4_SID value  = $(Add-Quotes -InString $currGroup4SID)/>
"@
            }
            if($currGroup5Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT5_NAME value = $(Add-Quotes -InString $currGroup5Name)/>
"@
            }
            if($currGroup5Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT5_PRIV value = $(Add-Quotes -InString $currGroup5Priv)/>
"@
            }
            if($currGroup5SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT5_SID value  = $(Add-Quotes -InString $currGroup5SID)/>
"@
            }
            if($currGroup6Name -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT6_NAME value = $(Add-Quotes -InString $currGroup6Name)/>
"@
            }
            if($currGroup6Priv -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT6_PRIV value = $(Add-Quotes -InString $currGroup6Priv)/>
"@
            }
            if($currGroup6SID -ne $null){
                $send = $send + @"
`n            <DIR_GRPACCT6_SID value  = $(Add-Quotes -InString $currGroup6SID)/>
"@
            }
			$send = $send + @"
`n         </MOD_DIR_CONFIG>
      </DIR_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOSchemalessDirectory`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOServerName{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $ServerName
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "ServerName")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ServerName" ;parameterValue = $ServerName; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currServerName = $obj.ServerName
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <SERVER_NAME value =$(Add-Quotes -InString $currServerName)/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOServerName`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOSharedNetworkPort{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("1","2")]$SNPPort, 
        #Note: if set it to yes,iLO will disconnect.
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No","LOM","FlexibleLOM")] $SharedNetworkPort 
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "SNPPort", "SharedNetworkPort")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNPPort" ;parameterValue = $SNPPort; parameterNeedInput = $false; parameterSupportInt=$true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SharedNetworkPort"; parameterValue = $SharedNetworkPort; parameterNeedInput = $true; parameterValidateValues = @{"Yes" = "Yes"; "No" = "No"; "LOM" = "LOM"; "FlexibleLOM" = "FlexibleLOM"; "FlexLOM" = "FlexLOM"}; parameterAcceptValidValues = "Yes, No, LOM, FlexibleLOM, FlexLOM" }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currSNPPort = $obj.SNPPort
            $currSharedNetworkPort = $obj.SharedNetworkPort
			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="WRITE" >
         <MOD_NETWORK_SETTINGS>`n
"@
            $send = $send + @" 
            <SHARED_NETWORK_PORT VALUE=$(Add-Quotes -InString $currSharedNetworkPort)/>`n 
"@
            if($currSNPPort -ne $null){
            $send = $send + @"               
           <SNP_PORT VALUE=$(Add-Quotes -InString $currSNPPort)/>`n
"@
            }
            $send = $send + @"
         </MOD_NETWORK_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOSharedNetworkPort`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOSNMPIMSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $WebAgentIPAddress,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No")] $OSTraps,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No")] $SNMPPassthroughStatus,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No")] $RIBTraps,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("None","Enabled")] $CIMSecurityMask,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress1ROCommunity,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress1TrapCommunityVersion,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress1TrapCommunityValue,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress2ROCommunity,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress2TrapCommunityVersion,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress2TrapCommunityValue,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress3ROCommunity,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress3TrapCommunityVersion,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPAddress3TrapCommunityValue,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $AgentlessManagementEnable,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPSysContact,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPSysLocation,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPSystemRole,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPSystemRoleDetail,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No")] $ColdStartTrapBroadcast,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("iLO_Hostname","OS_Hostname")] $TrapSourceIdentifier,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $SNMPAccess,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPTrapPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $SNMPV1Traps,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SNMPV3EngineID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecurityName1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("MD5","SHA")] $AuthnProtocol1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AuthnPassphrase1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("DES","AES")]$PrivacyProtocol1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrivacyPassphrase1,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecurityName2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("MD5","SHA")] $AuthnProtocol2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AuthnPassphrase2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("DES","AES")] $PrivacyProtocol2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrivacyPassphrase2,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SecurityName3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("MD5","SHA")] $AuthnProtocol3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $AuthnPassphrase3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("DES","AES")] $PrivacyProtocol3,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $PrivacyPassphrase3

    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "WebAgentIPAddress", "SNMPAddress1", "SNMPAddress2", "SNMPAddress3", "OSTraps", 
		"SNMPPassthroughStatus", "RIBTraps", "CIMSecurityMask", "SNMPAddress1ROCommunity", "SNMPAddress1TrapCommunityVersion", 
		"SNMPAddress1TrapCommunityValue", "SNMPAddress2ROCommunity", "SNMPAddress2TrapCommunityVersion", "SNMPAddress2TrapCommunityValue", 
		"SNMPAddress3ROCommunity", "SNMPAddress3TrapCommunityVersion", "SNMPAddress3TrapCommunityValue", "AgentlessManagementEnable", "SNMPSysContact", 
		"SNMPSysLocation", "SNMPSystemRole", "SNMPSystemRoleDetail", "ColdStartTrapBroadcast", "TrapSourceIdentifier", "SNMPAccess", "SNMPPort", 
		"SNMPTrapPort", "SNMPV1Traps", "SNMPV3EngineID", "SecurityName1", "AuthnProtocol1", "AuthnPassphrase1", "PrivacyProtocol1", "PrivacyPassphrase1", 
		"SecurityName2", "AuthnProtocol2", "AuthnPassphrase2", "PrivacyProtocol2", "PrivacyPassphrase2", "SecurityName3", "AuthnProtocol3", 
		"AuthnPassphrase3", "PrivacyProtocol3", "PrivacyPassphrase3")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
    END {
    if($global:error.Count -gt $errorCount)
    { return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "WebAgentIPAddress" ;parameterValue = $WebAgentIPAddress }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNMPAddress1" ;parameterValue = $SNMPAddress1 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNMPAddress2" ;parameterValue = $SNMPAddress2 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNMPAddress3" ;parameterValue = $SNMPAddress3 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "OSTraps" ;parameterValue = $OSTraps;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"} 
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SNMPPassthroughStatus" ;parameterValue = $SNMPPassthroughStatus;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"} 
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "RIBTraps" ;parameterValue = $RIBTraps;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"} 
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "CIMSecurityMask" ;parameterValue = $CIMSecurityMask;parameterSupportInt = $true;
        parameterValidateValues=@{"None"="1";"Enabled"="3"};
        parameterAcceptValidValues="None,Enabled"} 
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress1ROCommunity" ;parameterValue = $SNMPAddress1ROCommunity }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress1TrapCommunityVersion" ;parameterValue = $SNMPAddress1TrapCommunityVersion }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress1TrapCommunityValue" ;parameterValue = $SNMPAddress1TrapCommunityValue }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress2ROCommunity" ;parameterValue = $SNMPAddress2ROCommunity }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress2TrapCommunityVersion" ;parameterValue = $SNMPAddress2TrapCommunityVersion }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress2TrapCommunityValue" ;parameterValue = $SNMPAddress2TrapCommunityValue }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress3ROCommunity" ;parameterValue = $SNMPAddress3ROCommunity }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress3TrapCommunityVersion" ;parameterValue = $SNMPAddress3TrapCommunityVersion }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAddress3TrapCommunityValue" ;parameterValue = $SNMPAddress3TrapCommunityValue }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "AgentlessManagementEnable" ;parameterValue = $AgentlessManagementEnable;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y"; "On"="Y";"No"="N";"N"="N";"Disable"="N"; "Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPSysContact" ;parameterValue = $SNMPSysContact }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPSysLocation" ;parameterValue = $SNMPSysLocation }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPSystemRole" ;parameterValue = $SNMPSystemRole }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPSystemRoleDetail" ;parameterValue = $SNMPSystemRoleDetail }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "ColdStartTrapBroadcast" ;parameterValue = $ColdStartTrapBroadcast;
        parameterValidateValues=@{"Yes"="Yes";"No"="No"};
        parameterAcceptValidValues="Yes,No"} 
    $arrayForProcess+=$tmpObj	
	$tmpObj = @{parameterName = "TrapSourceIdentifier" ;parameterValue = $TrapSourceIdentifier;
       parameterValidateValues=@{"iLO_Hostname"="iLO_Hostname";"OS_Hostname"="OS_Hostname"};
       parameterAcceptValidValues="iLO_Hostname,OS_Hostname"} 
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPPort" ;parameterValue = $SNMPPort; parameterSupportInt = $true }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPAccess" ;parameterValue = $SNMPAccess;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y"; "On"="Y";"No"="N";"N"="N";"Disable"="N"; "Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPTrapPort" ;parameterValue = $SNMPTrapPort; parameterSupportInt = $true }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPV1Traps" ;parameterValue = $SNMPV1Traps;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y"; "On"="Y";"No"="N";"N"="N";"Disable"="N"; "Off"="N"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off"}
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SNMPV3EngineID" ;parameterValue = $SNMPV3EngineID; parameterMinLength = 6; parameterMaxLength = 32 }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "SecurityName1" ;parameterValue = $SecurityName1 }
    $arrayForProcess+=$tmpObj	
    $tmpObj = @{parameterName = "AuthnProtocol1" ;parameterValue = $AuthnProtocol1 ; parameterSupportInt = $true;
        parameterValidateValues=@{"MD5"="MD5";"SHA"="SHA"};
        parameterAcceptValidValues="MD5,SHA"}
    $arrayForProcess+=$tmpObj	        
    $tmpObj = @{parameterName = "AuthnPassphrase1" ;parameterValue = $AuthnPassphrase1 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyProtocol1" ;parameterValue = $PrivacyProtocol1; parameterSupportInt = $true;
        parameterValidateValues=@{"DES"="DES";"AES"="AES"};
        parameterAcceptValidValues="DES,AES"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyPassphrase1" ;parameterValue = $PrivacyPassphrase1 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SecurityName2" ;parameterValue = $SecurityName2 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AuthnProtocol2" ;parameterValue = $AuthnProtocol2 ; parameterSupportInt = $true;
        parameterValidateValues=@{"MD5"="MD5";"SHA"="SHA"};
        parameterAcceptValidValues="MD5,SHA"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AuthnPassphrase2" ;parameterValue = $AuthnPassphrase2 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyProtocol2" ;parameterValue = $PrivacyProtocol2; parameterSupportInt = $true;
        parameterValidateValues=@{"DES"="DES";"AES"="AES"};
        parameterAcceptValidValues="DES,AES"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyPassphrase2" ;parameterValue = $PrivacyPassphrase2 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SecurityName3" ;parameterValue = $SecurityName3 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AuthnProtocol3" ;parameterValue = $AuthnProtocol3 ; parameterSupportInt = $true;
        parameterValidateValues=@{"MD5"="MD5";"SHA"="SHA"};
        parameterAcceptValidValues="MD5,SHA"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "AuthnPassphrase3" ;parameterValue = $AuthnPassphrase3 }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyProtocol3" ;parameterValue = $PrivacyProtocol3; parameterSupportInt = $true;
        parameterValidateValues=@{"DES"="DES";"AES"="AES"};
        parameterAcceptValidValues="DES,AES"}
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "PrivacyPassphrase3" ;parameterValue = $PrivacyPassphrase3 }
    $arrayForProcess+=$tmpObj
    foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.WebAgentIPAddress -ne $null ){
                $currWebAgentIPAddress = $obj.WebAgentIPAddress
            }
            if($obj.SNMPAddress1 -ne $null ){
                $currSNMPAddress1 = $obj.SNMPAddress1
            }
            if($obj.SNMPAddress2 -ne $null ){
                $currSNMPAddress2 = $obj.SNMPAddress2
            }
            if($obj.SNMPAddress3 -ne $null ){
                $currSNMPAddress3 = $obj.SNMPAddress3
            }
            if($obj.OSTraps -ne $null ){
                $currOSTraps = $obj.OSTraps
            }
            if($obj.SNMPPassthroughStatus -ne $null ){
                $currSNMPPassthroughStatus = $obj.SNMPPassthroughStatus
            }
            if($obj.RIBTraps -ne $null ){
                $currRIBTraps = $obj.RIBTraps
            }
            if($obj.CIMSecurityMask -ne $null ){
                $currCIMSecurityMask = $obj.CIMSecurityMask
            }
            if($obj.SNMPAddress1ROCommunity -ne $null ){
                $currSNMPAddress1ROCommunity = $obj.SNMPAddress1ROCommunity
            }
            if($obj.SNMPAddress1TrapCommunityVersion -ne $null ){
                $currSNMPAddress1TrapCommunityVersion = $obj.SNMPAddress1TrapCommunityVersion
            }
            if($obj.SNMPAddress1TrapCommunityValue -ne $null ){
                $currSNMPAddress1TrapCommunityValue = $obj.SNMPAddress1TrapCommunityValue
            }
            if($obj.SNMPAddress2ROCommunity -ne $null ){
                $currSNMPAddress2ROCommunity = $obj.SNMPAddress2ROCommunity
            }
            if($obj.SNMPAddress2TrapCommunityVersion -ne $null ){
                $currSNMPAddress2TrapCommunityVersion = $obj.SNMPAddress2TrapCommunityVersion
            }
            if($obj.SNMPAddress2TrapCommunityValue -ne $null ){
                $currSNMPAddress2TrapCommunityValue = $obj.SNMPAddress2TrapCommunityValue
            }
            if($obj.SNMPAddress3ROCommunity -ne $null ){
                $currSNMPAddress3ROCommunity = $obj.SNMPAddress3ROCommunity
            }
            if($obj.SNMPAddress3TrapCommunityVersion -ne $null ){
                $currSNMPAddress3TrapCommunityVersion = $obj.SNMPAddress3TrapCommunityVersion
            }
            if($obj.SNMPAddress3TrapCommunityValue -ne $null ){
                $currSNMPAddress3TrapCommunityValue = $obj.SNMPAddress3TrapCommunityValue
            }
            if($obj.AgentlessManagementEnable -ne $null ){
                $currAgentlessManagementEnable = $obj.AgentlessManagementEnable
            }
            if($obj.SNMPSysContact -ne $null ){
                $currSNMPSysContact = $obj.SNMPSysContact
            }
            if($obj.SNMPSysLocation -ne $null ){
                $currSNMPSysLocation = $obj.SNMPSysLocation
            }
            if($obj.SNMPSystemRole -ne $null ){
                $currSNMPSystemRole = $obj.SNMPSystemRole
            }
            if($obj.SNMPSystemRoleDetail -ne $null ){
                $currSNMPSystemRoleDetail = $obj.SNMPSystemRoleDetail
            }
            if($obj.ColdStartTrapBroadcast -ne $null ){
                $currColdStartTrapBroadcast = $obj.ColdStartTrapBroadcast
            }
            if($obj.TrapSourceIdentifier -ne $null ){
                $currTrapSourceIdentifier = $obj.TrapSourceIdentifier
            }
            if($obj.SNMPAccess -ne $null ){
                $currSNMPAccess = $obj.SNMPAccess
            }
            if($obj.SNMPPort -ne $null ){
                $currSNMPPort = $obj.SNMPPort
            }
            if($obj.SNMPTrapPort -ne $null ){
                $currSNMPTrapPort = $obj.SNMPTrapPort
            }
            if($obj.SNMPV1Traps -ne $null ){
                $currSNMPV1Traps = $obj.SNMPV1Traps
            }
            if($obj.SNMPV3EngineID -ne $null ){
                $currSNMPV3EngineID = $obj.SNMPV3EngineID
            }
            if($obj.SecurityName1 -ne $null ){
                $currSecurityName1 = $obj.SecurityName1
            }
            if($obj.AuthnProtocol1 -ne $null ){
                $currAuthnProtocol1 = $obj.AuthnProtocol1
            }
            if($obj.AuthnPassphrase1 -ne $null ){
                $currAuthnPassphrase1 = $obj.AuthnPassphrase1
            }
            if($obj.PrivacyProtocol1 -ne $null ){
                $currPrivacyProtocol1 = $obj.PrivacyProtocol1
            }
            if($obj.PrivacyPassphrase1 -ne $null ){
                $currPrivacyPassphrase1 = $obj.PrivacyPassphrase1
            }
            if($obj.SecurityName2 -ne $null ){
                $currSecurityName2 = $obj.SecurityName2
            }
            if($obj.AuthnProtocol2 -ne $null ){
                $currAuthnProtocol2 = $obj.AuthnProtocol2
            }
            if($obj.AuthnPassphrase2 -ne $null ){
                $currAuthnPassphrase2 = $obj.AuthnPassphrase2
            }
            if($obj.PrivacyProtocol2 -ne $null ){
                $currPrivacyProtocol2 = $obj.PrivacyProtocol2
            }
            if($obj.PrivacyPassphrase2 -ne $null ){
                $currPrivacyPassphrase2 = $obj.PrivacyPassphrase2
            }
            if($obj.SecurityName3 -ne $null ){
                $currSecurityName3 = $obj.SecurityName3
            }
            if($obj.AuthnProtocol3 -ne $null ){
                $currAuthnProtocol3 = $obj.AuthnProtocol3
            }
            if($obj.AuthnPassphrase3 -ne $null ){
                $currAuthnPassphrase3 = $obj.AuthnPassphrase3
            }
            if($obj.PrivacyProtocol3 -ne $null ){
                $currPrivacyProtocol3 = $obj.PrivacyProtocol3
            }
            if($obj.PrivacyPassphrase3 -ne $null ){
                $currPrivacyPassphrase3 = $obj.PrivacyPassphrase3
            }

			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <MOD_SNMP_IM_SETTINGS>
"@
            if($currWebAgentIPAddress -ne $null){
                $send = $send + @"
`n                <WEB_AGENT_IP_ADDRESS value=$(Add-Quotes -InString $currWebAgentIPAddress)/>
"@
            }
            if($currSNMPAddress1 -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_1 value=$(Add-Quotes -InString $currSNMPAddress1)/>
"@
            }
            if($currSNMPAddress2 -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_2 value=$(Add-Quotes -InString $currSNMPAddress2)/>
"@
            }
            if($currSNMPAddress3 -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_3 value=$(Add-Quotes -InString $currSNMPAddress3)/>
"@
            }
            if($currOSTraps -ne $null){
                $send = $send + @"
`n                <OS_TRAPS value=$(Add-Quotes -InString $currOSTraps)/>
"@
            }
            if($currSNMPPassthroughStatus -ne $null){
                $send = $send + @"
`n                <SNMP_PASSTHROUGH_STATUS value=$(Add-Quotes -InString $currSNMPPassthroughStatus)/>
"@
            }
            if($currRIBTraps -ne $null){
                $send = $send + @"
`n                <RIB_TRAPS value=$(Add-Quotes -InString $currRIBTraps)/>
"@
            }
            if($currCIMSecurityMask -ne $null){
                $send = $send + @"
`n                <CIM_SECURITY_MASK value=$(Add-Quotes -InString $currCIMSecurityMask)/>
"@
            }
            if($currSNMPAddress1ROCommunity -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_1_ROCOMMUNITY VALUE=$(Add-Quotes -InString $currSNMPAddress1ROCommunity)/>
"@
            }
            if($currSNMPAddress1TrapCommunityVersion -ne $null -and $currSNMPAddress1TrapCommunityValue -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_1_TRAPCOMMUNITY VERSION=$(Add-Quotes -InString $currSNMPAddress1TrapCommunityVersion) VALUE=$(Add-Quotes -InString $currSNMPAddress1TrapCommunityValue)/>
"@
            }
            if($currSNMPAddress2ROCommunity -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_2_ROCOMMUNITY VALUE=$(Add-Quotes -InString $currSNMPAddress2ROCommunity)/>
"@
            }
            if($currSNMPAddress2TrapCommunityVersion -ne $null -and $currSNMPAddress2TrapCommunityValue -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_2_TRAPCOMMUNITY VERSION=$(Add-Quotes -InString $currSNMPAddress2TrapCommunityVersion) VALUE=$(Add-Quotes -InString $currSNMPAddress2TrapCommunityValue)/>
"@
            }
            if($currSNMPAddress3ROCommunity -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_3_ROCOMMUNITY VALUE=$(Add-Quotes -InString $currSNMPAddress3ROCommunity)/>
"@
            }
            if($currSNMPAddress3TrapCommunityVersion -ne $null -and $currSNMPAddress3TrapCommunityValue -ne $null){
                $send = $send + @"
`n                <SNMP_ADDRESS_3_TRAPCOMMUNITY VERSION=$(Add-Quotes -InString $currSNMPAddress3TrapCommunityVersion) VALUE=$(Add-Quotes -InString $currSNMPAddress3TrapCommunityValue)/>
"@
            }
            if($currAgentlessManagementEnable -ne $null){
                $send = $send + @"
`n                <AGENTLESS_MANAGEMENT_ENABLE value=$(Add-Quotes -InString $currAgentlessManagementEnable)/>
"@
            }
            if($currSNMPSysContact -ne $null){
                $send = $send + @"
`n                <SNMP_SYS_CONTACT VALUE=$(Add-Quotes -InString $currSNMPSysContact)/>
"@
            }
            if($currSNMPSysLocation -ne $null){
                $send = $send + @"
`n                <SNMP_SYS_LOCATION VALUE=$(Add-Quotes -InString $currSNMPSysLocation)/>
"@
            }
            if($currSNMPSystemRole -ne $null){
                $send = $send + @"
`n                <SNMP_SYSTEM_ROLE VALUE=$(Add-Quotes -InString $currSNMPSystemRole)/>
"@
            }
            if($currSNMPSystemRoleDetail -ne $null){
                $send = $send + @"
`n                <SNMP_SYSTEM_ROLE_DETAIL VALUE=$(Add-Quotes -InString $currSNMPSystemRoleDetail)/>
"@
            }
            if($currColdStartTrapBroadcast -ne $null){
                $send = $send + @"
`n                <COLD_START_TRAP_BROADCAST VALUE=$(Add-Quotes -InString $currColdStartTrapBroadcast)/>
"@
            }
            if($currTrapSourceIdentifier -ieq "iLO_Hostname"){
                $send = $send + @"
`n                <TRAP_SOURCE_IDENTIFIER VALUE = "iLO Hostname"/>
"@
            }
            elseif($currTrapSourceIdentifier -ieq "OS_Hostname"){
                $send = $send + @"
`n                <TRAP_SOURCE_IDENTIFIER VALUE = "OS Hostname"/>
"@
            }
            if($currSNMPAccess -ne $null){
                $send = $send + @"
`n                <SNMP_ACCESS_ENABLED VALUE = $(Add-Quotes -InString $currSNMPAccess)/>
"@
            }
            if($currSNMPPort -ne $null){
                $send = $send + @"
`n                <SNMP_PORT VALUE = $(Add-Quotes -InString $currSNMPPort)/>
"@
            }
            if($currSNMPTrapPort -ne $null){
                $send = $send + @"
`n                <SNMP_TRAP_PORT VALUE = $(Add-Quotes -InString $currSNMPTrapPort)/>
"@
            }
            if($currSNMPV1Traps -ne $null){
                $send = $send + @"
`n                <SNMP_V1_TRAPS VALUE = $(Add-Quotes -InString $currSNMPV1Traps)/>
"@
            }
            if($currSNMPV3EngineID -ne $null){
                $send = $send + @"
`n                <SNMP_V3_ENGINE_ID VALUE = $(Add-Quotes -InString $currSNMPV3EngineID)/>
"@
            }
            if($currSecurityName1 -ne $null -or $currAuthnProtocol1 -ne $null -or $currAuthnPassphrase1 -ne $null -or $currPrivacyProtocol1 -ne $null -or $currPrivacyPassphrase1 -ne $null){
                $send = $send + @"
`n               <SNMP_USER_PROFILE INDEX = "1">
"@
            }
            if($currSecurityName1 -ne $null){
                $send = $send + @"
`n                    <SECURITY_NAME VALUE=$(Add-Quotes -InString $currSecurityName1)/>
"@
            }
            if($currAuthnProtocol1 -ieq "MD5"){
                $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currAuthnProtocol1 -ieq "SHA"){
                            $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "1"/>
"@
            }
            if($currAuthnPassphrase1 -ne $null){
                $send = $send + @"
`n                    <AUTHN_PASSPHRASE VALUE=$(Add-Quotes -InString $currAuthnPassphrase1)/>
"@
            }
            if($currPrivacyProtocol1 -ieq "DES"){
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currPrivacyProtocol1 -ieq "AES"){
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "1"/>
"@
            }
            if($currPrivacyPassphrase1 -ne $null){
                $send = $send + @"
`n                    <PRIVACY_PASSPHRASE VALUE=$(Add-Quotes -InString $currPrivacyPassphrase1)/>
"@
            }
            if($currSecurityName1 -ne $null -or $currAuthnProtocol1 -ne $null -or $currAuthnPassphrase1 -ne $null -or $currPrivacyProtocol1 -ne $null -or $currPrivacyPassphrase1 -ne $null){
                $send = $send + @"
`n                </SNMP_USER_PROFILE>
"@
            }
            if($currSecurityName2 -ne $null -or $currAuthnProtocol2 -ne $null -or $currAuthnPassphrase2 -ne $null -or $currPrivacyProtocol2 -ne $null -or $currPrivacyPassphrase2 -ne $null){
                $send = $send + @"
`n                 <SNMP_USER_PROFILE INDEX = "2">
"@
            }
            if($currSecurityName2 -ne $null){
                $send = $send + @"
`n                    <SECURITY_NAME VALUE=$(Add-Quotes -InString $currSecurityName2)/>
"@
            }
            if($currAuthnProtocol2 -ieq "MD5"){
                $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currAuthnProtocol2 -ieq "SHA"){
                $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "1"/>
"@
            }
            if($currAuthnPassphrase2 -ne $null){
                $send = $send + @"
`n                    <AUTHN_PASSPHRASE VALUE=$(Add-Quotes -InString $currAuthnPassphrase2)/>
"@
            }
            if($currPrivacyProtocol2 -ieq "DES"){
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currPrivacyProtocol2 -ieq "AES"){
                            
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "1"/>
"@
            }
            if($currPrivacyPassphrase2 -ne $null){
                $send = $send + @"
`n                    <PRIVACY_PASSPHRASE VALUE=$(Add-Quotes -InString $currPrivacyPassphrase2)/>
"@
            }
            if($currSecurityName2 -ne $null -or $currAuthnProtocol2 -ne $null -or $currAuthnPassphrase2 -ne $null -or $currPrivacyProtocol2 -ne $null -or $currPrivacyPassphrase2 -ne $null){
                $send = $send + @"
`n                </SNMP_USER_PROFILE>
"@
            }
            if($currSecurityName3 -ne $null -or $currAuthnProtocol3 -ne $null -or $currAuthnPassphrase3 -ne $null -or $currPrivacyProtocol3 -ne $null -or $currPrivacyPassphrase3 -ne $null){
                $send = $send + @"
`n                <SNMP_USER_PROFILE INDEX = "3">
"@
            }
            if($currSecurityName3 -ne $null){
                $send = $send + @"
`n                    <SECURITY_NAME VALUE=$(Add-Quotes -InString $currSecurityName3)/>
"@
            }
            if($currAuthnProtocol3 -ieq "MD5"){
                $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currAuthnProtocol3 -ieq "SHA"){
                $send = $send + @"
`n                    <AUTHN_PROTOCOL VALUE= "1"/>
"@
            }
            if($currAuthnPassphrase3 -ne $null){
                $send = $send + @"
`n                    <AUTHN_PASSPHRASE VALUE=$(Add-Quotes -InString $currAuthnPassphrase3)/>
"@
            }
            if($currPrivacyProtocol3 -ieq "DES"){
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "0"/>
"@
            }
            elseif($currPrivacyProtocol3 -ieq "AES"){
                $send = $send + @"
`n                    <PRIVACY_PROTOCOL VALUE= "1"/>
"@
            }
            if($currPrivacyPassphrase3 -ne $null){
                $send = $send + @"
`n                    <PRIVACY_PASSPHRASE VALUE=$(Add-Quotes -InString $currPrivacyPassphrase3)/>
"@
            }
            if($currSecurityName3 -ne $null -or $currAuthnProtocol3 -ne $null -or $currAuthnPassphrase3 -ne $null -or $currPrivacyProtocol3 -ne $null -or $currPrivacyPassphrase3 -ne $null){
                $send = $send + @"
`n                </SNMP_USER_PROFILE>
"@
            }
			$send = $send + @"
`n            </MOD_SNMP_IM_SETTINGS>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOSNMPIMSetting`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			    $errmsg = Get-Message("MSG_RETRIEVING_INFO")
                try
                {
				    $errorWarningIncremented = 0
                    if($retobject.err -ne $null)
                    {
                        throw $retobject.err
                    }
                    $ret= $retobject.ret

                    if($outputType -eq "xml"){
                        # creating XML in required format from the output
                        $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                        $xml = '<?xml version="1.0"?>'
                        $xml += "`n" +$matches[0] + "`n"
                        $xml += $ret
                        $xml += '</RIBCL>'

                        $outputList += $xml
                    }
                    elseif($outputType -eq "ribcl"){
                        $outputList += $ret
                    }
                    elseif($outputType -eq "PSObject"){
                        # creating XML in required format from the output 
                        $ret = $ret.Replace('<?xml version="1.0"?>', "")
                        $ret = $ret.Replace('</RIBCL>', "")
                        $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                        $ret = '<?xml version="1.0"?>
            <RIBCL Version="2.22">
            ' + $ret + '</RIBCL>'
        
                        $xml = [xml] $ret
                
                        $tmpObj = New-Object PSObject        
                        $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                        $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                        $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                        $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                        Get-Status $xml $tmpObj
                        if($tmpObj.STATUS_TYPE -ne "OK"){
                            $outputList += $tmpObj
                        }
                    }
                }
                catch{
                    $errorWarningIncremented = 1
                    $errorCounter++
                    if($retobject.runobject.IP -eq ""){
                       Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    elseif($retobject.runobject.Hostname -eq ""){
                       Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                    }
                    else{
                       Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                    }
                    $stringerror = ""
                    $stringerror += $_.Exception.Message.ToString()
                    $stringerror += "`n"
                    $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                    $stringerror += "`n"
                    $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                    Write-Host $stringerror -ForegroundColor red
                }
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOSSOSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Disabled","Certificate","Name","All")] $TrustMode,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserLoginPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserRemoteConsPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserResetServerPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserVirtualMediaPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserConfigiLOPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $UserAdminPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorLoginPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorRemoteConsPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorResetServerPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorVirtualMediaPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorConfigiLOPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $OperatorAdminPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorLoginPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorRemoteConsPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorResetServerPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorVirtualMediaPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorConfigiLOPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdministratorAdminPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("NETWORK", "IMPORT_FROM_NETWORK", "IMPORT_CERTIFICATE")] $SSOInputType,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $SSOInputValue
    ) 
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "TrustMode", "UserLoginPriv", "UserRemoteConsPriv", "UserResetServerPriv", 
		"UserVirtualMediaPriv", "UserConfigiLOPriv", "UserAdminPriv", "OperatorLoginPriv", "OperatorRemoteConsPriv", "OperatorResetServerPriv", 
		"OperatorVirtualMediaPriv", "OperatorConfigiLOPriv", "OperatorAdminPriv", "AdministratorLoginPriv", "AdministratorRemoteConsPriv", 
		"AdministratorResetServerPriv", "AdministratorVirtualMediaPriv", "AdministratorConfigiLOPriv", "AdministratorAdminPriv", "SSOInputType", "SSOInputValue")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }    				
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "TrustMode" ;parameterValue = $TrustMode }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserLoginPriv" ;parameterValue = $UserLoginPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserRemoteConsPriv" ;parameterValue = $UserRemoteConsPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserResetServerPriv" ;parameterValue = $UserResetServerPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserVirtualMediaPriv" ;parameterValue = $UserVirtualMediaPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserConfigiLOPriv" ;parameterValue = $UserConfigiLOPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserAdminPriv" ;parameterValue = $UserAdminPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OperatorLoginPriv" ;parameterValue = $OperatorLoginPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OperatorRemoteConsPriv" ;parameterValue = $OperatorRemoteConsPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj	
	$tmpObj = @{parameterName = "OperatorResetServerPriv" ;parameterValue = $OperatorResetServerPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OperatorVirtualMediaPriv" ;parameterValue = $OperatorVirtualMediaPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OperatorConfigiLOPriv" ;parameterValue = $OperatorConfigiLOPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "OperatorAdminPriv" ;parameterValue = $OperatorAdminPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorLoginPriv" ;parameterValue = $AdministratorLoginPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorRemoteConsPriv" ;parameterValue = $AdministratorRemoteConsPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorResetServerPriv" ;parameterValue = $AdministratorResetServerPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorVirtualMediaPriv" ;parameterValue = $AdministratorVirtualMediaPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorConfigiLOPriv" ;parameterValue = $AdministratorConfigiLOPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdministratorAdminPriv" ;parameterValue = $AdministratorAdminPriv;
        parameterValidateValues=@{"Yes"="Y";"Y"="Y";"No"="N";"N"="N"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SSOInputType"; parameterValue = $SSOInputType;
        parameterValidateValues = @{"NETWORK" = "NETWORK"; "IMPORT_FROM_NETWORK" = "IMPORT_FROM_NETWORK"; "IMPORT_CERTIFICATE" = "IMPORT_CERTIFICATE"};
        parameterAcceptValidValues = "NETWORK, IMPORT_FROM_NETWORK, IMPORT_CERTIFICATE" }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "SSOInputValue" ;parameterValue = $SSOInputValue }
    $arrayForProcess+=$tmpObj	

    $outputList = @()
    $runObjects = @()

    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.TrustMode -ne $null ){
                $currTrustMode = $obj.TrustMode
            }
            if($obj.UserLoginPriv -ne $null ){
                $currUserLoginPriv = $obj.UserLoginPriv
            }
            if($obj.UserRemoteConsPriv -ne $null ){
                $currUserRemoteConsPriv = $obj.UserRemoteConsPriv
            }
            if($obj.UserResetServerPriv -ne $null ){
                $currUserResetServerPriv = $obj.UserResetServerPriv
            }
            if($obj.UserVirtualMediaPriv -ne $null ){
                 $currUserVirtualMediaPriv = $obj.UserVirtualMediaPriv
            }
            if($obj.UserConfigiLOPriv -ne $null ){
                $currUserConfigiLOPriv = $obj.UserConfigiLOPriv
            }
            if($obj.UserAdminPriv -ne $null ){
                 $currUserAdminPriv = $obj.UserAdminPriv
            }
            if($obj.OperatorLoginPriv -ne $null ){
                 $currOperatorLoginPriv = $obj.OperatorLoginPriv
            }
            if($obj.OperatorRemoteConsPriv -ne $null ){
                 $currOperatorRemoteConsPriv = $obj.OperatorRemoteConsPriv
            }
            if($obj.OperatorResetServerPriv -ne $null ){
                 $currOperatorResetServerPriv = $obj.OperatorResetServerPriv
            }
            if($obj.OperatorVirtualMediaPriv -ne $null ){
                 $currOperatorVirtualMediaPriv = $obj.OperatorVirtualMediaPriv
            }
            if($obj.OperatorConfigiLOPriv -ne $null ){
                $currOperatorConfigiLOPriv = $obj.OperatorConfigiLOPriv
            }
            if($obj.OperatorAdminPriv -ne $null ){
                $currOperatorAdminPriv = $obj.OperatorAdminPriv
            }
            if($obj.AdministratorLoginPriv -ne $null ){
                $currAdministratorLoginPriv = $obj.AdministratorLoginPriv
            }
            if($obj.AdministratorRemoteConsPriv -ne $null ){
                $currAdministratorRemoteConsPriv = $obj.AdministratorRemoteConsPriv
            }
            if($obj.AdministratorResetServerPriv -ne $null ){
                $currAdministratorResetServerPriv = $obj.AdministratorResetServerPriv
            }
            if($obj.AdministratorVirtualMediaPriv -ne $null ){
                $currAdministratorVirtualMediaPriv = $obj.AdministratorVirtualMediaPriv
            }
            if($obj.AdministratorConfigiLOPriv -ne $null ){
                $currAdministratorConfigiLOPriv = $obj.AdministratorConfigiLOPriv
            }
            if($obj.AdministratorAdminPriv -ne $null ){
                $currAdministratorAdminPriv = $obj.AdministratorAdminPriv
            }
            if($obj.SSOInputType -ne $null ){
                $currSSOInputType = $obj.SSOInputType
            }
            if($obj.SSOInputValue -ne $null ){
                $currSSOInputValue = $obj.SSOInputValue
            }
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SSO_INFO MODE="write">
         <MOD_SSO_SETTINGS>
"@
			if($currTrustMode -ne $null){
				$send = $send + @"
`n            <TRUST_MODE VALUE=$(Add-Quotes -InString $currTrustMode) />
"@
			}
			if($currUserLoginPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE LOGIN_PRIV=$(Add-Quotes -InString $currUserLoginPriv) />
"@
			}
			if($currUserRemoteConsPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE REMOTE_CONS_PRIV=$(Add-Quotes -InString $currUserRemoteConsPriv) />
"@
			}
			if($currUserResetServerPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE RESET_SERVER_PRIV=$(Add-Quotes -InString $currUserResetServerPriv) />
"@
			}
			if($currUserVirtualMediaPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE VIRTUAL_MEDIA_PRIV=$(Add-Quotes -InString $currUserVirtualMediaPriv) />
"@
			}
			if($currUserConfigiLOPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE CONFIG_ILO_PRIV=$(Add-Quotes -InString $currUserConfigiLOPriv) />
"@
			}
			if($currUserAdminPriv -ne $null){
				$send = $send + @"
`n            <USER_ROLE ADMIN_PRIV=$(Add-Quotes -InString $currUserAdminPriv) />
"@
			}
			if($currOperatorLoginPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE LOGIN_PRIV=$(Add-Quotes -InString $currOperatorLoginPriv) />
"@
			}
			if($currOperatorRemoteConsPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE REMOTE_CONS_PRIV=$(Add-Quotes -InString $currOperatorRemoteConsPriv) />
"@
			}
			if($currOperatorResetServerPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE RESET_SERVER_PRIV=$(Add-Quotes -InString $currOperatorResetServerPriv) />
"@
			}
			if($currOperatorVirtualMediaPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE VIRTUAL_MEDIA_PRIV=$(Add-Quotes -InString $currOperatorVirtualMediaPriv) />
"@
			}
			if($currOperatorConfigiLOPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE CONFIG_ILO_PRIV=$(Add-Quotes -InString $currOperatorConfigiLOPriv) />
"@
			}
			if($currOperatorAdminPriv -ne $null){
				$send = $send + @"
`n            <OPERATOR_ROLE ADMIN_PRIV=$(Add-Quotes -InString $currOperatorAdminPriv) />
"@
			}
			if($currAdministratorLoginPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE LOGIN_PRIV=$(Add-Quotes -InString $currAdministratorLoginPriv) />
"@
			}
			if($currAdministratorRemoteConsPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE REMOTE_CONS_PRIV=$(Add-Quotes -InString $currAdministratorRemoteConsPriv) />
"@
			}
			if($currAdministratorResetServerPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE RESET_SERVER_PRIV=$(Add-Quotes -InString $currAdministratorResetServerPriv) />
"@
			}
			if($currAdministratorVirtualMediaPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE VIRTUAL_MEDIA_PRIV=$(Add-Quotes -InString $currAdministratorVirtualMediaPriv) />
"@
			}
			if($currAdministratorConfigiLoPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE CONFIG_ILO_PRIV=$(Add-Quotes -InString $currAdministratorConfigiLoPriv) />
"@
			}
			if($currAdministratorAdminPriv -ne $null){
				$send = $send + @"
`n            <ADMINISTRATOR_ROLE ADMIN_PRIV=$(Add-Quotes -InString $currAdministratorAdminPriv) />
"@
			}
				$send = $send + @"
`n         </MOD_SSO_SETTINGS>
"@
			if(($currSSOInputType -ne $null -and $currSSOInputValue -ne $null)){
				if($currSSOInputType -eq "NETWORK" -and (($currTrustMode -eq "Name") -or ($currTrustMode -eq "All"))){
					$send = $send + @"
`n                <SSO_SERVER NAME=$(Add-Quotes -InString $currSSOInputValue) />
"@
				}
				if($currSSOInputType -eq "IMPORT_FROM_NETWORK"){
					$send = $send + @"
`n                 <SSO_SERVER IMPORT_FROM=$(Add-Quotes -InString $currSSOInputValue) />
"@
				}
				if($currSSOInputType -eq "IMPORT_CERTIFICATE"){
                    if(-not $currSSOInputValue.Contains("-BEGIN CERTIFICATE-")){
                        $currSSOInputValue = "-----BEGIN CERTIFICATE-----`n" + $currSSOInputValue
                    }
                    if(-not $currSSOInputValue.Contains("-END CERTIFICATE-")){
                        $currSSOInputValue = $currSSOInputValue + "`n-----END CERTIFICATE-----" 
                    }
					$send = $send + @"
`n         <IMPORT_CERTIFICATE>
$currSSOInputValue
         </IMPORT_CERTIFICATE>
"@
				}
			}
			$send = $send + @"
`n      </SSO_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOSSOSetting`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOUIDStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] [alias("UID")] $UIDControl
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "UIDControl")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UIDControl" ;parameterValue = $UIDControl; parameterNeedInput = $true; parameterAlias=@("UID");
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currUIDControl = $obj.UIDControl
            $send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <SERVER_INFO MODE="write">
         <UID_CONTROL UID=$(Add-Quotes -InString $currUIDControl)/>
      </SERVER_INFO>
   </LOGIN>
</RIBCL>
"@
		$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOUIDStatus`n" + "`n"  + "`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
                if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOUser{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $UserLoginToEdit,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewUsername,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewUserLogin,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $NewPassword,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $AdminPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $RemoteConsPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $ResetServerPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $VirtualMediaPriv,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","No","N")] $ConfigILOPriv

    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "UserLoginToEdit", "NewUsername", "NewUserLogin", "NewPassword", "AdminPriv", 
		"RemoteConsPriv", "ResetServerPriv", "VirtualMediaPriv", "ConfigILOPriv")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "UserLoginToEdit" ;parameterValue = $UserLoginToEdit; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewUsername" ;parameterValue = $NewUsername }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewUserLogin" ;parameterValue = $NewUserLogin }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "NewPassword" ;parameterValue = $NewPassword; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "AdminPriv" ;parameterValue = $AdminPriv;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "RemoteConsPriv" ;parameterValue = $RemoteConsPriv;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ResetServerPriv" ;parameterValue = $ResetServerPriv;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VirtualMediaPriv" ;parameterValue = $VirtualMediaPriv;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "ConfigILOPriv" ;parameterValue = $ConfigILOPriv;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"No"="No";"N"="No"};
        parameterAcceptValidValues="Yes,Y,No,N" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currUserLoginToEdit = $obj.UserLoginToEdit
            if($obj.NewUsername -ne $null ){
                $currNewUsername = $obj.NewUsername
            }
            if($obj.NewUserLogin -ne $null ){
                $currNewUserLogin = $obj.NewuserLogin
            }
            if($obj.NewPassword -ne $null ){
                $currNewPassword = $obj.NewPassword
            }
            if($obj.AdminPriv -ne $null ){
                $currAdminPriv = $obj.AdminPriv
            }
            if($obj.RemoteConsPriv -ne $null ){
                $currRemoteConsPriv = $obj.RemoteConsPriv
            }
            if($obj.ResetServerPriv -ne $null ){
                $currResetServerPriv = $obj.ResetServerPriv
            }
            if($obj.VirtualMediaPriv -ne $null ){
                $currVirtualMediaPriv = $obj.VirtualMediaPriv
            }
            if($obj.ConfigILOPriv -ne $null ){
                $currConfigILOPriv = $obj.ConfigILOPriv
            }
			$send = @"
<RIBCL VERSION="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <USER_INFO MODE="write">
         <MOD_USER USER_LOGIN=$(Add-Quotes -InString $currUserLoginToEdit)>`n
"@
			if($currNewUsername -ne $null){
				$send = $send + @"
                <USER_NAME value =$(Add-Quotes -InString $currNewUsername)/>`n
"@
			}
			if($currNewUserLogin -ne $null){
				$send = $send + @"
                <USER_LOGIN value =$(Add-Quotes -InString $currNewUserLogin)/>`n
"@
			}
			if($currNewPassword -ne $null){
				$send = $send + @"
                <PASSWORD value =$(Add-Quotes -InString $currNewPassword)/>`n
"@
			}
			if($currAdminPriv -ne $null){
				$send = $send + @"
                <ADMIN_PRIV value =$(Add-Quotes -InString $currAdminPriv)/>`n
"@
			}
			if($currRemoteConsPriv -ne $null){
				$send = $send + @"
                <REMOTE_CONS_PRIV value =$(Add-Quotes -InString $currRemoteConsPriv)/>`n
"@
			}
			if($currResetServerPriv -ne $null){
				$send = $send + @"
                <RESET_SERVER_PRIV value =$(Add-Quotes -InString $currResetServerPriv)/>`n
"@
			}
			if($currVirtualMediaPriv -ne $null){
				$send = $send + @"
                <VIRTUAL_MEDIA_PRIV value =$(Add-Quotes -InString $currVirtualMediaPriv)/>`n
"@
			}
			if($currConfigILOPriv -ne $null){
				$send = $send + @"
                <CONFIG_ILO_PRIV value =$(Add-Quotes -InString $currConfigILOPriv)/>`n
"@
			}
			$send = $send + @"
            </MOD_USER>
      </USER_INFO>
   </LOGIN>
</RIBCL>
"@      
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOUser`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
        <RIBCL Version="2.22">
        ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }

                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOVirtualPowerButton{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Press","Hold","ColdBoot","WarmBoot","Toggle")] $PressType
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "PressType")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "PressType" ;parameterValue = $PressType; parameterNeedInput = $true;
        parameterValidateValues=@{"Press"="Press";"Hold"="Hold";"ColdBoot"="ColdBoot";"WarmBoot"="WarmBoot";"Toggle"="Toggle"};
        parameterAcceptValidValues="Press,Hold,ColdBoot,WarmBoot,Toggle" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currPressType = $obj.PressType
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <SERVER_INFO MODE="write">       
"@
            if($currPressType -eq "Press"){
                $send = $send + @"
`n              <PRESS_PWR_BTN/>
"@
            }
            elseif($currPressType -eq "ColdBoot"){
                $send = $send + @"
`n              <COLD_BOOT_SERVER/>
"@
            }
            elseif($currPressType -eq "WarmBoot"){
                $send = $send + @"
`n              <WARM_BOOT_SERVER/>
"@
            }
            elseif($currPressType -eq "Hold"){
                $send = $send + @"
`n              <HOLD_PWR_BTN/>
"@
            }
            elseif($currPressType -eq "Toggle"){
                $send = $send + @"
`n              <HOLD_PWR_BTN TOGGLE = "Yes" />
"@
            }
			$send = $send + @"
        </SERVER_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOVirtualPowerButton`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOVLAN{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $EnableNIC,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","No","LOM","FlexibleLOM")]$SharedNetworkPort,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","No","N","Disable")] $VLAN,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $VLANID
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "EnableNIC", "SharedNetworkPort", "VLAN")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "EnableNIC" ;parameterValue = $EnableNIC; 
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes"; "On"="Yes";"No"="No";"N"="No";"Disable"="No"; "Off"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "SharedNetworkPort" ;parameterValue = $SharedNetworkPort;
        parameterValidateValues = @{"Yes" = "Yes"; "No" = "No"; "LOM" = "LOM"; "FlexibleLOM" = "FlexibleLOM"}; 
        parameterAcceptValidValues = "Yes, No, LOM, FlexibleLOM"}
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VLAN" ;parameterValue = $VLAN;
        parameterValidateValues=@{"Yes"="Yes";"Y"="Yes";"Enable"="Yes";"No"="No";"N"="No";"Disable"="No"};
        parameterAcceptValidValues="Yes,Y,Enable,No,N,Disable" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VLANID" ;parameterValue = $VLANID; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            if($obj.EnableNIC -ne $null){
                $currEnableNIC = $obj.EnableNIC
            }
            if($obj.SharedNetworkPort -ne $null){
                $currSharedNetworkPort = $obj.SharedNetworkPort
            }
            if($obj.VLAN -ne $null){
                $currVLAN = $obj.VLAN
            }
            if($obj.VLANID -ne $null){
                $currVLANID = $obj.VLANID
            }

			$send = @"
<RIBCL version="2.30">
   <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
      <RIB_INFO MODE="WRITE" >
         <MOD_NETWORK_SETTINGS>
"@
			if($currEnableNIC -ne $null){
				$send = $send + @"
                <ENABLE_NIC value=$(Add-Quotes -InString $currEnableNIC)/>
"@
            }
            if($currSharedNetworkPort -ne $null){
                $send = $send + @"
               <SHARED_NETWORK_PORT VALUE=$(Add-Quotes -InString $currSharedNetworkPort)/>
"@
            }
            if($currVLAN -ne $null){
                $send = $send + @"
                <VLAN_ENABLED VALUE=$(Add-Quotes -InString $currVLAN)/>
"@
            }
            if($currVLANID -ne $null){
                $send = $send + @"
                <VLAN_ID VALUE=$(Add-Quotes -InString $currVLANID)/>
"@
            }
            $send = $send + @"
         </MOD_NETWORK_SETTINGS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOVLAN`n" + $send
            Write-Output $send
        }
        else
        {
            if(Check-RibclEmpty($send)){
             return
            }
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOVMPortSetting{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Port
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Port")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }          
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Port"; parameterValue = $Port; parameterNeedInput = $true; parameterSupportInt = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currPort = $obj.Port
			$send = @"
<RIBCL VERSION="2.30">
  <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
    <RIB_INFO MODE="write">
      <MOD_GLOBAL_SETTINGS>
        <VIRTUAL_MEDIA_PORT VALUE = $(Add-Quotes -InString $currPort)/>
      </MOD_GLOBAL_SETTINGS>
    </RIB_INFO>
  </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOVMPortSetting`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Set-HPiLOVMStatus{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("FLOPPY","CDROM")] $Device,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("BOOT_ALWAYS","BOOT_ONCE","NO_BOOT","CONNECT","DISCONNECT")] $VMBootOption,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateSet("Yes","Y","Enable","On","No","N","Disable","Off")] $VMWriteProtect
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "Device", "VMBootOption", "VMWriteProtect")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }   
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Device" ;parameterValue = $Device; parameterDefaultValue="FLOPPY"; parameterValidateValues=@{"FLOPPY"="FLOPPY";"CDROM"="CDROM"}; parameterAcceptValidValues="FLOPPY,CDROM" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VMBootOption" ;parameterValue = $VMBootOption; parameterValidateValues=@{"BOOT_ALWAYS"="BOOT_ALWAYS";"BOOT_ONCE"="BOOT_ONCE";"NO_BOOT"="NO_BOOT";"CONNECT"="CONNECT";"DISCONNECT"="DISCONNECT"}; parameterAcceptValidValues="BOOT_ALWAYS,BOOT_ONCE,NO_BOOT,CONNECT,DISCONNECT" }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "VMWriteProtect" ;parameterValue = $VMWriteProtect; parameterValidateValues=@{"Yes"="Y";"Y"="Y";"Enable"="Y"; "On"="Y";"No"="N";"N"="N";"Disable"="N"; "Off"="N"}; parameterAcceptValidValues="Yes,Y,Enable,On,No,N,Disable,Off" }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
	

    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currDevice = $obj.Device
            if($obj.VMBootOption -ne $null ){
                $currVMBootOption = $obj.VMBootOption
            }
            if($obj.VMWriteProtect -ne $null ){
                $currVMWriteProtect = $obj.VMWriteProtect
            }

			$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <SET_VM_STATUS DEVICE=$(Add-Quotes -InString $currDevice)>
"@
			if($currVMBootOption -ne $null){
				$send = $send + @"
`n              <VM_BOOT_OPTION VALUE=$(Add-Quotes -InString $currVMBootOption)/>
"@
			}
			if($currVMWriteProtect -ne $null){
				$send = $send + @"
`n              <VM_WRITE_PROTECT VALUE=$(Add-Quotes -InString $currVMWriteProtect) />
"@
			}
			$send = $send + @"
`n         </SET_VM_STATUS>         
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Set-HPiLOVMStatus`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Start-HPiLOERSAHSSubmission{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $MessageID,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][ValidateRange(1,7)] $BBDays
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "MessageID", "BBDays")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
    $arrayForProcess=@()
    $tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "MessageID"; parameterValue = $MessageID; parameterNeedInput = $true }
    $arrayForProcess+=$tmpObj
    $tmpObj = @{parameterName = "BBDays"; parameterValue = $BBDays; parameterNeedInput = $true; parameterSupportInt = $true; parameterMinRange = 1; parameterMaxRange = 7 }
    $arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
    $validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currMessageID = $obj.MessageID
            $currBBDays = $obj.BBDays 
            $send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <TRIGGER_BB_DATA>
                <MESSAGE_ID value=$(Add-Quotes -InString $currMessageID)/>
                <BB_DAYS value=$(Add-Quotes -InString $currBBDays)/>
            </TRIGGER_BB_DATA>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Start-HPiLOERSAHSSubmission`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Start-HPiLOL2Collection{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $MessageID
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "MessageID")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }  
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "MessageID"; parameterValue = $MessageID }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currMessageID = $obj.MessageID
			if($currMessageID -eq $null){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <TRIGGER_L2_COLLECTION></TRIGGER_L2_COLLECTION>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@              
			}
			else{
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <TRIGGER_L2_COLLECTION>
                <MESSAGE_ID value=$(Add-Quotes -InString $currMessageID)/>
            </TRIGGER_L2_COLLECTION>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Start-HPiLOL2Collection`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret

                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}

function Start-HPiLOTestEvent{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject","ExternalCommand")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $MessageID
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "MessageID")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
            if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}            
        }         
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "MessageID" ;parameterValue = $MessageID}
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
        foreach($obj in $runObjects){
			$currUsername = ""
			$currPassword = ""
			Get-UserNameAndPW -currUsername  ([ref]$currUsername) -currPassword ([ref]$currPassword) -obj $obj
            $currMessageID = $obj.MessageID
			if($currMessageID -eq $null){
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <TRIGGER_TEST_EVENT></TRIGGER_TEST_EVENT>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			else{
				$send = @"
<RIBCL VERSION="2.30">
    <LOGIN USER_LOGIN=$(Add-Quotes -InString $currUsername) PASSWORD=$(Add-Quotes -InString $currPassword)>
        <RIB_INFO MODE="write">
            <TRIGGER_TEST_EVENT>
                <MESSAGE_ID value=$(Add-Quotes -InString $currMessageID)/>
            </TRIGGER_TEST_EVENT>
        </RIB_INFO>
    </LOGIN>
</RIBCL>
"@
			}
			$obj  | Add-Member NoteProperty "RIBCLCommand" $send
		}
        if($OutputType -eq "ExternalCommand")
        {
            $send = "Start-HPiLOTestEvent`n" + $send
            Write-Output $send
        }
        else
        {
		    $rets =  Execute-RIBCL($runObjects)
            foreach($retobject in $rets)
            {
			$errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
            {
				$errorWarningIncremented = 0
                if($retobject.err -ne $null)
                {
                    throw $retobject.err
                }
                $ret= $retobject.ret
                if($outputType -eq "xml"){
                    # creating XML in required format from the output
                    $mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''

                    $xml = '<?xml version="1.0"?>'
                    $xml += "`n" +$matches[0] + "`n"
                    $xml += $ret
                    $xml += '</RIBCL>'

                    $outputList += $xml
                }
                elseif($outputType -eq "ribcl"){
                    $outputList += $ret
                }
                elseif($outputType -eq "PSObject"){
                    # creating XML in required format from the output 
                    $ret = $ret.Replace('<?xml version="1.0"?>', "")
                    $ret = $ret.Replace('</RIBCL>', "")
                    $ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
        
                    $ret = '<?xml version="1.0"?>
    <RIBCL Version="2.22">
    ' + $ret + '</RIBCL>'
        
                    $xml = [xml] $ret
                
                    $tmpObj = New-Object PSObject        
                    $tmpObj | Add-Member NoteProperty "IP" $retobject.runobject.IP
                    $tmpObj | Add-Member NoteProperty "HOSTNAME" $retobject.runobject.Hostname
                    $tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
                    $tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

                    Get-Status $xml $tmpObj
                    if($tmpObj.STATUS_TYPE -ne "OK"){
                        $outputList += $tmpObj
                    }
                }
            }
            catch{
                $errorWarningIncremented = 1
                $errorCounter++
                if($retobject.runobject.IP -eq ""){
                   Write-Host "Error - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($retobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($retobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($retobject.runobject.IP) - $($retobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }
    return $outputList
	}
}


function Update-HPiLOFirmware{
    # .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
    [CmdletBinding(PositionalBinding=$false)]
    param(
        [parameter(Mandatory=$false)] [ValidateSet("XML","RIBCL","PSObject")] [String]$OutputType = "PSObject",
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Username,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Password,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Credential,
        [parameter(Mandatory=$false)] [switch] $Force,
        [parameter(Mandatory=$false, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)] $Server,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)][switch] $TPMEnabled,
        [parameter(Mandatory=$false, ValueFromPipelineByPropertyName=$true)] $Location
    )
	BEGIN 
    { 
        $errorCount = $global:error.Count; 
        $parameterArray=@("Server", "Username", "Password", "Credential", "TPMEnabled", "Location")
        $parametersFromCmd = @{}
        foreach($p in $parameterArray)
        {
            $v = Get-Variable -Name $p -ValueOnly
			if($p -eq "TPMEnabled")
			{if($v -ne $false) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)}}
			else
			{ if($v -ne $null) { $parametersFromCmd.Add($p, $true)} else {$parametersFromCmd.Add($p, $false)} }
        }  		
    }
	END {
	if($global:error.Count -gt $errorCount)
	{ return }
    $outputList = @()
    $runObjects = @()
	
    $errorCounter = 0
    $warningCounter = 0
    $totalResultCount = 0
    $errorWarningIncremented = 0
    $error.Clear()
	
	$arrayForProcess=@()
	$tmpObj = @{parameterName = "Server"; parameterNeedInput = $true; parameterValue = $Server }  
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Username"; parameterValue = $Username; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Password"; parameterValue = $Password; parameterNeedInput = $false; parameterIsPassword = $true }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Credential"; parameterValue = $Credential; parameterNeedInput = $false }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "TPMEnabled"; parameterValue = $($TPMEnabled.IsPresent.ToString()) }
	$arrayForProcess+=$tmpObj
	$tmpObj = @{parameterName = "Location"; parameterValue = $Location; parameterNeedInput = $true }
	$arrayForProcess+=$tmpObj
	foreach($p in $arrayForProcess)
    {
        $p.Add("parameterFromCmd", $parametersFromCmd[$p.parameterName])
    }
	$validateInputFlag = Process-Input -PipeInput $Input -arrayForProcess $arrayForProcess -Force $Force -arrayAfterProcess ([ref] $runObjects)	
    
    if($validateInputFlag){
		$returnobjects = Upload-FWFile $runObjects
        foreach($returnobject in $returnobjects)
		{
            $errmsg = Get-Message("MSG_RETRIEVING_INFO")
            try
			{
				if($returnobject.err -ne $null)
				{
					throw $returnobject.err
				}
				else
				{
					$ret = $returnobject.data
					if($outputType -eq "xml"){
						# creating XML in required format from the output
						$mat = $ret -match '<RIBCL VERSION="\d\.\d{2}">'
						$ret = $ret.Replace('<?xml version="1.0"?>', "")
						$ret = $ret.Replace('</RIBCL>', "")
						$ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
						$xml = '<?xml version="1.0"?>'
						$xml += "`n" +$matches[0] + "`n"
						$xml += $ret
						$xml += '</RIBCL>'
						$outputList += $xml
					}
					elseif($outputType -eq "ribcl"){
						$outputList += $ret
					}
					elseif($outputType -eq "PSObject"){
						# creating XML in required format from the output 
						$ret = $ret.Replace('<?xml version="1.0"?>', "")
						$ret = $ret.Replace('</RIBCL>', "")
						$ret = $ret -replace '<RIBCL VERSION="\d\.\d{2}">',''
						$ret = '<?xml version="1.0"?>
<RIBCL Version="2.22">
' + $ret + '</RIBCL>'
						$xml = [xml] $ret
					
						$tmpObj = New-Object PSObject        
						$tmpObj | Add-Member NoteProperty "IP" $returnobject.runobject.IP
						$tmpObj | Add-Member NoteProperty "HOSTNAME" $returnobject.runobject.Hostname
						$tmpObj | Add-Member NoteProperty "STATUS_TYPE" "OK"
						$tmpObj | Add-Member NoteProperty "STATUS_MESSAGE" "OK"

						Get-Status $xml $tmpObj
						
						if($tmpObj.STATUS_TYPE -ne "OK"){
							$outputList += $tmpObj
						}
					}
				}
			}
            catch
			{
                $errorWarningIncremented = 1
                $errorCounter++
                if($returnobject.runobject.IP -eq ""){
                   Write-Host "Error - $($returnobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                elseif($returnobject.runobject.Hostname -eq ""){
                   Write-Host "Error - $($returnobject.runobject.IP) - $errmsg" -ForegroundColor red
                }
                else{
                   Write-Host "Error - $($returnobject.runobject.IP) - $($returnobject.runobject.Hostname) - $errmsg" -ForegroundColor red
                }
                $stringerror = ""
                $stringerror += $_.Exception.Message.ToString()
                $stringerror += "`n"
                $stringerror += $_.InvocationInfo.PositionMessage.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+CategoryInfo          :" + $_.CategoryInfo.ToString()
                $stringerror += "`n"
                $stringerror += "`t" + "+FullyQualifiedErrorId :" + $_.FullyQualifiedErrorId.ToString()
                Write-Host $stringerror -ForegroundColor red
            }
        }
        $totalResultCount = $runObjects.Length
        foreach($obj in $outputList){
            if($obj.STATUS_TYPE -eq "Error" -and $errorWarningIncremented -ne 1){
                $errorCounter++
            }
            elseif($obj.STATUS_TYPE -eq "Warning" -and $errorWarningIncremented -ne 1){
                $warningCounter++
            }
        }
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-$totalResultCount"
    }     
    return $outputList
	}
}

function Update-HPiLOModuleVersion{
# .EXTERNALHELP HPiLOCmdlets.psm1-help.xml
	[CmdletBinding(PositionalBinding=$false)]
	param()
    $Error.Clear()
	$errorCounter = 0
    $warningCounter = 0
	$curVersion = ""
    $InstallPath = "$env:ProgramFiles\Hewlett-Packard\PowerShell\Modules\HPiLOCmdlets\"

    $url="http://www.hp.com/go/powershell/updatehelp/"
    $fileName = "HPiLOCmdlets_05545ade-5f25-4696-bfcc-e1d67fe32519_ModuleInfo.xml"
    $manifestFile = "HPiLOCmdlets.psd1"


    if(Test-Path -PathType Leaf -Path "$InstallPath$fileName"){
        try
        {
            $xmlLocal = [xml](Get-Content -Path "$InstallPath$fileName")
			#get remote url
            $url = $xmlLocal.ModuleInfo.ModuleContentURI
			#get current version
			$curVersionString = $xmlLocal.ModuleInfo.Version
			$curVersion = New-Object System.Version $curVersionString
        }
        catch
        {
            $global:error.RemoveAt($global:error.count-1)
            Write-Verbose $([string]::Format($(Get-Message("MSG_DEFAULT_MODULECONTENTURL")) ,$url))
        }
    }
	if($curVersion -eq "")
	{
		$curVersion = $(Test-ModuleManifest -Path "$InstallPath$manifestFile").Version
	}
	
    #retrive the redirected url
    $webrequest = [System.Net.HttpWebRequest] ([System.Net.WebRequest]::Create($url))
    $webrequest.Method="GET"
    try{
        $resp = $webrequest.GetResponse()
		$resp.Close()
    }
    catch
    {
        $global:error.RemoveAt($global:error.count-1)
    }
    $finalurl=$webrequest.Address.OriginalString

    #get latest version
	$errmsg = Get-Message("MSG_FAIL_GETVERSION")
    try{
        $client = New-Object System.Net.WebClient
        $content = $client.DownloadString("$finalurl$fileName")
        $xmlRemote = New-Object System.Xml.XmlDocument
        $xmlRemote.PreserveWhitespace = $true
        if($content -ne "")
        {
            $xmlRemote.LoadXml($content)
            $latestVersion = New-Object System.Version $xmlRemote.ModuleInfo.Version
        }

        if($latestVersion -gt $curVersion)
        {
			$more = "more"
            $more = Read-Host $(Get-Message("MSG_NEW_VERSION_AVAILIABLE"))

            if($more -eq "Yes" -or $more -eq "Y")
            {
                start "http://www.hp.com/go/powershell"
            }        
        }
        else
        {
            $([string]::Format($(Get-Message("MSG_MOST_CURRENT")) ,$curVersion))
        }

        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-1"
    }catch{
		$errorCounter++
		Write-Host "Error - $errmsg" -ForegroundColor red
        Write-Verbose "Errors-$errorCounter, Warnings-$warningCounter, Total-1"
    }
}

Export-ModuleMember -Function Add-HPiLOSSORecord, Add-HPiLOUser, Clear-HPiLOAHSData, Clear-HPiLOEventLog, Clear-HPiLOIML, Clear-HPiLOPowerOnTime, Convert-OLiPHRIBCLToPSObject, Disable-HPiLOERSIRSConnection, Disable-HPiLOSecurityMessage, Dismount-HPiLOVirtualMedia, Enable-HPiLOFIPS, Enable-HPiLOERSIRSConnection, Enable-HPiLOSecurityMessage, Find-HPiLO, Get-HPiLOAHSStatus, Get-HPiLOAssetTag, Get-HPiLOCertificateSigningRequest, Get-HPiLODefaultLanguage, Get-HPiLODirectory, Get-HPiLODriveInfo, Get-HPiLOERSSetting, Get-HPiLOEventLog, Get-HPiLOFan, Get-HPiLOFIPSStatus, Get-HPiLOFirmwareInfo, Get-HPiLOFirmwareVersion, Get-HPiLOGlobalSetting, Get-HPiLOHealthSummary, Get-HPiLOHostAPO, Get-HPiLOHostData, Get-HPiLOHostPower, Get-HPiLOHostPowerMicroVersion, Get-HPiLOHostPowerSaver, Get-HPiLOHotKeyConfig, Get-HPiLOIML, Get-HPiLOLanguage, Get-HPiLOLicense, Get-HPiLOMemoryInfo, Get-HPiLOModuleVersion, Get-HPiLONetworkSetting, Get-HPiLONICInfo, Get-HPiLOOAInfo, Get-HPiLOOneTimeBootOrder, Get-HPiLOPersistentBootOrder, Get-HPiLOPowerAlertThreshold, Get-HPiLOPowerCap, Get-HPiLOPowerOnTime, Get-HPiLOPowerReading, Get-HPiLOPowerSupply, Get-HPiLOProcessor, Get-HPiLOProfile, Get-HPiLOProfileApplyResult, Get-HPiLORackSetting, Get-HPiLOSecurityMessage, Get-HPiLOServerInfo, Get-HPiLOServerName, Get-HPiLOSNMPIMSetting, Get-HPiLOSpatial, Get-HPiLOSSOSetting, Get-HPiLOStorageController, Get-HPiLOTemperature, Get-HPiLOUIDStatus, Get-HPiLOUser, Get-HPiLOUserInfo, Get-HPiLOUserList, Get-HPiLOVMStatus, Get-HPiLOVRM, Import-HPiLOCertificate, Import-HPiLOSSHKey, Invoke-HPiLOProfileApply, Invoke-HPiLOProfileDownload, Mount-HPiLOVirtualMedia, Remove-HPiLOProfile, Remove-HPiLOSSORecord, Remove-HPiLOUser, Remove-HPiLOUserSSHKey, Reset-HPiLOAdministratorPassword, Reset-HPiLORIB, Reset-HPiLOServer, Set-HPiLOAHSStatus, Set-HPiLOAssetTag, Set-HPiLOBrownout, Set-HPiLOComputerLockConfig, Set-HPiLODefaultLanguage, Set-HPiLODirectory, Set-HPiLOFactoryDefault, Set-HPiLOGlobalSetting, Set-HPiLOHostAPO, Set-HPiLOHostPower, Set-HPiLOHostPowerSaver, Set-HPiLOHotKeyConfig, Set-HPiLOKerberosConfig, Set-HPiLOLicenseKey, Set-HPiLOLockConfiguration, Set-HPiLONetworkSetting, Set-HPiLOIPv6NetworkSetting,Set-HPiLOOneTimeBootOrder, Set-HPiLOPassword, Set-HPiLOPersistentBootOrder, Set-HPiLOPowerAlertThreshold, Set-HPiLOPowerCap, Set-HPiLORBSUPOSTIP, Set-HPiLOSchemalessDirectory, Set-HPiLOServerName, Set-HPiLOSharedNetworkPort, Set-HPiLOSNMPIMSetting, Set-HPiLOSSOSetting, Set-HPiLOUIDStatus, Set-HPiLOUser, Set-HPiLOVirtualPowerButton, Set-HPiLOVLAN, Set-HPiLOVMStatus, Set-HPiLOVMPortSetting, Start-HPiLOERSAHSSubmission, Start-HPiLOL2Collection, Start-HPiLOTestEvent, Update-HPiLOFirmware, Update-HPiLOModuleVersion
# SIG # Begin signature block
# MIIZGAYJKoZIhvcNAQcCoIIZCTCCGQUCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUwLLfVIgiPZGYDmRuykQ4EqNn
# jwygghPzMIID7jCCA1egAwIBAgIQfpPr+3zGTlnqS5p31Ab8OzANBgkqhkiG9w0B
# AQUFADCBizELMAkGA1UEBhMCWkExFTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIG
# A1UEBxMLRHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsGA1UECxMUVGhh
# d3RlIENlcnRpZmljYXRpb24xHzAdBgNVBAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcg
# Q0EwHhcNMTIxMjIxMDAwMDAwWhcNMjAxMjMwMjM1OTU5WjBeMQswCQYDVQQGEwJV
# UzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xMDAuBgNVBAMTJ1N5bWFu
# dGVjIFRpbWUgU3RhbXBpbmcgU2VydmljZXMgQ0EgLSBHMjCCASIwDQYJKoZIhvcN
# AQEBBQADggEPADCCAQoCggEBALGss0lUS5ccEgrYJXmRIlcqb9y4JsRDc2vCvy5Q
# WvsUwnaOQwElQ7Sh4kX06Ld7w3TMIte0lAAC903tv7S3RCRrzV9FO9FEzkMScxeC
# i2m0K8uZHqxyGyZNcR+xMd37UWECU6aq9UksBXhFpS+JzueZ5/6M4lc/PcaS3Er4
# ezPkeQr78HWIQZz/xQNRmarXbJ+TaYdlKYOFwmAUxMjJOxTawIHwHw103pIiq8r3
# +3R8J+b3Sht/p8OeLa6K6qbmqicWfWH3mHERvOJQoUvlXfrlDqcsn6plINPYlujI
# fKVOSET/GeJEB5IL12iEgF1qeGRFzWBGflTBE3zFefHJwXECAwEAAaOB+jCB9zAd
# BgNVHQ4EFgQUX5r1blzMzHSa1N197z/b7EyALt0wMgYIKwYBBQUHAQEEJjAkMCIG
# CCsGAQUFBzABhhZodHRwOi8vb2NzcC50aGF3dGUuY29tMBIGA1UdEwEB/wQIMAYB
# Af8CAQAwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NybC50aGF3dGUuY29tL1Ro
# YXd0ZVRpbWVzdGFtcGluZ0NBLmNybDATBgNVHSUEDDAKBggrBgEFBQcDCDAOBgNV
# HQ8BAf8EBAMCAQYwKAYDVR0RBCEwH6QdMBsxGTAXBgNVBAMTEFRpbWVTdGFtcC0y
# MDQ4LTEwDQYJKoZIhvcNAQEFBQADgYEAAwmbj3nvf1kwqu9otfrjCR27T4IGXTdf
# plKfFo3qHJIJRG71betYfDDo+WmNI3MLEm9Hqa45EfgqsZuwGsOO61mWAK3ODE2y
# 0DGmCFwqevzieh1XTKhlGOl5QGIllm7HxzdqgyEIjkHq3dlXPx13SYcqFgZepjhq
# IhKjURmDfrYwggSjMIIDi6ADAgECAhAOz/Q4yP6/NW4E2GqYGxpQMA0GCSqGSIb3
# DQEBBQUAMF4xCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRTeW1hbnRlYyBDb3Jwb3Jh
# dGlvbjEwMC4GA1UEAxMnU3ltYW50ZWMgVGltZSBTdGFtcGluZyBTZXJ2aWNlcyBD
# QSAtIEcyMB4XDTEyMTAxODAwMDAwMFoXDTIwMTIyOTIzNTk1OVowYjELMAkGA1UE
# BhMCVVMxHTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMTQwMgYDVQQDEytT
# eW1hbnRlYyBUaW1lIFN0YW1waW5nIFNlcnZpY2VzIFNpZ25lciAtIEc0MIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAomMLOUS4uyOnREm7Dv+h8GEKU5Ow
# mNutLA9KxW7/hjxTVQ8VzgQ/K/2plpbZvmF5C1vJTIZ25eBDSyKV7sIrQ8Gf2Gi0
# jkBP7oU4uRHFI/JkWPAVMm9OV6GuiKQC1yoezUvh3WPVF4kyW7BemVqonShQDhfu
# ltthO0VRHc8SVguSR/yrrvZmPUescHLnkudfzRC5xINklBm9JYDh6NIipdC6Anqh
# d5NbZcPuF3S8QYYq3AhMjJKMkS2ed0QfaNaodHfbDlsyi1aLM73ZY8hJnTrFxeoz
# C9Lxoxv0i77Zs1eLO94Ep3oisiSuLsdwxb5OgyYI+wu9qU+ZCOEQKHKqzQIDAQAB
# o4IBVzCCAVMwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAO
# BgNVHQ8BAf8EBAMCB4AwcwYIKwYBBQUHAQEEZzBlMCoGCCsGAQUFBzABhh5odHRw
# Oi8vdHMtb2NzcC53cy5zeW1hbnRlYy5jb20wNwYIKwYBBQUHMAKGK2h0dHA6Ly90
# cy1haWEud3Muc3ltYW50ZWMuY29tL3Rzcy1jYS1nMi5jZXIwPAYDVR0fBDUwMzAx
# oC+gLYYraHR0cDovL3RzLWNybC53cy5zeW1hbnRlYy5jb20vdHNzLWNhLWcyLmNy
# bDAoBgNVHREEITAfpB0wGzEZMBcGA1UEAxMQVGltZVN0YW1wLTIwNDgtMjAdBgNV
# HQ4EFgQURsZpow5KFB7VTNpSYxc/Xja8DeYwHwYDVR0jBBgwFoAUX5r1blzMzHSa
# 1N197z/b7EyALt0wDQYJKoZIhvcNAQEFBQADggEBAHg7tJEqAEzwj2IwN3ijhCcH
# bxiy3iXcoNSUA6qGTiWfmkADHN3O43nLIWgG2rYytG2/9CwmYzPkSWRtDebDZw73
# BaQ1bHyJFsbpst+y6d0gxnEPzZV03LZc3r03H0N45ni1zSgEIKOq8UvEiCmRDoDR
# EfzdXHZuT14ORUZBbg2w6jiasTraCXEQ/Bx5tIB7rGn0/Zy2DBYr8X9bCT2bW+IW
# yhOBbQAuOA2oKY8s4bL0WqkBrxWcLC9JG9siu8P+eJRRw4axgohd8D20UaF5Mysu
# e7ncIAkTcetqGVvP6KUwVyyJST+5z3/Jvz4iaGNTmr1pdKzFHTx/kuDDvBzYBHUw
# ggVIMIIEMKADAgECAhBqJba6oqOIHrqYnJL4yw+NMA0GCSqGSIb3DQEBBQUAMIG0
# MQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsT
# FlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBh
# dCBodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhIChjKTEwMS4wLAYDVQQDEyVW
# ZXJpU2lnbiBDbGFzcyAzIENvZGUgU2lnbmluZyAyMDEwIENBMB4XDTE0MDYyNTAw
# MDAwMFoXDTE2MDcyNDIzNTk1OVowejELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
# bGlmb3JuaWExEjAQBgNVBAcTCVBhbG8gQWx0bzEgMB4GA1UEChQXSGV3bGV0dC1Q
# YWNrYXJkIENvbXBhbnkxIDAeBgNVBAMUF0hld2xldHQtUGFja2FyZCBDb21wYW55
# MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvZW91eEe8mEoae5frPX+
# WBFsHw7bkrECc3UANelrP89ZRW64IjR2S/dCUnIpqbMfDXSohVNy/9j8E+Ga8n1M
# wC/IMKigMGRk0AdqjkTML6YhGv5lUFP/c8YOiyEGhx+N/0joXFo8YeN+9xGE82UR
# MGhWJAZjDls+I7VQcCs7UpBuV0egu0tOzufDIgqvWUyTqWAu+lAHsmdS90P+vi82
# Jfv5rEYS6Y1ca2CPMJm7HniDl54QK1By2JEAb5m97VNqyuYKC69D+xDW1GIdGPfr
# v3Ko7NAE5yWg8W8bfIxC5dS+GNh/0alWz1Ke23Uu6Mah+fgO62wxzSd8r1g2VBnw
# NQIDAQABo4IBjTCCAYkwCQYDVR0TBAIwADAOBgNVHQ8BAf8EBAMCB4AwKwYDVR0f
# BCQwIjAgoB6gHIYaaHR0cDovL3NmLnN5bWNiLmNvbS9zZi5jcmwwZgYDVR0gBF8w
# XTBbBgtghkgBhvhFAQcXAzBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2Iu
# Y29tL2NwczAlBggrBgEFBQcCAjAZFhdodHRwczovL2Quc3ltY2IuY29tL3JwYTAT
# BgNVHSUEDDAKBggrBgEFBQcDAzBXBggrBgEFBQcBAQRLMEkwHwYIKwYBBQUHMAGG
# E2h0dHA6Ly9zZi5zeW1jZC5jb20wJgYIKwYBBQUHMAKGGmh0dHA6Ly9zZi5zeW1j
# Yi5jb20vc2YuY3J0MB8GA1UdIwQYMBaAFM+Zqep7JvRLyY6P1/AFJu/j0qedMB0G
# A1UdDgQWBBSxY0RmDskHVeL3426xzdgBWbGuFDARBglghkgBhvhCAQEEBAMCBBAw
# FgYKKwYBBAGCNwIBGwQIMAYBAQABAf8wDQYJKoZIhvcNAQEFBQADggEBAKoA6naf
# BZ3b4qJVW21/IRNtWounIheL5YD5B5aYaQcPZ3I44gwz5jH90C8DTAvsjUn+NWpO
# gLQ53XcskrY8VSUD8eXfK7M8wTmkTuKZBCaX1l/ejt6nnNfzrGHlGwTa2la98Y6d
# IaMwV6+Hv36gQq/Dh6IdjsjNgFExPOc34AsP/yMK89s3PlHphVEXu7C4/CqPzq1n
# 9l/j/2IOJLoKVDeGjvcuD9rtAoeqowChPmKWjdHmjXNd/PKFdlo085yMWZLuZWHj
# KGgddvWJqnRNCti1WrztJUPS4kGTvsuu0sK9eXOK+VKE+uHxIc6bIyZJAJxS3uPw
# jmnBQuPnl1RDZHwwggYKMIIE8qADAgECAhBSAOWqJVb8GobtlsnUSzPHMA0GCSqG
# SIb3DQEBBQUAMIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIElu
# Yy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShj
# KSAyMDA2IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkx
# RTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlm
# aWNhdGlvbiBBdXRob3JpdHkgLSBHNTAeFw0xMDAyMDgwMDAwMDBaFw0yMDAyMDcy
# MzU5NTlaMIG0MQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4x
# HzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1z
# IG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2lnbi5jb20vcnBhIChjKTEwMS4w
# LAYDVQQDEyVWZXJpU2lnbiBDbGFzcyAzIENvZGUgU2lnbmluZyAyMDEwIENBMIIB
# IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9SNLXqXXirsy6dRX9+/kxyZ+
# rRmY/qidfZT2NmsQ13WBMH8EaH/LK3UezR0IjN9plKc3o5x7gOCZ4e43TV/OOxTu
# htTQ9Sc1vCULOKeMY50Xowilq7D7zWpigkzVIdob2fHjhDuKKk+FW5ABT8mndhB/
# JwN8vq5+fcHd+QW8G0icaefApDw8QQA+35blxeSUcdZVAccAJkpAPLWhJqkMp22A
# jpAle8+/PxzrL5b65Yd3xrVWsno7VDBTG99iNP8e0fRakyiF5UwXTn5b/aSTmX/f
# ze+kde/vFfZH5/gZctguNBqmtKdMfr27Tww9V/Ew1qY2jtaAdtcZLqXNfjQtiQID
# AQABo4IB/jCCAfowEgYDVR0TAQH/BAgwBgEB/wIBADBwBgNVHSAEaTBnMGUGC2CG
# SAGG+EUBBxcDMFYwKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNv
# bS9jcHMwKgYIKwYBBQUHAgIwHhocaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3Jw
# YTAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1h
# Z2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0
# cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwNAYDVR0fBC0wKzApoCeg
# JYYjaHR0cDovL2NybC52ZXJpc2lnbi5jb20vcGNhMy1nNS5jcmwwNAYIKwYBBQUH
# AQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2lnbi5jb20wHQYD
# VR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMDMCgGA1UdEQQhMB+kHTAbMRkwFwYD
# VQQDExBWZXJpU2lnbk1QS0ktMi04MB0GA1UdDgQWBBTPmanqeyb0S8mOj9fwBSbv
# 49KnnTAfBgNVHSMEGDAWgBR/02Wnwt3su/AwCfNDOfoCrzMxMzANBgkqhkiG9w0B
# AQUFAAOCAQEAViLmNKTEYctIuQGtVqhkD9mMkcS7zAzlrXqgIn/fRzhKLWzRf3Ea
# fOxwqbHwT+QPDFP6FV7+dJhJJIWBJhyRFEewTGOMu6E01MZF6A2FJnMD0KmMZG3c
# cZLmRQVgFVlROfxYFGv+1KTteWsIDEFy5zciBgm+I+k/RJoe6WGdzLGQXPw90o2s
# Qj1lNtS0PUAoj5sQzyMmzEsgy5AfXYxMNMo82OU31m+lIL006ybZrg3nxZr3obQh
# kTNvhuhYuyV8dA5Y/nUbYz/OMXybjxuWnsVTdoRbnK2R+qztk7pdyCFTwoJTY68S
# DVCHERs9VFKWiiycPZIaCJoFLseTpUiR0zGCBI8wggSLAgEBMIHJMIG0MQswCQYD
# VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
# aWduIFRydXN0IE5ldHdvcmsxOzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRw
# czovL3d3dy52ZXJpc2lnbi5jb20vcnBhIChjKTEwMS4wLAYDVQQDEyVWZXJpU2ln
# biBDbGFzcyAzIENvZGUgU2lnbmluZyAyMDEwIENBAhBqJba6oqOIHrqYnJL4yw+N
# MAkGBSsOAwIaBQCggYwwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
# BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwIwYJKoZIhvcNAQkEMRYEFG5bueN9l7M6
# MqhINKUcHuDpfwMRMCwGCisGAQQBgjcCAQwxHjAcoBqAGABIAFAAaQBMAE8AQwBt
# AGQAbABlAHQAczANBgkqhkiG9w0BAQEFAASCAQAk9d90HvvMzqU7kFfwv+xQzjhl
# 1hRqA2IT4Z7yO1KHLuaQP6EECPnGblwGY+1nEH+OxqDtZq0lY3E7C7wB/NkUATRt
# o+w9sqgqfiMEEfnJSyTfUNTx9LtmFlmiN4PAzxxHkV1nOs7x8FOHQipfW14HBcEs
# jzXcHJyR4B/4wFcu8nG/LJKB7vXWn2gECgcqhrwkPWsApBJTiA/vhqjvlQBpH9Td
# 1e3k/SugFc62KMNNqBIMemeW+DkpUeIOngwEhGNNJ140qORM8dPYAeHhACphZpYe
# v2g/ifj0gj1H5381JB3akFmS7W+d95kvD6Q8mF3Q7NpyXjoXG0tHOtv3QMhBoYIC
# CzCCAgcGCSqGSIb3DQEJBjGCAfgwggH0AgEBMHIwXjELMAkGA1UEBhMCVVMxHTAb
# BgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMTAwLgYDVQQDEydTeW1hbnRlYyBU
# aW1lIFN0YW1waW5nIFNlcnZpY2VzIENBIC0gRzICEA7P9DjI/r81bgTYapgbGlAw
# CQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcN
# AQkFMQ8XDTE1MDEwNzA4MjYwMFowIwYJKoZIhvcNAQkEMRYEFFK5KNzHMSBns29k
# Dzkav/1iSFQeMA0GCSqGSIb3DQEBAQUABIIBAFuFHeuWa+Pi9lOQQMW4SfdUK5eF
# 6DgVZQxIqQ0ArlX5A+32hQ7Pf9jvb9kmFGLyszpN95XDTpYq5yUvUh+HzJRt0Jig
# FjOgzDf1qvoACp9PUr73RrAEQ81GRPZp/6j8jfEIGq4UIU1vM5cDLRzq78lR2xEA
# /5DXDDijV8hYAdgPt5Ve8vUOqDQtfLCqLR/acBJrjjNiFEC4TjqPcNJ3WKD6M4m4
# syrPO4DWrWGG/5qJii3lmgYktGqUxIyJlMFptvbBWrSDguagFF9SDIXpB4k3Yp9z
# ZVScVXuDiVfNRrGu8qXX+nUBze480j4sPS5da1wZ9etyA0KUFNvBvaEJkog=
# SIG # End signature block
